{"version":3,"sources":["../../src/gl-matrix/vec2.ts"],"names":["glMatrix","create","out","ARRAY_TYPE","Float32Array","clone","a","fromValues","x","y","copy","set","add","b","subtract","multiply","divide","ceil","Math","floor","min","max","round","scale","scaleAndAdd","distance","sqrt","squaredDistance","length","squaredLength","negate","inverse","normalize","len","dot","cross","z","lerp","t","ax","ay","random","undefined","r","RANDOM","PI","cos","sin","transformMat2","m","transformMat2d","transformMat3","transformMat4","rotate","rad","p0","p1","sinC","cosC","angle","x1","y1","x2","y2","mag","cosine","acos","zero","str","exactEquals","equals","a0","a1","b0","b1","abs","EPSILON","sub","mul","div","dist","sqrDist","sqrLen","forEach","vec","stride","offset","count","fn","arg","i","l"],"mappings":"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","sourcesContent":["// @eslint-disable\n// @ts-nocheck\n\nimport type {NumericArray} from '@math.gl/types';\nimport * as glMatrix from './common.js';\n\n/**\n * 2 Dimensional Vector\n * @module vec2\n */\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {NumericArray} a new 2D vector\n */\nexport function create() {\n  const out = new glMatrix.ARRAY_TYPE(2);\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n  return out;\n}\n\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {Readonly<NumericArray>} a vector to clone\n * @returns {NumericArray} a new 2D vector\n */\nexport function clone(a) {\n  const out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {NumericArray} a new 2D vector\n */\nexport function fromValues(x, y) {\n  const out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n\n/**\n * Copy the values from one vec2 to another\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the source vector\n * @returns {NumericArray} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {NumericArray} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {NumericArray} out\n */\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n\n/**\n * Adds two vec2's\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the first operand\n * @param {Readonly<NumericArray>} b the second operand\n * @returns {NumericArray} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the first operand\n * @param {Readonly<NumericArray>} b the second operand\n * @returns {NumericArray} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n\n/**\n * Multiplies two vec2's\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the first operand\n * @param {Readonly<NumericArray>} b the second operand\n * @returns {NumericArray} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n\n/**\n * Divides two vec2's\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the first operand\n * @param {Readonly<NumericArray>} b the second operand\n * @returns {NumericArray} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec2\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a vector to ceil\n * @returns {NumericArray} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec2\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a vector to floor\n * @returns {NumericArray} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec2's\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the first operand\n * @param {Readonly<NumericArray>} b the second operand\n * @returns {NumericArray} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec2's\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the first operand\n * @param {Readonly<NumericArray>} b the second operand\n * @returns {NumericArray} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n\n/**\n * symmetric round the components of a vec2\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a vector to round\n * @returns {NumericArray} out\n */\nexport function round(out, a) {\n  out[0] = glMatrix.round(a[0]);\n  out[1] = glMatrix.round(a[1]);\n  return out;\n}\n\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {NumericArray} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the first operand\n * @param {Readonly<NumericArray>} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {NumericArray} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {Readonly<NumericArray>} a the first operand\n * @param {Readonly<NumericArray>} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  const x = b[0] - a[0];\n  const y = b[1] - a[1];\n  return Math.sqrt(x * x + y * y);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {Readonly<NumericArray>} a the first operand\n * @param {Readonly<NumericArray>} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  const x = b[0] - a[0];\n  const y = b[1] - a[1];\n  return x * x + y * y;\n}\n\n/**\n * Calculates the length of a vec2\n *\n * @param {Readonly<NumericArray>} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  const x = a[0];\n  const y = a[1];\n  return Math.sqrt(x * x + y * y);\n}\n\n/**\n * Calculates the squared length of a vec2\n *\n * @param {Readonly<NumericArray>} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n  const x = a[0];\n  const y = a[1];\n  return x * x + y * y;\n}\n\n/**\n * Negates the components of a vec2\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a vector to negate\n * @returns {NumericArray} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a vector to invert\n * @returns {NumericArray} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n\n/**\n * Normalize a vec2\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a vector to normalize\n * @returns {NumericArray} out\n */\nexport function normalize(out, a) {\n  const x = a[0];\n  const y = a[1];\n  let len = x * x + y * y;\n  if (len > 0) {\n    // TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {Readonly<NumericArray>} a the first operand\n * @param {Readonly<NumericArray>} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {Readonly<NumericArray>} a the first operand\n * @param {Readonly<NumericArray>} b the second operand\n * @returns {vec3} out\n */\nexport function cross(out, a, b) {\n  const z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the first operand\n * @param {Readonly<NumericArray>} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {NumericArray} out\n */\nexport function lerp(out, a, b, t) {\n  const ax = a[0];\n  const ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {NumericArray} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If omitted, a unit vector will be returned\n * @returns {NumericArray} out\n */\nexport function random(out, scale) {\n  scale = scale === undefined ? 1.0 : scale;\n  const r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the vector to transform\n * @param {ReadonlyMat2} m matrix to transform with\n * @returns {NumericArray} out\n */\nexport function transformMat2(out, a, m) {\n  const x = a[0];\n  const y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the vector to transform\n * @param {ReadonlyMat2d} m matrix to transform with\n * @returns {NumericArray} out\n */\nexport function transformMat2d(out, a, m) {\n  const x = a[0];\n  const y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the vector to transform\n * @param {ReadonlyMat3} m matrix to transform with\n * @returns {NumericArray} out\n */\nexport function transformMat3(out, a, m) {\n  const x = a[0];\n  const y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {NumericArray} out\n */\nexport function transformMat4(out, a, m) {\n  const x = a[0];\n  const y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n\n/**\n * Rotate a 2D vector\n * @param {NumericArray} out The receiving vec2\n * @param {Readonly<NumericArray>} a The vec2 point to rotate\n * @param {Readonly<NumericArray>} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {NumericArray} out\n */\nexport function rotate(out, a, b, rad) {\n  // Translate point to the origin\n  const p0 = a[0] - b[0];\n  const p1 = a[1] - b[1];\n  const sinC = Math.sin(rad);\n  const cosC = Math.cos(rad);\n\n  // perform rotation and translate to correct position\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n\n  return out;\n}\n\n/**\n * Get the angle between two 2D vectors\n * @param {Readonly<NumericArray>} a The first operand\n * @param {Readonly<NumericArray>} b The second operand\n * @returns {Number} The angle in radians\n */\nexport function angle(a, b) {\n  const x1 = a[0];\n  const y1 = a[1];\n  const x2 = b[0];\n  const y2 = b[1];\n  // mag is the product of the magnitudes of a and b\n  const mag = Math.sqrt((x1 * x1 + y1 * y1) * (x2 * x2 + y2 * y2));\n  // mag &&.. short circuits if mag == 0\n  const cosine = mag && (x1 * x2 + y1 * y2) / mag;\n  // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n\n/**\n * Set the components of a vec2 to zero\n *\n * @param {NumericArray} out the receiving vector\n * @returns {NumericArray} out\n */\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {Readonly<NumericArray>} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return `vec2(${a[0]}, ${a[1]})`;\n}\n\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {Readonly<NumericArray>} a The first vector.\n * @param {Readonly<NumericArray>} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {Readonly<NumericArray>} a The first vector.\n * @param {Readonly<NumericArray>} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  const a0 = a[0];\n  const a1 = a[1];\n  const b0 = b[0];\n  const b1 = b[1];\n  return (\n    Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n    Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1))\n  );\n}\n\n/**\n * Alias for {@link vec2.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function () {\n  const vec = create();\n\n  return function (a, stride, offset, count, fn, arg) {\n    let i;\n    let l;\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n})();\n"],"file":"vec2.js"}