{"version":3,"sources":["../../src/gl-matrix/vec3.ts"],"names":["glMatrix","create","out","ARRAY_TYPE","Float32Array","clone","a","length","x","y","z","Math","sqrt","fromValues","copy","set","add","b","subtract","multiply","divide","ceil","floor","min","max","round","scale","scaleAndAdd","distance","squaredDistance","squaredLength","negate","inverse","normalize","len","dot","cross","ax","ay","az","bx","by","bz","lerp","t","slerp","angle","acos","sinTotal","sin","ratioA","ratioB","hermite","c","d","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","random","undefined","r","RANDOM","PI","zScale","cos","transformMat4","m","w","transformMat3","transformQuat","q","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","rotateX","rad","p","rotateY","rotateZ","mag","cosine","zero","str","exactEquals","equals","a0","a1","a2","b0","b1","b2","abs","EPSILON","sub","mul","div","dist","sqrDist","sqrLen","forEach","vec","stride","offset","count","fn","arg","i","l"],"mappings":"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","sourcesContent":["// @eslint-disable\n// @ts-nocheck\n\nimport * as glMatrix from './common.js';\n\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\nexport function create() {\n  const out = new glMatrix.ARRAY_TYPE(3);\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n  return out;\n}\n\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\nexport function clone(a) {\n  const out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\nexport function fromValues(x, y, z) {\n  const out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n\n/**\n * symmetric round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\nexport function round(out, a) {\n  out[0] = glMatrix.round(a[0]);\n  out[1] = glMatrix.round(a[1]);\n  out[2] = glMatrix.round(a[2]);\n  return out;\n}\n\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  const x = b[0] - a[0];\n  const y = b[1] - a[1];\n  const z = b[2] - a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  const x = b[0] - a[0];\n  const y = b[1] - a[1];\n  const z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  return x * x + y * y + z * z;\n}\n\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\nexport function normalize(out, a) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  let len = x * x + y * y + z * z;\n  if (len > 0) {\n    // TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\nexport function cross(out, a, b) {\n  const ax = a[0];\n  const ay = a[1];\n  const az = a[2];\n  const bx = b[0];\n  const by = b[1];\n  const bz = b[2];\n\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function lerp(out, a, b, t) {\n  const ax = a[0];\n  const ay = a[1];\n  const az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n\n/**\n * Performs a spherical linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function slerp(out, a, b, t) {\n  const angle = Math.acos(Math.min(Math.max(dot(a, b), -1), 1));\n  const sinTotal = Math.sin(angle);\n\n  const ratioA = Math.sin((1 - t) * angle) / sinTotal;\n  const ratioB = Math.sin(t * angle) / sinTotal;\n  out[0] = ratioA * a[0] + ratioB * b[0];\n  out[1] = ratioA * a[1] + ratioB * b[1];\n  out[2] = ratioA * a[2] + ratioB * b[2];\n\n  return out;\n}\n\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function hermite(out, a, b, c, d, t) {\n  const factorTimes2 = t * t;\n  const factor1 = factorTimes2 * (2 * t - 3) + 1;\n  const factor2 = factorTimes2 * (t - 2) + t;\n  const factor3 = factorTimes2 * (t - 1);\n  const factor4 = factorTimes2 * (3 - 2 * t);\n\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n\n  return out;\n}\n\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function bezier(out, a, b, c, d, t) {\n  const inverseFactor = 1 - t;\n  const inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  const factorTimes2 = t * t;\n  const factor1 = inverseFactorTimesTwo * inverseFactor;\n  const factor2 = 3 * t * inverseFactorTimesTwo;\n  const factor3 = 3 * factorTimes2 * inverseFactor;\n  const factor4 = factorTimes2 * t;\n\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If omitted, a unit vector will be returned\n * @returns {vec3} out\n */\nexport function random(out, scale) {\n  scale = scale === undefined ? 1.0 : scale;\n\n  const r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  const z = glMatrix.RANDOM() * 2.0 - 1.0;\n  const zScale = Math.sqrt(1.0 - z * z) * scale;\n\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat4(out, a, m) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  let w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat3(out, a, m) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  const qx = q[0];\n  const qy = q[1];\n  const qz = q[2];\n  const qw = q[3];\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n  let uvx = qy * z - qz * y;\n  let uvy = qz * x - qx * z;\n  let uvz = qx * y - qy * x;\n  // var uuv = vec3.cross([], qvec, uv);\n  let uuvx = qy * uvz - qz * uvy;\n  let uuvy = qz * uvx - qx * uvz;\n  let uuvz = qx * uvy - qy * uvx;\n  // vec3.scale(uv, uv, 2 * w);\n  const w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2;\n  // vec3.scale(uuv, uuv, 2);\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2;\n  // return vec3.add(out, a, vec3.add(out, uv, uuv));\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\nexport function rotateX(out, a, b, rad) {\n  const p = [];\n  const r = [];\n  // Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  // perform rotation\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad);\n\n  // translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\nexport function rotateY(out, a, b, rad) {\n  const p = [];\n  const r = [];\n  // Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  // perform rotation\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad);\n\n  // translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\nexport function rotateZ(out, a, b, rad) {\n  const p = [];\n  const r = [];\n  // Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  // perform rotation\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2];\n\n  // translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\nexport function angle(a, b) {\n  const ax = a[0];\n  const ay = a[1];\n  const az = a[2];\n  const bx = b[0];\n  const by = b[1];\n  const bz = b[2];\n  const mag = Math.sqrt((ax * ax + ay * ay + az * az) * (bx * bx + by * by + bz * bz));\n  const cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return `vec3(${a[0]}, ${a[1]}, ${a[2]})`;\n}\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  const a0 = a[0];\n  const a1 = a[1];\n  const a2 = a[2];\n  const b0 = b[0];\n  const b1 = b[1];\n  const b2 = b[2];\n  return (\n    Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n    Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n    Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2))\n  );\n}\n\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec3.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function () {\n  const vec = create();\n\n  return function (a, stride, offset, count, fn, arg) {\n    let i;\n    let l;\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n})();\n"],"file":"vec3.js"}