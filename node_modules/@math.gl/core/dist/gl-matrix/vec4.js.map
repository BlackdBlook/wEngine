{"version":3,"sources":["../../src/gl-matrix/vec4.ts"],"names":["glMatrix","create","out","ARRAY_TYPE","Float32Array","clone","a","fromValues","x","y","z","w","copy","set","add","b","subtract","multiply","divide","ceil","Math","floor","min","max","round","scale","scaleAndAdd","distance","sqrt","squaredDistance","length","squaredLength","negate","inverse","normalize","len","dot","cross","u","v","A","B","C","D","E","F","G","H","I","J","lerp","t","ax","ay","az","aw","random","undefined","v1","v2","v3","v4","s1","s2","RANDOM","d","transformMat4","m","transformQuat","q","qx","qy","qz","qw","ix","iy","iz","iw","zero","str","exactEquals","equals","a0","a1","a2","a3","b0","b1","b2","b3","abs","EPSILON","sub","mul","div","dist","sqrDist","sqrLen","forEach","vec","stride","offset","count","fn","arg","i","l"],"mappings":"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","sourcesContent":["// @eslint-disable\n// @ts-nocheck\n\nimport * as glMatrix from './common.js';\n\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\nexport function create() {\n  const out = new glMatrix.ARRAY_TYPE(4);\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n  return out;\n}\n\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {ReadonlyVec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\nexport function clone(a) {\n  const out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\nexport function fromValues(x, y, z, w) {\n  const out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the source vector\n * @returns {vec4} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to ceil\n * @returns {vec4} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to floor\n * @returns {vec4} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n\n/**\n * symmetric round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to round\n * @returns {vec4} out\n */\nexport function round(out, a) {\n  out[0] = glMatrix.round(a[0]);\n  out[1] = glMatrix.round(a[1]);\n  out[2] = glMatrix.round(a[2]);\n  out[3] = glMatrix.round(a[3]);\n  return out;\n}\n\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  const x = b[0] - a[0];\n  const y = b[1] - a[1];\n  const z = b[2] - a[2];\n  const w = b[3] - a[3];\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  const x = b[0] - a[0];\n  const y = b[1] - a[1];\n  const z = b[2] - a[2];\n  const w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n\n/**\n * Calculates the length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  const w = a[3];\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n\n/**\n * Calculates the squared length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  const w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to negate\n * @returns {vec4} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to invert\n * @returns {vec4} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to normalize\n * @returns {vec4} out\n */\nexport function normalize(out, a) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  const w = a[3];\n  let len = x * x + y * y + z * z + w * w;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n\n/**\n * Returns the cross-product of three vectors in a 4-dimensional space\n *\n * @param {ReadonlyVec4} result the receiving vector\n * @param {ReadonlyVec4} U the first vector\n * @param {ReadonlyVec4} V the second vector\n * @param {ReadonlyVec4} W the third vector\n * @returns {vec4} result\n */\nexport function cross(out, u, v, w) {\n  const A = v[0] * w[1] - v[1] * w[0];\n  const B = v[0] * w[2] - v[2] * w[0];\n  const C = v[0] * w[3] - v[3] * w[0];\n  const D = v[1] * w[2] - v[2] * w[1];\n  const E = v[1] * w[3] - v[3] * w[1];\n  const F = v[2] * w[3] - v[3] * w[2];\n  const G = u[0];\n  const H = u[1];\n  const I = u[2];\n  const J = u[3];\n\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n\n  return out;\n}\n\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\nexport function lerp(out, a, b, t) {\n  const ax = a[0];\n  const ay = a[1];\n  const az = a[2];\n  const aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If omitted, a unit vector will be returned\n * @returns {vec4} out\n */\nexport function random(out, scale) {\n  scale = scale === undefined ? 1.0 : scale;\n\n  // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n  let v1;\n  let v2;\n  let v3;\n  let v4;\n  let s1;\n  let s2;\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  const d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec4} out\n */\nexport function transformMat4(out, a, m) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  const w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec4} out\n */\nexport function transformQuat(out, a, q) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  const qx = q[0];\n  const qy = q[1];\n  const qz = q[2];\n  const qw = q[3];\n\n  // calculate quat * vec\n  const ix = qw * x + qy * z - qz * y;\n  const iy = qw * y + qz * x - qx * z;\n  const iz = qw * z + qx * y - qy * x;\n  const iw = -qx * x - qy * y - qz * z;\n\n  // calculate result * inverse quat\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Set the components of a vec4 to zero\n *\n * @param {vec4} out the receiving vector\n * @returns {vec4} out\n */\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return `vec4(${a[0]}, ${a[1]}, ${a[2]}, ${a[3]})`;\n}\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  const a0 = a[0];\n  const a1 = a[1];\n  const a2 = a[2];\n  const a3 = a[3];\n  const b0 = b[0];\n  const b1 = b[1];\n  const b2 = b[2];\n  const b3 = b[3];\n  return (\n    Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n    Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n    Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n    Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3))\n  );\n}\n\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec4.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function () {\n  const vec = create();\n\n  return function (a, stride, offset, count, fn, arg) {\n    let i;\n    let l;\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n})();\n"],"file":"vec4.js"}