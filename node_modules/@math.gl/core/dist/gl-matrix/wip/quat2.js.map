{"version":3,"sources":["../../../src/gl-matrix/wip/quat2.ts"],"names":["glMatrix","quat","mat4","create","dq","ARRAY_TYPE","Float32Array","clone","a","fromValues","x1","y1","z1","w1","x2","y2","z2","w2","fromRotationTranslationValues","ax","ay","az","fromRotationTranslation","out","q","t","bx","by","bz","bw","fromTranslation","fromRotation","fromMat4","outer","getRotation","getTranslation","copy","identity","set","getReal","getDual","setReal","setDual","aw","translate","v","ax1","ay1","az1","aw1","bx1","by1","bz1","ax2","ay2","az2","aw2","rotateX","rad","rotateY","rotateZ","rotateByQuatAppend","qx","qy","qz","qw","rotateByQuatPrepend","rotateAroundAxis","axis","Math","abs","EPSILON","axisLength","sqrt","s","sin","cos","add","b","multiply","ax0","ay0","az0","aw0","bw1","bx0","by0","bz0","bw0","mul","scale","dot","lerp","mt","invert","sqlen","squaredLength","conjugate","length","len","sqrLen","normalize","magnitude","a0","a1","a2","a3","b0","b1","b2","b3","a_dot_b","str","exactEquals","equals","a4","a5","a6","a7","b4","b5","b6","b7","max"],"mappings":"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","sourcesContent":["// @ts-nocheck\n/* eslint-disable */\nimport * as glMatrix from './common.js';\nimport * as quat from './quat.js';\nimport * as mat4 from './mat4.js';\n\n/**\n * Dual Quaternion<br>\n * Format: [real, dual]<br>\n * Quaternion format: XYZW<br>\n * Make sure to have normalized dual quaternions, otherwise the functions may not work as intended.<br>\n * @module quat2\n */\n\n/**\n * Creates a new identity dual quat\n *\n * @returns {quat2} a new dual quaternion [real -> rotation, dual -> translation]\n */\nexport function create() {\n  let dq = new glMatrix.ARRAY_TYPE(8);\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    dq[0] = 0;\n    dq[1] = 0;\n    dq[2] = 0;\n    dq[4] = 0;\n    dq[5] = 0;\n    dq[6] = 0;\n    dq[7] = 0;\n  }\n  dq[3] = 1;\n  return dq;\n}\n\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {ReadonlyQuat2} a dual quaternion to clone\n * @returns {quat2} new dual quaternion\n * @function\n */\nexport function clone(a) {\n  let dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = a[0];\n  dq[1] = a[1];\n  dq[2] = a[2];\n  dq[3] = a[3];\n  dq[4] = a[4];\n  dq[5] = a[5];\n  dq[6] = a[6];\n  dq[7] = a[7];\n  return dq;\n}\n\n/**\n * Creates a new dual quat initialized with the given values\n *\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component\n * @param {Number} y2 Y component\n * @param {Number} z2 Z component\n * @param {Number} w2 W component\n * @returns {quat2} new dual quaternion\n * @function\n */\nexport function fromValues(x1, y1, z1, w1, x2, y2, z2, w2) {\n  let dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  dq[4] = x2;\n  dq[5] = y2;\n  dq[6] = z2;\n  dq[7] = w2;\n  return dq;\n}\n\n/**\n * Creates a new dual quat from the given values (quat and translation)\n *\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component (translation)\n * @param {Number} y2 Y component (translation)\n * @param {Number} z2 Z component (translation)\n * @returns {quat2} new dual quaternion\n * @function\n */\nexport function fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {\n  let dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  let ax = x2 * 0.5,\n    ay = y2 * 0.5,\n    az = z2 * 0.5;\n  dq[4] = ax * w1 + ay * z1 - az * y1;\n  dq[5] = ay * w1 + az * x1 - ax * z1;\n  dq[6] = az * w1 + ax * y1 - ay * x1;\n  dq[7] = -ax * x1 - ay * y1 - az * z1;\n  return dq;\n}\n\n/**\n * Creates a dual quat from a quaternion and a translation\n *\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\n * @param {ReadonlyQuat} q a normalized quaternion\n * @param {ReadonlyVec3} t translation vector\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\nexport function fromRotationTranslation(out, q, t) {\n  let ax = t[0] * 0.5,\n    ay = t[1] * 0.5,\n    az = t[2] * 0.5,\n    bx = q[0],\n    by = q[1],\n    bz = q[2],\n    bw = q[3];\n  out[0] = bx;\n  out[1] = by;\n  out[2] = bz;\n  out[3] = bw;\n  out[4] = ax * bw + ay * bz - az * by;\n  out[5] = ay * bw + az * bx - ax * bz;\n  out[6] = az * bw + ax * by - ay * bx;\n  out[7] = -ax * bx - ay * by - az * bz;\n  return out;\n}\n\n/**\n * Creates a dual quat from a translation\n *\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\n * @param {ReadonlyVec3} t translation vector\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\nexport function fromTranslation(out, t) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = t[0] * 0.5;\n  out[5] = t[1] * 0.5;\n  out[6] = t[2] * 0.5;\n  out[7] = 0;\n  return out;\n}\n\n/**\n * Creates a dual quat from a quaternion\n *\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\n * @param {ReadonlyQuat} q the quaternion\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\nexport function fromRotation(out, q) {\n  out[0] = q[0];\n  out[1] = q[1];\n  out[2] = q[2];\n  out[3] = q[3];\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n\n/**\n * Creates a new dual quat from a matrix (4x4)\n *\n * @param {quat2} out the dual quaternion\n * @param {ReadonlyMat4} a the matrix\n * @returns {quat2} dual quat receiving operation result\n * @function\n */\nexport function fromMat4(out, a) {\n  //TODO Optimize this\n  let outer = quat.create();\n  mat4.getRotation(outer, a);\n  let t = new glMatrix.ARRAY_TYPE(3);\n  mat4.getTranslation(t, a);\n  fromRotationTranslation(out, outer, t);\n  return out;\n}\n\n/**\n * Copy the values from one dual quat to another\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the source dual quaternion\n * @returns {quat2} out\n * @function\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  return out;\n}\n\n/**\n * Set a dual quat to the identity dual quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @returns {quat2} out\n */\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n\n/**\n * Set the components of a dual quat to the given values\n *\n * @param {quat2} out the receiving quaternion\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component\n * @param {Number} y2 Y component\n * @param {Number} z2 Z component\n * @param {Number} w2 W component\n * @returns {quat2} out\n * @function\n */\nexport function set(out, x1, y1, z1, w1, x2, y2, z2, w2) {\n  out[0] = x1;\n  out[1] = y1;\n  out[2] = z1;\n  out[3] = w1;\n\n  out[4] = x2;\n  out[5] = y2;\n  out[6] = z2;\n  out[7] = w2;\n  return out;\n}\n\n/**\n * Gets the real part of a dual quat\n * @param  {quat} out real part\n * @param  {ReadonlyQuat2} a Dual Quaternion\n * @return {quat} real part\n */\nexport const getReal = quat.copy;\n\n/**\n * Gets the dual part of a dual quat\n * @param  {quat} out dual part\n * @param  {ReadonlyQuat2} a Dual Quaternion\n * @return {quat} dual part\n */\nexport function getDual(out, a) {\n  out[0] = a[4];\n  out[1] = a[5];\n  out[2] = a[6];\n  out[3] = a[7];\n  return out;\n}\n\n/**\n * Set the real component of a dual quat to the given quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @param {ReadonlyQuat} q a quaternion representing the real part\n * @returns {quat2} out\n * @function\n */\nexport const setReal = quat.copy;\n\n/**\n * Set the dual component of a dual quat to the given quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @param {ReadonlyQuat} q a quaternion representing the dual part\n * @returns {quat2} out\n * @function\n */\nexport function setDual(out, q) {\n  out[4] = q[0];\n  out[5] = q[1];\n  out[6] = q[2];\n  out[7] = q[3];\n  return out;\n}\n\n/**\n * Gets the translation of a normalized dual quat\n * @param  {vec3} out translation\n * @param  {ReadonlyQuat2} a Dual Quaternion to be decomposed\n * @return {vec3} translation\n */\nexport function getTranslation(out, a) {\n  let ax = a[4],\n    ay = a[5],\n    az = a[6],\n    aw = a[7],\n    bx = -a[0],\n    by = -a[1],\n    bz = -a[2],\n    bw = a[3];\n  out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n  out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n  out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  return out;\n}\n\n/**\n * Translates a dual quat by the given vector\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {quat2} out\n */\nexport function translate(out, a, v) {\n  let ax1 = a[0],\n    ay1 = a[1],\n    az1 = a[2],\n    aw1 = a[3],\n    bx1 = v[0] * 0.5,\n    by1 = v[1] * 0.5,\n    bz1 = v[2] * 0.5,\n    ax2 = a[4],\n    ay2 = a[5],\n    az2 = a[6],\n    aw2 = a[7];\n  out[0] = ax1;\n  out[1] = ay1;\n  out[2] = az1;\n  out[3] = aw1;\n  out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;\n  out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;\n  out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;\n  out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;\n  return out;\n}\n\n/**\n * Rotates a dual quat around the X axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\nexport function rotateX(out, a, rad) {\n  let bx = -a[0],\n    by = -a[1],\n    bz = -a[2],\n    bw = a[3],\n    ax = a[4],\n    ay = a[5],\n    az = a[6],\n    aw = a[7],\n    ax1 = ax * bw + aw * bx + ay * bz - az * by,\n    ay1 = ay * bw + aw * by + az * bx - ax * bz,\n    az1 = az * bw + aw * bz + ax * by - ay * bx,\n    aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateX(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n\n/**\n * Rotates a dual quat around the Y axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\nexport function rotateY(out, a, rad) {\n  let bx = -a[0],\n    by = -a[1],\n    bz = -a[2],\n    bw = a[3],\n    ax = a[4],\n    ay = a[5],\n    az = a[6],\n    aw = a[7],\n    ax1 = ax * bw + aw * bx + ay * bz - az * by,\n    ay1 = ay * bw + aw * by + az * bx - ax * bz,\n    az1 = az * bw + aw * bz + ax * by - ay * bx,\n    aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateY(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n\n/**\n * Rotates a dual quat around the Z axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\nexport function rotateZ(out, a, rad) {\n  let bx = -a[0],\n    by = -a[1],\n    bz = -a[2],\n    bw = a[3],\n    ax = a[4],\n    ay = a[5],\n    az = a[6],\n    aw = a[7],\n    ax1 = ax * bw + aw * bx + ay * bz - az * by,\n    ay1 = ay * bw + aw * by + az * bx - ax * bz,\n    az1 = az * bw + aw * bz + ax * by - ay * bx,\n    aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateZ(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n\n/**\n * Rotates a dual quat by a given quaternion (a * q)\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @param {ReadonlyQuat} q quaternion to rotate by\n * @returns {quat2} out\n */\nexport function rotateByQuatAppend(out, a, q) {\n  let qx = q[0],\n    qy = q[1],\n    qz = q[2],\n    qw = q[3],\n    ax = a[0],\n    ay = a[1],\n    az = a[2],\n    aw = a[3];\n\n  out[0] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[1] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[2] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[3] = aw * qw - ax * qx - ay * qy - az * qz;\n  ax = a[4];\n  ay = a[5];\n  az = a[6];\n  aw = a[7];\n  out[4] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[5] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[6] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[7] = aw * qw - ax * qx - ay * qy - az * qz;\n  return out;\n}\n\n/**\n * Rotates a dual quat by a given quaternion (q * a)\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat} q quaternion to rotate by\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @returns {quat2} out\n */\nexport function rotateByQuatPrepend(out, q, a) {\n  let qx = q[0],\n    qy = q[1],\n    qz = q[2],\n    qw = q[3],\n    bx = a[0],\n    by = a[1],\n    bz = a[2],\n    bw = a[3];\n\n  out[0] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[1] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[2] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[3] = qw * bw - qx * bx - qy * by - qz * bz;\n  bx = a[4];\n  by = a[5];\n  bz = a[6];\n  bw = a[7];\n  out[4] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[5] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[6] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[7] = qw * bw - qx * bx - qy * by - qz * bz;\n  return out;\n}\n\n/**\n * Rotates a dual quat around a given axis. Does the normalisation automatically\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @param {Number} rad how far the rotation should be\n * @returns {quat2} out\n */\nexport function rotateAroundAxis(out, a, axis, rad) {\n  //Special case for rad = 0\n  if (Math.abs(rad) < glMatrix.EPSILON) {\n    return copy(out, a);\n  }\n  let axisLength = Math.sqrt(axis[0] * axis[0] + axis[1] * axis[1] + axis[2] * axis[2]);\n\n  rad = rad * 0.5;\n  let s = Math.sin(rad);\n  let bx = (s * axis[0]) / axisLength;\n  let by = (s * axis[1]) / axisLength;\n  let bz = (s * axis[2]) / axisLength;\n  let bw = Math.cos(rad);\n\n  let ax1 = a[0],\n    ay1 = a[1],\n    az1 = a[2],\n    aw1 = a[3];\n  out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n\n  let ax = a[4],\n    ay = a[5],\n    az = a[6],\n    aw = a[7];\n  out[4] = ax * bw + aw * bx + ay * bz - az * by;\n  out[5] = ay * bw + aw * by + az * bx - ax * bz;\n  out[6] = az * bw + aw * bz + ax * by - ay * bx;\n  out[7] = aw * bw - ax * bx - ay * by - az * bz;\n\n  return out;\n}\n\n/**\n * Adds two dual quat's\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the first operand\n * @param {ReadonlyQuat2} b the second operand\n * @returns {quat2} out\n * @function\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  return out;\n}\n\n/**\n * Multiplies two dual quat's\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the first operand\n * @param {ReadonlyQuat2} b the second operand\n * @returns {quat2} out\n */\nexport function multiply(out, a, b) {\n  let ax0 = a[0],\n    ay0 = a[1],\n    az0 = a[2],\n    aw0 = a[3],\n    bx1 = b[4],\n    by1 = b[5],\n    bz1 = b[6],\n    bw1 = b[7],\n    ax1 = a[4],\n    ay1 = a[5],\n    az1 = a[6],\n    aw1 = a[7],\n    bx0 = b[0],\n    by0 = b[1],\n    bz0 = b[2],\n    bw0 = b[3];\n  out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;\n  out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;\n  out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;\n  out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;\n  out[4] =\n    ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;\n  out[5] =\n    ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;\n  out[6] =\n    az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;\n  out[7] =\n    aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;\n  return out;\n}\n\n/**\n * Alias for {@link quat2.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Scales a dual quat by a scalar number\n *\n * @param {quat2} out the receiving dual quat\n * @param {ReadonlyQuat2} a the dual quat to scale\n * @param {Number} b amount to scale the dual quat by\n * @returns {quat2} out\n * @function\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  return out;\n}\n\n/**\n * Calculates the dot product of two dual quat's (The dot product of the real parts)\n *\n * @param {ReadonlyQuat2} a the first operand\n * @param {ReadonlyQuat2} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nexport const dot = quat.dot;\n\n/**\n * Performs a linear interpolation between two dual quats's\n * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when t = 0.5)\n *\n * @param {quat2} out the receiving dual quat\n * @param {ReadonlyQuat2} a the first operand\n * @param {ReadonlyQuat2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat2} out\n */\nexport function lerp(out, a, b, t) {\n  let mt = 1 - t;\n  if (dot(a, b) < 0) t = -t;\n\n  out[0] = a[0] * mt + b[0] * t;\n  out[1] = a[1] * mt + b[1] * t;\n  out[2] = a[2] * mt + b[2] * t;\n  out[3] = a[3] * mt + b[3] * t;\n  out[4] = a[4] * mt + b[4] * t;\n  out[5] = a[5] * mt + b[5] * t;\n  out[6] = a[6] * mt + b[6] * t;\n  out[7] = a[7] * mt + b[7] * t;\n\n  return out;\n}\n\n/**\n * Calculates the inverse of a dual quat. If they are normalized, conjugate is cheaper\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a dual quat to calculate inverse of\n * @returns {quat2} out\n */\nexport function invert(out, a) {\n  let sqlen = squaredLength(a);\n  out[0] = -a[0] / sqlen;\n  out[1] = -a[1] / sqlen;\n  out[2] = -a[2] / sqlen;\n  out[3] = a[3] / sqlen;\n  out[4] = -a[4] / sqlen;\n  out[5] = -a[5] / sqlen;\n  out[6] = -a[6] / sqlen;\n  out[7] = a[7] / sqlen;\n  return out;\n}\n\n/**\n * Calculates the conjugate of a dual quat\n * If the dual quaternion is normalized, this function is faster than quat2.inverse and produces the same result.\n *\n * @param {quat2} out the receiving quaternion\n * @param {ReadonlyQuat2} a quat to calculate conjugate of\n * @returns {quat2} out\n */\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  out[4] = -a[4];\n  out[5] = -a[5];\n  out[6] = -a[6];\n  out[7] = a[7];\n  return out;\n}\n\n/**\n * Calculates the length of a dual quat\n *\n * @param {ReadonlyQuat2} a dual quat to calculate length of\n * @returns {Number} length of a\n * @function\n */\nexport const length = quat.length;\n\n/**\n * Alias for {@link quat2.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Calculates the squared length of a dual quat\n *\n * @param {ReadonlyQuat2} a dual quat to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\nexport const squaredLength = quat.squaredLength;\n\n/**\n * Alias for {@link quat2.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Normalize a dual quat\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a dual quaternion to normalize\n * @returns {quat2} out\n * @function\n */\nexport function normalize(out, a) {\n  let magnitude = squaredLength(a);\n  if (magnitude > 0) {\n    magnitude = Math.sqrt(magnitude);\n\n    let a0 = a[0] / magnitude;\n    let a1 = a[1] / magnitude;\n    let a2 = a[2] / magnitude;\n    let a3 = a[3] / magnitude;\n\n    let b0 = a[4];\n    let b1 = a[5];\n    let b2 = a[6];\n    let b3 = a[7];\n\n    let a_dot_b = a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;\n\n    out[0] = a0;\n    out[1] = a1;\n    out[2] = a2;\n    out[3] = a3;\n\n    out[4] = (b0 - a0 * a_dot_b) / magnitude;\n    out[5] = (b1 - a1 * a_dot_b) / magnitude;\n    out[6] = (b2 - a2 * a_dot_b) / magnitude;\n    out[7] = (b3 - a3 * a_dot_b) / magnitude;\n  }\n  return out;\n}\n\n/**\n * Returns a string representation of a dual quaternion\n *\n * @param {ReadonlyQuat2} a dual quaternion to represent as a string\n * @returns {String} string representation of the dual quat\n */\nexport function str(a) {\n  return (\n    'quat2(' +\n    a[0] +\n    ', ' +\n    a[1] +\n    ', ' +\n    a[2] +\n    ', ' +\n    a[3] +\n    ', ' +\n    a[4] +\n    ', ' +\n    a[5] +\n    ', ' +\n    a[6] +\n    ', ' +\n    a[7] +\n    ')'\n  );\n}\n\n/**\n * Returns whether or not the dual quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyQuat2} a the first dual quaternion.\n * @param {ReadonlyQuat2} b the second dual quaternion.\n * @returns {Boolean} true if the dual quaternions are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return (\n    a[0] === b[0] &&\n    a[1] === b[1] &&\n    a[2] === b[2] &&\n    a[3] === b[3] &&\n    a[4] === b[4] &&\n    a[5] === b[5] &&\n    a[6] === b[6] &&\n    a[7] === b[7]\n  );\n}\n\n/**\n * Returns whether or not the dual quaternions have approximately the same elements in the same position.\n *\n * @param {ReadonlyQuat2} a the first dual quat.\n * @param {ReadonlyQuat2} b the second dual quat.\n * @returns {Boolean} true if the dual quats are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0],\n    a1 = a[1],\n    a2 = a[2],\n    a3 = a[3],\n    a4 = a[4],\n    a5 = a[5],\n    a6 = a[6],\n    a7 = a[7];\n  let b0 = b[0],\n    b1 = b[1],\n    b2 = b[2],\n    b3 = b[3],\n    b4 = b[4],\n    b5 = b[5],\n    b6 = b[6],\n    b7 = b[7];\n  return (\n    Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n    Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n    Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n    Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n    Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n    Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n    Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n    Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7))\n  );\n}\n"],"file":"quat2.js"}