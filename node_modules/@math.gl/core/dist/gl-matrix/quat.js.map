{"version":3,"sources":["../../src/gl-matrix/quat.ts"],"names":["glMatrix","mat3","vec3","vec4","create","out","ARRAY_TYPE","Float32Array","identity","setAxisAngle","axis","rad","s","Math","sin","cos","getAxisAngle","out_axis","q","acos","EPSILON","getAngle","a","b","dotproduct","dot","multiply","ax","ay","az","aw","bx","by","bz","bw","rotateX","rotateY","rotateZ","calculateW","x","y","z","sqrt","abs","exp","w","r","et","ln","t","atan2","log","pow","scale","slerp","cosom","omega","scale0","scale1","sinom","invert","a0","a1","a2","a3","invDot","conjugate","fromMat3","m","fTrace","fRoot","i","j","k","str","clone","fromValues","copy","set","add","mul","lerp","length","len","squaredLength","sqrLen","normalize","exactEquals","equals","rotationTo","tmpvec3","xUnitVec3","yUnitVec3","cross","PI","sqlerp","temp1","temp2","c","d","setAxes","matr","view","right","up"],"mappings":"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","sourcesContent":["// @eslint-disable\n// @ts-nocheck\n\nimport * as glMatrix from './common.js';\nimport * as mat3 from './mat3.js';\nimport * as vec3 from './vec3.js';\nimport * as vec4 from './vec4.js';\n\n// const glMatrix: {EPSILON = 0.000001};\n\n/**\n * Quaternion in the format XYZW\n * @module quat\n */\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\nexport function create() {\n  const out = new glMatrix.ARRAY_TYPE(4);\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyVec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  const s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\n * @param  {ReadonlyQuat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */\nexport function getAxisAngle(out_axis, q) {\n  const rad = Math.acos(q[3]) * 2.0;\n  const s = Math.sin(rad / 2.0);\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n  return rad;\n}\n\n/**\n * Gets the angular distance between two unit quaternions\n *\n * @param  {ReadonlyQuat} a     Origin unit quaternion\n * @param  {ReadonlyQuat} b     Destination unit quaternion\n * @return {Number}     Angle, in radians, between the two quaternions\n */\nexport function getAngle(a, b) {\n  const dotproduct = dot(a, b);\n\n  return Math.acos(2 * dotproduct * dotproduct - 1);\n}\n\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n */\nexport function multiply(out, a, b) {\n  const ax = a[0];\n  const ay = a[1];\n  const az = a[2];\n  const aw = a[3];\n  const bx = b[0];\n  const by = b[1];\n  const bz = b[2];\n  const bw = b[3];\n\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n\n  const ax = a[0];\n  const ay = a[1];\n  const az = a[2];\n  const aw = a[3];\n  const bx = Math.sin(rad);\n  const bw = Math.cos(rad);\n\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n\n  const ax = a[0];\n  const ay = a[1];\n  const az = a[2];\n  const aw = a[3];\n  const by = Math.sin(rad);\n  const bw = Math.cos(rad);\n\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n\n  const ax = a[0];\n  const ay = a[1];\n  const az = a[2];\n  const aw = a[3];\n  const bz = Math.sin(rad);\n  const bw = Math.cos(rad);\n\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate W component of\n * @returns {quat} out\n */\nexport function calculateW(out, a) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n\n/**\n * Calculate the exponential of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\nexport function exp(out, a) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  const w = a[3];\n\n  const r = Math.sqrt(x * x + y * y + z * z);\n  const et = Math.exp(w);\n  const s = r > 0 ? (et * Math.sin(r)) / r : 0;\n\n  out[0] = x * s;\n  out[1] = y * s;\n  out[2] = z * s;\n  out[3] = et * Math.cos(r);\n\n  return out;\n}\n\n/**\n * Calculate the natural logarithm of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\nexport function ln(out, a) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  const w = a[3];\n\n  const r = Math.sqrt(x * x + y * y + z * z);\n  const t = r > 0 ? Math.atan2(r, w) / r : 0;\n\n  out[0] = x * t;\n  out[1] = y * t;\n  out[2] = z * t;\n  out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);\n\n  return out;\n}\n\n/**\n * Calculate the scalar power of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @param {Number} b amount to scale the quaternion by\n * @returns {quat} out\n */\nexport function pow(out, a, b) {\n  ln(out, a);\n  scale(out, out, b);\n  exp(out, out);\n  return out;\n}\n\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  const ax = a[0];\n  const ay = a[1];\n  const az = a[2];\n  const aw = a[3];\n  let bx = b[0];\n  let by = b[1];\n  let bz = b[2];\n  let bw = b[3];\n\n  let cosom;\n  let omega;\n  let scale0;\n  let scale1;\n  let sinom;\n\n  // calc cosine\n  cosom = ax * bx + ay * by + az * bz + aw * bw;\n  // adjust signs (if necessary)\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  }\n  // calculate coefficients\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  }\n  // calculate final values\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n\n  return out;\n}\n\n/**\n * Generates a random unit quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\n// export function random(out) {\n//   // Implementation of http://planning.cs.uiuc.edu/node198.html\n//   // TODO: Calling random 3 times is probably not the fastest solution\n//   let u1 = glMatrix.RANDOM();\n//   let u2 = glMatrix.RANDOM();\n//   let u3 = glMatrix.RANDOM();\n\n//   let sqrt1MinusU1 = Math.sqrt(1 - u1);\n//   let sqrtU1 = Math.sqrt(u1);\n\n//   out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n//   out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n//   out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n//   out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n//   return out;\n// }\n\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate inverse of\n * @returns {quat} out\n */\nexport function invert(out, a) {\n  const a0 = a[0];\n  const a1 = a[1];\n  const a2 = a[2];\n  const a3 = a[3];\n  const dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  const invDot = dot ? 1.0 / dot : 0;\n\n  // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate conjugate of\n * @returns {quat} out\n */\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyMat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  const fTrace = m[0] + m[4] + m[8];\n  let fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    let i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    const j = (i + 1) % 3;\n    const k = (i + 2) % 3;\n\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n\n/**\n * Creates a quaternion from the given euler angle x, y, z using the provided intrinsic order for the conversion.\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x Angle to rotate around X axis in degrees.\n * @param {Number} y Angle to rotate around Y axis in degrees.\n * @param {Number} z Angle to rotate around Z axis in degrees.\n * @param {'zyx'|'xyz'|'yxz'|'yzx'|'zxy'|'zyx'} order Intrinsic order for conversion, default is zyx.\n * @returns {quat} out\n * @function\n */\n// export function fromEuler(out, x, y, z, order = glMatrix.ANGLE_ORDER) {\n//   let halfToRad = Math.PI / 360;\n//   x *= halfToRad;\n//   z *= halfToRad;\n//   y *= halfToRad;\n\n//   let sx = Math.sin(x);\n//   let cx = Math.cos(x);\n//   let sy = Math.sin(y);\n//   let cy = Math.cos(y);\n//   let sz = Math.sin(z);\n//   let cz = Math.cos(z);\n\n//   switch (order) {\n//     case \"xyz\":\n//       out[0] = sx * cy * cz + cx * sy * sz;\n//       out[1] = cx * sy * cz - sx * cy * sz;\n//       out[2] = cx * cy * sz + sx * sy * cz;\n//       out[3] = cx * cy * cz - sx * sy * sz;\n//       break;\n\n//     case \"xzy\":\n//       out[0] = sx * cy * cz - cx * sy * sz;\n//       out[1] = cx * sy * cz - sx * cy * sz;\n//       out[2] = cx * cy * sz + sx * sy * cz;\n//       out[3] = cx * cy * cz + sx * sy * sz;\n//       break;\n\n//     case \"yxz\":\n//       out[0] = sx * cy * cz + cx * sy * sz;\n//       out[1] = cx * sy * cz - sx * cy * sz;\n//       out[2] = cx * cy * sz - sx * sy * cz;\n//       out[3] = cx * cy * cz + sx * sy * sz;\n//       break;\n\n//     case \"yzx\":\n//       out[0] = sx * cy * cz + cx * sy * sz;\n//       out[1] = cx * sy * cz + sx * cy * sz;\n//       out[2] = cx * cy * sz - sx * sy * cz;\n//       out[3] = cx * cy * cz - sx * sy * sz;\n//       break;\n\n//     case \"zxy\":\n//       out[0] = sx * cy * cz - cx * sy * sz;\n//       out[1] = cx * sy * cz + sx * cy * sz;\n//       out[2] = cx * cy * sz + sx * sy * cz;\n//       out[3] = cx * cy * cz - sx * sy * sz;\n//       break;\n\n//     case \"zyx\":\n//       out[0] = sx * cy * cz - cx * sy * sz;\n//       out[1] = cx * sy * cz + sx * cy * sz;\n//       out[2] = cx * cy * sz - sx * sy * cz;\n//       out[3] = cx * cy * cz + sx * sy * sz;\n//       break;\n\n//     default:\n//       throw new Error('Unknown angle order ' + order);\n//   }\n\n//   return out;\n// }\n\n/**\n * Returns a string representation of a quaternion\n *\n * @param {ReadonlyQuat} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return `quat(${a[0]}, ${a[1]}, ${a[2]}, ${a[3]})`;\n}\n\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {ReadonlyQuat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\nexport const clone = vec4.clone;\n\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\nexport const fromValues = vec4.fromValues;\n\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the source quaternion\n * @returns {quat} out\n * @function\n */\nexport const copy = vec4.copy;\n\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\nexport const set = vec4.set;\n\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n * @function\n */\nexport const add = vec4.add;\n\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {ReadonlyQuat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\nexport const scale = vec4.scale;\n\n/**\n * Calculates the dot product of two quat's\n *\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nexport const dot = vec4.dot;\n\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n * @function\n */\nexport const lerp = vec4.lerp;\n\n/**\n * Calculates the length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport const length = vec4.length;\n\n/**\n * Alias for {@link quat.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Calculates the squared length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\nexport const squaredLength = vec4.squaredLength;\n\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\nexport const normalize = vec4.normalize;\n\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyQuat} a The first quaternion.\n * @param {ReadonlyQuat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport const exactEquals = vec4.exactEquals;\n\n/**\n * Returns whether or not the quaternions point approximately to the same direction.\n *\n * Both quaternions are assumed to be unit length.\n *\n * @param {ReadonlyQuat} a The first unit quaternion.\n * @param {ReadonlyQuat} b The second unit quaternion.\n * @returns {Boolean} True if the quaternions are equal, false otherwise.\n */\nexport function equals(a, b) {\n  return Math.abs(vec4.dot(a, b)) >= 1 - glMatrix.EPSILON;\n}\n\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {ReadonlyVec3} a the initial vector\n * @param {ReadonlyVec3} b the destination vector\n * @returns {quat} out\n */\nexport const rotationTo = (function () {\n  const tmpvec3 = vec3.create();\n  const xUnitVec3 = vec3.fromValues(1, 0, 0);\n  const yUnitVec3 = vec3.fromValues(0, 1, 0);\n\n  return function (out, a, b) {\n    const dot = vec3.dot(a, b);\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    }\n    vec3.cross(tmpvec3, a, b);\n    out[0] = tmpvec3[0];\n    out[1] = tmpvec3[1];\n    out[2] = tmpvec3[2];\n    out[3] = 1 + dot;\n    return normalize(out, out);\n  };\n})();\n\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {ReadonlyQuat} c the third operand\n * @param {ReadonlyQuat} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\nexport const sqlerp = (function () {\n  const temp1 = create();\n  const temp2 = create();\n\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n\n    return out;\n  };\n})();\n\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {ReadonlyVec3} view  the vector representing the viewing direction\n * @param {ReadonlyVec3} right the vector representing the local \"right\" direction\n * @param {ReadonlyVec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\nexport const setAxes = (function () {\n  const matr = mat3.create();\n\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n\n    return normalize(out, fromMat3(out, matr));\n  };\n})();\n"],"file":"quat.js"}