{"version":3,"sources":["../../src/gl-matrix/common.js"],"names":["EPSILON","ARRAY_TYPE","Float32Array","Array","RANDOM","Math","random","ANGLE_ORDER","round","a","floor","setMatrixArrayType","type","degree","PI","toRadian","equals","b","abs","max"],"mappings":"AASA,OAAO,MAAMA,OAAO,GAAG,QAAhB;AACP,OAAO,IAAIC,UAAU,GAAG,OAAOC,YAAP,KAAwB,WAAxB,GAAsCA,YAAtC,GAAqDC,KAAtE;AACP,OAAO,MAAMC,MAAM,GAAGC,IAAI,CAACC,MAApB;AACP,OAAO,MAAMC,WAAW,GAAG,KAApB;AAQP,OAAO,SAASC,KAAT,CAAeC,CAAf,EAAkB;AACvB,MAAIA,CAAC,IAAI,CAAT,EAAY,OAAOJ,IAAI,CAACG,KAAL,CAAWC,CAAX,CAAP;AAEZ,SAAOA,CAAC,GAAG,GAAJ,KAAY,CAAZ,GAAgBJ,IAAI,CAACK,KAAL,CAAWD,CAAX,CAAhB,GAAgCJ,IAAI,CAACG,KAAL,CAAWC,CAAX,CAAvC;AACD;AAOD,OAAO,SAASE,kBAAT,CAA4BC,IAA5B,EAAkC;AACvCX,EAAAA,UAAU,GAAGW,IAAb;AACD;AAED,MAAMC,MAAM,GAAGR,IAAI,CAACS,EAAL,GAAU,GAAzB;AAOA,OAAO,SAASC,QAAT,CAAkBN,CAAlB,EAAqB;AAC1B,SAAOA,CAAC,GAAGI,MAAX;AACD;AAWD,OAAO,SAASG,MAAT,CAAgBP,CAAhB,EAAmBQ,CAAnB,EAAsB;AAC3B,SAAOZ,IAAI,CAACa,GAAL,CAAST,CAAC,GAAGQ,CAAb,KAAmBjB,OAAO,GAAGK,IAAI,CAACc,GAAL,CAAS,GAAT,EAAcd,IAAI,CAACa,GAAL,CAAST,CAAT,CAAd,EAA2BJ,IAAI,CAACa,GAAL,CAASD,CAAT,CAA3B,CAApC;AACD","sourcesContent":["// @eslint-disable\n// @ts-nocheck\n\n/**\n * Common utilities\n * @module glMatrix\n */\n\n// Configuration Constants\nexport const EPSILON = 0.000001;\nexport let ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport const RANDOM = Math.random;\nexport const ANGLE_ORDER = 'zyx';\n\n/**\n * Symmetric round\n * see https://www.npmjs.com/package/round-half-up-symmetric#user-content-detailed-background\n *\n * @param {Number} a value to round\n */\nexport function round(a) {\n  if (a >= 0) return Math.round(a);\n\n  return a % 0.5 === 0 ? Math.floor(a) : Math.round(a);\n}\n\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\n\nconst degree = Math.PI / 180;\n\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\nexport function toRadian(a) {\n  return a * degree;\n}\n\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\n"],"file":"common.js"}