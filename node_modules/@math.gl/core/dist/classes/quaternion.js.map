{"version":3,"sources":["../../src/classes/quaternion.ts"],"names":["MathArray","checkNumber","checkVector","Vector4","fromMat3","quat_fromMat3","setAxisAngle","quat_setAxisAngle","identity","quat_identity","length","quat_length","squaredLength","quat_squaredLength","dot","quat_dot","rotationTo","quat_rotationTo","add","quat_add","calculateW","quat_calculateW","conjugate","quat_conjugate","invert","quat_invert","lerp","quat_lerp","multiply","quat_multiply","rotateX","quat_rotateX","rotateY","quat_rotateY","rotateZ","quat_rotateZ","scale","quat_scale","slerp","quat_slerp","transformQuat","vec4_transformQuat","IDENTITY_QUATERNION","Quaternion","constructor","x","y","z","w","Array","isArray","arguments","copy","set","array","check","fromObject","object","fromMatrix3","m","fromAxisRotation","axis","rad","ELEMENTS","value","len","lengthSquared","a","vectorA","vectorB","b","t","undefined","multiplyRight","multiplyLeft","normalize","l","arg0","arg1","arg2","start","target","ratio","transformVector4","vector","result","lengthSq","setFromAxisAngle","premultiply"],"mappings":"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","sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n// MIT License\nimport {NumericArray} from '@math.gl/types';\nimport {MathArray} from './base/math-array';\nimport {checkNumber, checkVector} from '../lib/validators';\nimport {Vector4} from './vector4';\n// @ts-ignore gl-matrix types...\nimport {\n  fromMat3 as quat_fromMat3,\n  setAxisAngle as quat_setAxisAngle,\n  identity as quat_identity,\n  length as quat_length,\n  squaredLength as quat_squaredLength,\n  dot as quat_dot,\n  // getAxisAngle as quat_getAxisAngle,\n  rotationTo as quat_rotationTo,\n  add as quat_add,\n  calculateW as quat_calculateW,\n  conjugate as quat_conjugate,\n  invert as quat_invert,\n  lerp as quat_lerp,\n  multiply as quat_multiply,\n  rotateX as quat_rotateX,\n  rotateY as quat_rotateY,\n  rotateZ as quat_rotateZ,\n  scale as quat_scale,\n  slerp as quat_slerp\n} from '../gl-matrix/quat';\n// @ts-ignore gl-matrix types...\nimport {transformQuat as vec4_transformQuat} from '../gl-matrix/vec4';\n\nconst IDENTITY_QUATERNION = [0, 0, 0, 1] as const;\n\nexport class Quaternion extends MathArray {\n  constructor(x: number | Readonly<NumericArray> = 0, y = 0, z = 0, w = 1) {\n    // PERF NOTE: initialize elements as double precision numbers\n    super(-0, -0, -0, -0);\n    // eslint-disable-next-line prefer-rest-params\n    if (Array.isArray(x) && arguments.length === 1) {\n      this.copy(x);\n    } else {\n      this.set(x as number, y, z, w);\n    }\n  }\n\n  copy(array: Readonly<NumericArray>): this {\n    this[0] = array[0];\n    this[1] = array[1];\n    this[2] = array[2];\n    this[3] = array[3];\n    return this.check();\n  }\n\n  set(x: number, y: number, z: number, w: number): this {\n    this[0] = x;\n    this[1] = y;\n    this[2] = z;\n    this[3] = w;\n    return this.check();\n  }\n\n  fromObject(object: {x: number; y: number; z: number; w: number}): this {\n    this[0] = object.x;\n    this[1] = object.y;\n    this[2] = object.z;\n    this[3] = object.w;\n    return this.check();\n  }\n\n  /**\n   * Creates a quaternion from the given 3x3 rotation matrix.\n   * NOTE: The resultant quaternion is not normalized, so you should\n   * be sure to renormalize the quaternion yourself where necessary.\n   * @param m\n   * @returns\n   */\n  fromMatrix3(m: Readonly<NumericArray>): this {\n    quat_fromMat3(this, m);\n    return this.check();\n  }\n\n  fromAxisRotation(axis: Readonly<NumericArray>, rad: number): this {\n    quat_setAxisAngle(this, axis, rad);\n    return this.check();\n  }\n\n  /** Set a quat to the identity quaternion */\n  identity(): this {\n    quat_identity(this);\n    return this.check();\n  }\n\n  // Set the components of a quat to the given values\n  // set(i, j, k, l) {\n  //   quat_set(this, i, j, k, l);\n  //   return this.check();\n  // }\n\n  // Sets a quat from the given angle and rotation axis, then returns it.\n  setAxisAngle(axis: Readonly<NumericArray>, rad: number): this {\n    return this.fromAxisRotation(axis, rad);\n  }\n\n  // Getters/setters\n  get ELEMENTS(): number {\n    return 4;\n  }\n\n  get x(): number {\n    return this[0];\n  }\n  set x(value: number) {\n    this[0] = checkNumber(value);\n  }\n\n  get y(): number {\n    return this[1];\n  }\n  set y(value: number) {\n    this[1] = checkNumber(value);\n  }\n\n  get z(): number {\n    return this[2];\n  }\n  set z(value: number) {\n    this[2] = checkNumber(value);\n  }\n\n  get w(): number {\n    return this[3];\n  }\n  set w(value: number) {\n    this[3] = checkNumber(value);\n  }\n\n  // Calculates the length of a quat\n  len(): number {\n    return quat_length(this);\n  }\n\n  // Calculates the squared length of a quat\n  lengthSquared(): number {\n    return quat_squaredLength(this);\n  }\n\n  // Calculates the dot product of two quat's\n  // @return {Number}\n  dot(a: Readonly<NumericArray>): number {\n    return quat_dot(this, a);\n  }\n\n  // Gets the rotation axis and angle for a given quaternion.\n  // If a quaternion is created with setAxisAngle, this method will\n  // return the same values as providied in the original parameter\n  // list OR functionally equivalent values.\n  // Example: The quaternion formed by axis [0, 0, 1] and angle -90\n  // is the same as the quaternion formed by [0, 0, 1] and 270.\n  // This method favors the latter.\n  // @return {{[x,y,z], Number}}\n  // getAxisAngle() {\n  //   const axis = [];\n  // //   const angle = quat_getAxisAngle(axis, this);\n  //   return {axis, angle};\n  // }\n  // MODIFIERS\n  // Sets a quaternion to represent the shortest rotation from one vector\n  // to another. Both vectors are assumed to be unit length.\n  rotationTo(vectorA: NumericArray, vectorB: NumericArray): this {\n    quat_rotationTo(this, vectorA, vectorB);\n    return this.check();\n  }\n\n  // Sets the specified quaternion with values corresponding to the given axes.\n  // Each axis is a vec3 and is expected to be unit length and perpendicular\n  // to all other specified axes.\n  // setAxes() {\n  //   Number\n  // }\n  // Performs a spherical linear interpolation with two control points\n  // sqlerp() {\n  //   Number;\n  // }\n  // Adds two quat's\n  override add(a: Readonly<NumericArray>): this {\n    quat_add(this, this, a);\n    return this.check();\n  }\n\n  // Calculates the W component of a quat from the X, Y, and Z components.\n  // Any existing W component will be ignored.\n  calculateW(): this {\n    quat_calculateW(this, this);\n    return this.check();\n  }\n\n  // Calculates the conjugate of a quat If the quaternion is normalized,\n  // this function is faster than quat_invert and produces the same result.\n  conjugate(): this {\n    quat_conjugate(this, this);\n    return this.check();\n  }\n\n  // Calculates the inverse of a quat\n  invert(): this {\n    quat_invert(this, this);\n    return this.check();\n  }\n\n  // Performs a linear interpolation between two quat's\n  override lerp(a: Readonly<NumericArray>, b: Readonly<NumericArray> | number, t?: number): this {\n    if (t === undefined) {\n      return this.lerp(this, a, b as number);\n    }\n    quat_lerp(this, a, b as NumericArray, t);\n    return this.check();\n  }\n\n  // Multiplies two quat's\n  multiplyRight(a: Readonly<NumericArray>): this {\n    quat_multiply(this, this, a);\n    return this.check();\n  }\n\n  multiplyLeft(a: Readonly<NumericArray>): this {\n    quat_multiply(this, a, this);\n    return this.check();\n  }\n\n  // Normalize a quat\n  normalize(): this {\n    // Handle 0 case\n    const length = this.len();\n    const l = length > 0 ? 1 / length : 0;\n    this[0] = this[0] * l;\n    this[1] = this[1] * l;\n    this[2] = this[2] * l;\n    this[3] = this[3] * l;\n    // Set to [0, 0, 0, 1] if length is 0\n    if (length === 0) {\n      this[3] = 1;\n    }\n    return this.check();\n  }\n\n  // Rotates a quaternion by the given angle about the X axis\n  rotateX(rad: number): this {\n    quat_rotateX(this, this, rad);\n    return this.check();\n  }\n\n  // Rotates a quaternion by the given angle about the Y axis\n  rotateY(rad: number): this {\n    quat_rotateY(this, this, rad);\n    return this.check();\n  }\n\n  // Rotates a quaternion by the given angle about the Z axis\n  rotateZ(rad: number): this {\n    quat_rotateZ(this, this, rad);\n    return this.check();\n  }\n\n  // Scales a quat by a scalar number\n  override scale(b: number): this {\n    quat_scale(this, this, b);\n    return this.check();\n  }\n\n  slerp(target: Readonly<NumericArray>, ratio: number): this;\n  slerp(start: Readonly<NumericArray>, target: Readonly<NumericArray>, ratio: number): this;\n  slerp(params: {\n    start: Readonly<NumericArray>;\n    target: Readonly<NumericArray>;\n    ratio: number;\n  }): this;\n\n  // Performs a spherical linear interpolation between two quat\n  slerp(\n    arg0:\n      | Readonly<NumericArray>\n      | {\n          start: Readonly<NumericArray>;\n          target: Readonly<NumericArray>;\n          ratio: number;\n        },\n    arg1?: Readonly<NumericArray> | number,\n    arg2?: number\n  ): this {\n    let start: Readonly<NumericArray>;\n    let target: Readonly<NumericArray>;\n    let ratio: number;\n    // eslint-disable-next-line prefer-rest-params\n    switch (arguments.length) {\n      case 1: // Deprecated signature ({start, target, ratio})\n        // eslint-disable-next-line prefer-rest-params\n        ({\n          start = IDENTITY_QUATERNION,\n          target,\n          ratio\n        } = arg0 as {\n          start: Readonly<NumericArray>;\n          target: Readonly<NumericArray>;\n          ratio: number;\n        });\n        break;\n      case 2: // THREE.js compatibility signature (target, ration)\n        start = this; // eslint-disable-line\n        target = arg0 as Readonly<NumericArray>;\n        ratio = arg1 as number;\n        break;\n      default:\n        // Default signature: (start, target, ratio)\n        start = arg0 as Readonly<NumericArray>;\n        target = arg1 as Readonly<NumericArray>;\n        ratio = arg2;\n    }\n    quat_slerp(this, start, target, ratio);\n    return this.check();\n  }\n\n  transformVector4(\n    vector: Readonly<NumericArray>,\n    result: NumericArray = new Vector4()\n  ): NumericArray {\n    vec4_transformQuat(result, vector, this);\n    return checkVector(result, 4);\n  }\n\n  // THREE.js Math API compatibility\n  lengthSq(): number {\n    return this.lengthSquared();\n  }\n\n  setFromAxisAngle(axis: Readonly<NumericArray>, rad: number): this {\n    return this.setAxisAngle(axis, rad);\n  }\n\n  premultiply(a: Readonly<NumericArray>): this {\n    return this.multiplyLeft(a);\n  }\n\n  multiply(a: Readonly<NumericArray>): this {\n    return this.multiplyRight(a);\n  }\n}\n"],"file":"quaternion.js"}