{"version":3,"sources":["../../src/classes/matrix3.ts"],"names":["Matrix","checkVector","vec4_transformMat3","fromQuat","mat3_fromQuat","determinant","mat3_determinant","transpose","mat3_transpose","invert","mat3_invert","multiply","mat3_multiply","rotate","mat3_rotate","scale","mat3_scale","translate","mat3_translate","transformMat3","vec2_transformMat3","vec3_transformMat3","INDICES","IDENTITY_MATRIX","Object","freeze","Matrix3","IDENTITY","getIdentityMatrix","ZERO","getZeroMatrix","ELEMENTS","RANK","constructor","array","args","arguments","length","Array","isArray","copy","identity","check","fromObject","object","fromQuaternion","q","set","m00","m10","m20","m01","m11","m21","m02","m12","m22","setRowMajor","multiplyLeft","a","multiplyRight","radians","factor","vec","transform","vector","result","out","Error","transformVector","transformVector2","transformVector3","ZERO_MATRIX3","IDENTITY_MATRIX3"],"mappings":"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","sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n// MIT License\n\nimport {NumericArray} from '@math.gl/types';\nimport {Matrix} from './base/matrix';\nimport {checkVector} from '../lib/validators';\n\nimport {vec4_transformMat3} from '../lib/gl-matrix-extras';\n\nimport {\n  fromQuat as mat3_fromQuat,\n  determinant as mat3_determinant,\n  transpose as mat3_transpose,\n  invert as mat3_invert,\n  multiply as mat3_multiply,\n  rotate as mat3_rotate,\n  scale as mat3_scale,\n  translate as mat3_translate\n} from '../gl-matrix/mat3';\nimport {transformMat3 as vec2_transformMat3} from '../gl-matrix/vec2';\nimport {transformMat3 as vec3_transformMat3} from '../gl-matrix/vec3';\n\nenum INDICES {\n  COL0ROW0 = 0,\n  COL0ROW1 = 1,\n  COL0ROW2 = 2,\n  COL1ROW0 = 3,\n  COL1ROW1 = 4,\n  COL1ROW2 = 5,\n  COL2ROW0 = 6,\n  COL2ROW1 = 7,\n  COL2ROW2 = 8\n}\n\nconst IDENTITY_MATRIX = Object.freeze([1, 0, 0, 0, 1, 0, 0, 0, 1]);\n\nexport class Matrix3 extends Matrix {\n  static get IDENTITY(): Readonly<Matrix3> {\n    return getIdentityMatrix();\n  }\n\n  static get ZERO(): Readonly<Matrix3> {\n    return getZeroMatrix();\n  }\n\n  get ELEMENTS(): number {\n    return 9;\n  }\n\n  get RANK(): number {\n    return 3;\n  }\n\n  get INDICES(): typeof INDICES {\n    return INDICES;\n  }\n\n  constructor(array?: Readonly<NumericArray>);\n  /** @deprecated */\n  constructor(...args: number[]);\n\n  constructor(array?: number | Readonly<NumericArray>, ...args: number[]) {\n    // PERF NOTE: initialize elements as double precision numbers\n    super(-0, -0, -0, -0, -0, -0, -0, -0, -0);\n    if (arguments.length === 1 && Array.isArray(array)) {\n      this.copy(array);\n    } else if (args.length > 0) {\n      this.copy([array as number, ...args]);\n    } else {\n      this.identity();\n    }\n  }\n\n  copy(array: Readonly<NumericArray>): this {\n    // Element wise copy for performance\n    this[0] = array[0];\n    this[1] = array[1];\n    this[2] = array[2];\n    this[3] = array[3];\n    this[4] = array[4];\n    this[5] = array[5];\n    this[6] = array[6];\n    this[7] = array[7];\n    this[8] = array[8];\n    return this.check();\n  }\n\n  // Constructors\n\n  identity(): this {\n    return this.copy(IDENTITY_MATRIX);\n  }\n\n  /**\n   *\n   * @param object\n   * @returns self\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  fromObject(object: {[key: string]: any}): this {\n    return this.check();\n  }\n\n  /** Calculates a 3x3 matrix from the given quaternion\n   * q quat  Quaternion to create matrix from\n   */\n  fromQuaternion(q: Readonly<NumericArray>): this {\n    mat3_fromQuat(this, q);\n    return this.check();\n  }\n\n  /**\n   * accepts column major order, stores in column major order\n   */\n  // eslint-disable-next-line max-params\n  set(\n    m00: number,\n    m10: number,\n    m20: number,\n    m01: number,\n    m11: number,\n    m21: number,\n    m02: number,\n    m12: number,\n    m22: number\n  ): this {\n    this[0] = m00;\n    this[1] = m10;\n    this[2] = m20;\n    this[3] = m01;\n    this[4] = m11;\n    this[5] = m21;\n    this[6] = m02;\n    this[7] = m12;\n    this[8] = m22;\n    return this.check();\n  }\n\n  /**\n   * accepts row major order, stores as column major\n   */\n  // eslint-disable-next-line max-params\n  setRowMajor(\n    m00: number,\n    m01: number,\n    m02: number,\n    m10: number,\n    m11: number,\n    m12: number,\n    m20: number,\n    m21: number,\n    m22: number\n  ): this {\n    this[0] = m00;\n    this[1] = m10;\n    this[2] = m20;\n    this[3] = m01;\n    this[4] = m11;\n    this[5] = m21;\n    this[6] = m02;\n    this[7] = m12;\n    this[8] = m22;\n    return this.check();\n  }\n\n  // Accessors\n\n  determinant(): number {\n    return mat3_determinant(this);\n  }\n\n  // Modifiers\n  transpose(): this {\n    mat3_transpose(this, this);\n    return this.check();\n  }\n\n  /** Invert a matrix. Note that this can fail if the matrix is not invertible */\n  invert(): this {\n    mat3_invert(this, this);\n    return this.check();\n  }\n\n  // Operations\n  multiplyLeft(a: NumericArray): this {\n    mat3_multiply(this, a, this);\n    return this.check();\n  }\n\n  multiplyRight(a: NumericArray): this {\n    mat3_multiply(this, this, a);\n    return this.check();\n  }\n\n  rotate(radians: number): NumericArray {\n    mat3_rotate(this, this, radians);\n    return this.check();\n  }\n\n  override scale(factor: NumericArray | number): this {\n    if (Array.isArray(factor)) {\n      mat3_scale(this, this, factor);\n    } else {\n      mat3_scale(this, this, [factor as number, factor as number]);\n    }\n    return this.check();\n  }\n\n  translate(vec: NumericArray): this {\n    mat3_translate(this, this, vec);\n    return this.check();\n  }\n\n  // Transforms\n  transform(vector: Readonly<NumericArray>, result?: NumericArray): NumericArray {\n    let out: NumericArray;\n    switch (vector.length) {\n      case 2:\n        out = vec2_transformMat3(result || [-0, -0], vector, this) as NumericArray;\n        break;\n      case 3:\n        out = vec3_transformMat3(result || [-0, -0, -0], vector, this) as NumericArray;\n        break;\n      case 4:\n        out = vec4_transformMat3(result || [-0, -0, -0, -0], vector, this);\n        break;\n      default:\n        throw new Error('Illegal vector');\n    }\n    checkVector(out, vector.length);\n    return out;\n  }\n\n  /** @deprecated */\n  transformVector(vector: Readonly<NumericArray>, result?: NumericArray): NumericArray {\n    return this.transform(vector, result);\n  }\n\n  /** @deprecated */\n  transformVector2(vector: Readonly<NumericArray>, result?: NumericArray): NumericArray {\n    return this.transform(vector, result);\n  }\n\n  /** @deprecated */\n  transformVector3(vector: Readonly<NumericArray>, result?: NumericArray): NumericArray {\n    return this.transform(vector, result);\n  }\n}\n\nlet ZERO_MATRIX3: Matrix3 | null;\nlet IDENTITY_MATRIX3: Matrix3 | null = null;\n\nfunction getZeroMatrix(): Readonly<Matrix3> {\n  if (!ZERO_MATRIX3) {\n    ZERO_MATRIX3 = new Matrix3([0, 0, 0, 0, 0, 0, 0, 0, 0]);\n    Object.freeze(ZERO_MATRIX3);\n  }\n  return ZERO_MATRIX3;\n}\n\nfunction getIdentityMatrix(): Matrix3 {\n  if (!IDENTITY_MATRIX3) {\n    IDENTITY_MATRIX3 = new Matrix3();\n    Object.freeze(IDENTITY_MATRIX3);\n  }\n  return IDENTITY_MATRIX3;\n}\n"],"file":"matrix3.js"}