{
  "version": 3,
  "sources": ["../../@math.gl/core/src/lib/common.ts", "../../@math.gl/core/src/classes/base/math-array.ts", "../../@math.gl/core/src/lib/validators.ts", "../../@math.gl/core/src/lib/assert.ts", "../../@math.gl/core/src/classes/base/vector.ts", "../../@math.gl/core/src/gl-matrix/vec2.ts", "../../@math.gl/core/src/gl-matrix/common.js", "../../@math.gl/core/src/lib/gl-matrix-extras.ts", "../../@math.gl/core/src/classes/vector2.ts", "../../@math.gl/core/src/gl-matrix/vec3.ts", "../../@math.gl/core/src/classes/vector3.ts", "../../@math.gl/core/src/classes/vector4.ts", "../../@math.gl/core/src/classes/base/matrix.ts", "../../@math.gl/core/src/gl-matrix/mat3.ts", "../../@math.gl/core/src/classes/matrix3.ts", "../../@math.gl/core/src/gl-matrix/mat4.ts", "../../@math.gl/core/src/gl-matrix/vec4.ts", "../../@math.gl/core/src/classes/matrix4.ts", "../../@math.gl/core/src/gl-matrix/quat.ts", "../../@math.gl/core/src/classes/quaternion.ts", "../../@babel/runtime/helpers/esm/typeof.js", "../../@babel/runtime/helpers/esm/toPrimitive.js", "../../@babel/runtime/helpers/esm/toPropertyKey.js", "../../@babel/runtime/helpers/esm/defineProperty.js", "../../@math.gl/core/src/classes/spherical-coordinates.ts", "../../@math.gl/core/src/classes/euler.ts", "../../@math.gl/core/src/classes/pose.ts", "../../@math.gl/core/src/lib/math-utils.ts"],
  "sourcesContent": ["// math.gl, MIT license\n\nimport type {NumericArray} from '@math.gl/types';\n\nimport type {MathArray} from '../classes/base/math-array';\n\nconst RADIANS_TO_DEGREES = (1 / Math.PI) * 180;\nconst DEGREES_TO_RADIANS = (1 / 180) * Math.PI;\n\nexport type ConfigurationOptions = {\n  EPSILON: number;\n  debug?: boolean;\n  precision: number;\n  printTypes?: boolean;\n  printDegrees?: boolean;\n  printRowMajor?: boolean;\n  _cartographicRadians?: boolean;\n};\n\nconst DEFAULT_CONFIG: Required<ConfigurationOptions> = {\n  EPSILON: 1e-12,\n  debug: false,\n  precision: 4,\n  printTypes: false,\n  printDegrees: false,\n  printRowMajor: true,\n  _cartographicRadians: false\n};\n\n// We use a global field to store the config\ndeclare global {\n  // eslint-disable-next-line no-var\n  var mathgl: {\n    config: Required<ConfigurationOptions>;\n  };\n}\n\n// Configuration is truly global as of v3.6 to ensure single config even if multiple copies of math.gl\n// Multiple copies of config can be quite tricky to debug...\nglobalThis.mathgl = globalThis.mathgl || {config: {...DEFAULT_CONFIG}};\n\nexport const config = globalThis.mathgl.config;\n\nexport function configure(options: Partial<ConfigurationOptions>): ConfigurationOptions {\n  // Only copy existing keys\n  Object.assign(config, options);\n  return config;\n}\n\n/**\n * Formats a value into a string\n * @param value\n * @param param1\n * @returns\n */\nexport function formatValue(\n  value: number,\n  {precision = config.precision}: {precision?: number} = {}\n): string {\n  value = round(value);\n  // get rid of trailing zeros\n  return `${parseFloat(value.toPrecision(precision))}`;\n}\n\n/**\n * Check if value is an \"array\"\n * Returns `true` if value is either an array or a typed array\n * Note: returns `false` for `ArrayBuffer` and `DataView` instances\n * @note isTypedArray and isNumericArray are often more useful in TypeScript\n */\nexport function isArray(value: unknown): boolean {\n  return Array.isArray(value) || (ArrayBuffer.isView(value) && !(value instanceof DataView));\n}\n\nexport function clone(array: NumericArray | MathArray): NumericArray {\n  return 'clone' in array ? array.clone() : array.slice();\n}\n\nexport function toRadians(degrees: number): number;\nexport function toRadians(degrees: NumericArray): NumericArray;\n\nexport function toRadians(degrees: number | NumericArray): number | NumericArray {\n  return radians(degrees as NumericArray);\n}\n\nexport function toDegrees(degrees: number): number;\nexport function toDegrees(degrees: NumericArray): NumericArray;\n\nexport function toDegrees(radians: number | NumericArray): number | NumericArray {\n  return degrees(radians as NumericArray);\n}\n\n// GLSL math function equivalents - Works on both single values and vectors\n\n/**\n * \"GLSL equivalent\" radians: Works on single values and vectors\n */\nexport function radians(degrees: number): number;\nexport function radians(degrees: NumericArray, result?: NumericArray): NumericArray;\n\nexport function radians(\n  degrees: number | NumericArray,\n  result?: NumericArray\n): number | NumericArray {\n  return map(degrees, (degrees) => degrees * DEGREES_TO_RADIANS, result);\n}\n\n/**\n * \"GLSL equivalent\" degrees: Works on single values and vectors\n */\nexport function degrees(radians: number): number;\nexport function degrees(radians: NumericArray, result?: NumericArray): NumericArray;\n\nexport function degrees(\n  radians: number | NumericArray,\n  result?: NumericArray\n): number | NumericArray {\n  return map(radians, (radians) => radians * RADIANS_TO_DEGREES, result);\n}\n\n/**\n * \"GLSL equivalent\" of `Math.sin`: Works on single values and vectors\n * @deprecated\n */\nexport function sin(radians: number | NumericArray, result?: NumericArray): number | NumericArray {\n  return map(radians, (angle) => Math.sin(angle), result);\n}\n\n/**\n * \"GLSL equivalent\" of `Math.cos`: Works on single values and vectors\n * @deprecated\n */\nexport function cos(radians: number | NumericArray, result?: NumericArray): number | NumericArray {\n  return map(radians, (angle) => Math.cos(angle), result);\n}\n\n/**\n * \"GLSL equivalent\" of `Math.tan`: Works on single values and vectors\n * @deprecated\n */\nexport function tan(radians: number | NumericArray, result?: NumericArray): number | NumericArray {\n  return map(radians, (angle) => Math.tan(angle), result);\n}\n\n/**\n * \"GLSL equivalent\" of `Math.asin`: Works on single values and vectors\n * @deprecated\n */\nexport function asin(radians: number | NumericArray, result?: NumericArray): number | NumericArray {\n  return map(radians, (angle) => Math.asin(angle), result);\n}\n\n/**\n * \"GLSL equivalent\" of `Math.acos`: Works on single values and vectors\n * @deprecated\n */\nexport function acos(radians: number | NumericArray, result?: NumericArray): number | NumericArray {\n  return map(radians, (angle) => Math.acos(angle), result);\n}\n\n/**\n * \"GLSL equivalent\" of `Math.atan`: Works on single values and vectors\n * @deprecated\n */\nexport function atan(radians: number | NumericArray, result?: NumericArray): number | NumericArray {\n  return map(radians, (angle) => Math.atan(angle), result);\n}\n\n/**\n * GLSL style value clamping: Works on single values and vectors\n */\nexport function clamp(value: number, min: number, max: number): number;\nexport function clamp(value: NumericArray, min: number, max: number): NumericArray;\n\nexport function clamp(\n  value: number | NumericArray,\n  min: number,\n  max: number\n): number | NumericArray {\n  return map(value, (value) => Math.max(min, Math.min(max, value)));\n}\n\n/**\n * Interpolate between two numbers or two arrays\n */\nexport function lerp(a: number, b: number, t: number): number;\nexport function lerp(a: NumericArray, b: NumericArray, t: number): NumericArray;\n\nexport function lerp(\n  a: number | NumericArray,\n  b: number | NumericArray,\n  t: number\n): number | NumericArray {\n  if (isArray(a)) {\n    return (a as NumericArray).map((ai: number, i: number) => lerp(ai, (b as NumericArray)[i], t));\n  }\n  return t * (b as number) + (1 - t) * (a as number);\n}\n\n/* eslint-disable */\n\n/**\n * Compares any two math objects, using `equals` method if available.\n * @param a\n * @param b\n * @param epsilon\n * @returns\n */\nexport function equals(a: any, b: any, epsilon?: number): boolean {\n  const oldEpsilon = config.EPSILON;\n  if (epsilon) {\n    config.EPSILON = epsilon;\n  }\n  try {\n    if (a === b) {\n      return true;\n    }\n    if (isArray(a) && isArray(b)) {\n      if (a.length !== b.length) {\n        return false;\n      }\n      for (let i = 0; i < a.length; ++i) {\n        // eslint-disable-next-line max-depth\n        if (!equals(a[i], b[i])) {\n          return false;\n        }\n      }\n      return true;\n    }\n    if (a && a.equals) {\n      return a.equals(b);\n    }\n    if (b && b.equals) {\n      return b.equals(a);\n    }\n    if (typeof a === 'number' && typeof b === 'number') {\n      return Math.abs(a - b) <= config.EPSILON * Math.max(1, Math.abs(a), Math.abs(b));\n    }\n    return false;\n  } finally {\n    config.EPSILON = oldEpsilon;\n  }\n}\n\nexport function exactEquals(a: any, b: any): boolean {\n  if (a === b) {\n    return true;\n  }\n  if (a && typeof a === 'object' && b && typeof b === 'object') {\n    if (a.constructor !== b.constructor) {\n      return false;\n    }\n    if (a.exactEquals) {\n      return a.exactEquals(b);\n    }\n  }\n  if (isArray(a) && isArray(b)) {\n    if (a.length !== b.length) {\n      return false;\n    }\n    for (let i = 0; i < a.length; ++i) {\n      if (!exactEquals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n}\n\n/* eslint-enable */\n\nexport function withEpsilon<T>(epsilon: number, func: () => T): T {\n  const oldPrecision = config.EPSILON;\n  config.EPSILON = epsilon;\n  let value: T;\n  try {\n    value = func();\n  } finally {\n    config.EPSILON = oldPrecision;\n  }\n  return value;\n}\n\n// HELPERS\n\nfunction round(value: number): number {\n  return Math.round(value / config.EPSILON) * config.EPSILON;\n}\n\n// If the array has a clone function, calls it, otherwise returns a copy\nfunction duplicateArray(array: NumericArray): NumericArray {\n  // @ts-expect-error We check for math.gl class methods\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n  return array.clone ? (array.clone() as NumericArray) : (new Array(array.length) as number[]);\n}\n\n// If the argument value is an array, applies the func element wise,\n// otherwise applies func to the argument value\nfunction map(\n  value: number | NumericArray,\n  func: (x: number, index?: number, result?: NumericArray) => number,\n  result?: NumericArray\n): number | NumericArray {\n  if (isArray(value)) {\n    const array = value as NumericArray;\n    result = result || duplicateArray(array);\n    for (let i = 0; i < result.length && i < array.length; ++i) {\n      const val = typeof value === 'number' ? value : value[i];\n      result[i] = func(val, i, result);\n    }\n    return result;\n  }\n  return func(value as number);\n}\n", "// math.gl, MIT License\nimport {NumericArray} from '@math.gl/types';\nimport {ConfigurationOptions, config, formatValue, equals, isArray} from '../../lib/common';\n\n/** Base class for vectors and matrices */\nexport abstract class MathArray extends Array<number> {\n  /** Number of elements (values) in this array */\n  abstract get ELEMENTS(): number;\n\n  abstract copy(vector: Readonly<NumericArray>): this;\n\n  abstract fromObject(object: Record<string, unknown>): this;\n\n  // Common methods\n\n  /**\n   * Clone the current object\n   * @returns a new copy of this object\n   */\n  clone(): this {\n    // @ts-expect-error TS2351: Cannot use 'new' with an expression whose type lacks a call or construct signature.\n    return new this.constructor().copy(this); // eslint-disable-line\n  }\n\n  fromArray(array: Readonly<NumericArray>, offset: number = 0): this {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = array[i + offset];\n    }\n    return this.check();\n  }\n\n  toArray<TypedArray>(targetArray: TypedArray, offset?: number): TypedArray;\n  toArray(targetArray?: number[], offset?: number): NumericArray;\n\n  toArray(targetArray: NumericArray = [], offset: number = 0): NumericArray {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      targetArray[offset + i] = this[i];\n    }\n    return targetArray;\n  }\n\n  toObject(targetObject: Record<string, unknown>): Record<string, unknown> {\n    return targetObject;\n  }\n\n  from(arrayOrObject: Readonly<NumericArray> | Record<string, unknown>): this {\n    return Array.isArray(arrayOrObject)\n      ? this.copy(arrayOrObject)\n      : // @ts-ignore\n        this.fromObject(arrayOrObject);\n  }\n\n  to<T extends NumericArray | Record<string, unknown>>(arrayOrObject: T): T {\n    // @ts-ignore\n    if (arrayOrObject === this) {\n      return this as T;\n    }\n    // @ts-expect-error TS2339: Property 'toObject' does not exist on type 'MathArray'.\n    return isArray(arrayOrObject) ? this.toArray(arrayOrObject) : this.toObject(arrayOrObject);\n  }\n\n  toTarget(target: this): this {\n    return target ? this.to(target) : this;\n  }\n\n  /** @deprecated */\n  toFloat32Array(): Float32Array {\n    return new Float32Array(this);\n  }\n\n  override toString(): string {\n    return this.formatString(config);\n  }\n\n  /** Formats string according to options */\n  formatString(opts: ConfigurationOptions): string {\n    let string = '';\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      string += (i > 0 ? ', ' : '') + formatValue(this[i], opts);\n    }\n    return `${opts.printTypes ? this.constructor.name : ''}[${string}]`;\n  }\n\n  equals(array: Readonly<NumericArray>): boolean {\n    if (!array || this.length !== array.length) {\n      return false;\n    }\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      if (!equals(this[i], array[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  exactEquals(array: Readonly<NumericArray>): boolean {\n    if (!array || this.length !== array.length) {\n      return false;\n    }\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      if (this[i] !== array[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  // Modifiers\n\n  /** Negates all values in this object */\n  negate(): this {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = -this[i];\n    }\n    return this.check();\n  }\n\n  /** Linearly interpolates between two values */\n  lerp(a: Readonly<NumericArray>, t: number): this;\n  lerp(a: Readonly<NumericArray>, b: Readonly<NumericArray>, t: number): this;\n\n  lerp(a: Readonly<NumericArray>, b: Readonly<NumericArray> | number, t?: number): this {\n    if (t === undefined) {\n      return this.lerp(this, a, b as number);\n    }\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      const ai = a[i];\n      const endValue = typeof b === 'number' ? b : b[i];\n      this[i] = ai + t * (endValue - ai);\n    }\n    return this.check();\n  }\n\n  /** Minimal */\n  min(vector: Readonly<NumericArray>): this {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = Math.min(vector[i], this[i]);\n    }\n    return this.check();\n  }\n\n  /** Maximal */\n  max(vector: Readonly<NumericArray>): this {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = Math.max(vector[i], this[i]);\n    }\n    return this.check();\n  }\n\n  clamp(minVector: Readonly<NumericArray>, maxVector: Readonly<NumericArray>): this {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = Math.min(Math.max(this[i], minVector[i]), maxVector[i]);\n    }\n    return this.check();\n  }\n\n  add(...vectors: Readonly<NumericArray>[]): this {\n    for (const vector of vectors) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] += vector[i];\n      }\n    }\n    return this.check();\n  }\n\n  subtract(...vectors: Readonly<NumericArray>[]): this {\n    for (const vector of vectors) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] -= vector[i];\n      }\n    }\n    return this.check();\n  }\n\n  scale(scale: number | Readonly<NumericArray>): this {\n    if (typeof scale === 'number') {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] *= scale;\n      }\n    } else {\n      for (let i = 0; i < this.ELEMENTS && i < scale.length; ++i) {\n        this[i] *= scale[i];\n      }\n    }\n    return this.check();\n  }\n\n  /**\n   * Multiplies all elements by `scale`\n   * Note: `Matrix4.multiplyByScalar` only scales its 3x3 \"minor\"\n   */\n  multiplyByScalar(scalar: number): this {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] *= scalar;\n    }\n    return this.check();\n  }\n\n  // Debug checks\n\n  /** Throws an error if array length is incorrect or contains illegal values */\n  check(): this {\n    if (config.debug && !this.validate()) {\n      throw new Error(`math.gl: ${this.constructor.name} some fields set to invalid numbers'`);\n    }\n    return this;\n  }\n\n  /** Returns false if the array length is incorrect or contains illegal values */\n  validate(): boolean {\n    let valid = this.length === this.ELEMENTS;\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      valid = valid && Number.isFinite(this[i]);\n    }\n    return valid;\n  }\n\n  // three.js compatibility\n\n  /** @deprecated */\n  sub(a: Readonly<NumericArray>): this {\n    return this.subtract(a);\n  }\n\n  /** @deprecated */\n  setScalar(a: number): this {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = a;\n    }\n    return this.check();\n  }\n\n  /** @deprecated */\n  addScalar(a: number): this {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] += a;\n    }\n    return this.check();\n  }\n\n  /** @deprecated */\n  subScalar(a: number): this {\n    return this.addScalar(-a);\n  }\n\n  /** @deprecated */\n  multiplyScalar(scalar: number): this {\n    // Multiplies all elements\n    // `Matrix4.scale` only scales its 3x3 \"minor\"\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] *= scalar;\n    }\n    return this.check();\n  }\n\n  /** @deprecated */\n  divideScalar(a: number): this {\n    return this.multiplyByScalar(1 / a);\n  }\n\n  /** @deprecated */\n  clampScalar(min: number, max: number): this {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = Math.min(Math.max(this[i], min), max);\n    }\n    return this.check();\n  }\n\n  /** @deprecated */\n  get elements(): NumericArray {\n    return this;\n  }\n}\n", "// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport {NumberArray} from '@math.gl/types';\nimport {config} from './common';\n\nexport function validateVector(v: NumberArray, length: number): boolean {\n  if (v.length !== length) {\n    return false;\n  }\n  // Could be arguments \"array\" (v.every not availasble)\n  for (let i = 0; i < v.length; ++i) {\n    if (!Number.isFinite(v[i])) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function checkNumber(value: unknown): number {\n  if (!Number.isFinite(value)) {\n    throw new Error(`Invalid number ${JSON.stringify(value)}`);\n  }\n  return value as number;\n}\n\nexport function checkVector<T extends NumberArray>(\n  v: T,\n  length: number,\n  callerName: string = ''\n): T {\n  if (config.debug && !validateVector(v, length)) {\n    throw new Error(`math.gl: ${callerName} some fields set to invalid numbers'`);\n  }\n  return v;\n}\n\nconst map: Record<string, boolean> = {};\n\nexport function deprecated(method: string, version: string): void {\n  if (!map[method]) {\n    map[method] = true;\n    // eslint-disable-next-line\n    console.warn(\n      `${method} has been removed in version ${version}, see upgrade guide for more information`\n    );\n  }\n}\n", "export function assert(condition: unknown, message?: string): void {\n  if (!condition) {\n    throw new Error(`math.gl assertion ${message}`);\n  }\n}\n", "// Copyright (c) 2017 Uber Technologies, Inc.\n// MIT License\nimport {NumericArray} from '@math.gl/types';\nimport {MathArray} from './math-array';\nimport {checkNumber} from '../../lib/validators';\nimport {assert} from '../../lib/assert';\n\n/** Base class for vectors with at least 2 elements */\nexport abstract class Vector extends MathArray {\n  // ACCESSORS\n\n  get x(): number {\n    return this[0];\n  }\n\n  set x(value: number) {\n    this[0] = checkNumber(value);\n  }\n\n  get y(): number {\n    return this[1];\n  }\n\n  set y(value: number) {\n    this[1] = checkNumber(value);\n  }\n\n  /**\n   * Returns the length of the vector from the origin to the point described by this vector\n   *\n   * @note `length` is a reserved word for Arrays, so `v.length()` will return number of elements\n   * Instead we provide `len` and `magnitude`\n   */\n  len(): number {\n    return Math.sqrt(this.lengthSquared());\n  }\n\n  /**\n   * Returns the length of the vector from the origin to the point described by this vector\n   */\n  magnitude(): number {\n    return this.len();\n  }\n\n  /**\n   * Returns the squared length of the vector from the origin to the point described by this vector\n   */\n  lengthSquared(): number {\n    let length = 0;\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      length += this[i] * this[i];\n    }\n    return length;\n  }\n\n  /**\n   * Returns the squared length of the vector from the origin to the point described by this vector\n   */\n  magnitudeSquared(): number {\n    return this.lengthSquared();\n  }\n\n  distance(mathArray: Readonly<NumericArray>): number {\n    return Math.sqrt(this.distanceSquared(mathArray));\n  }\n\n  distanceSquared(mathArray: Readonly<NumericArray>): number {\n    let length = 0;\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      const dist = this[i] - mathArray[i];\n      length += dist * dist;\n    }\n    return checkNumber(length);\n  }\n\n  dot(mathArray: Readonly<NumericArray>): number {\n    let product = 0;\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      product += this[i] * mathArray[i];\n    }\n    return checkNumber(product);\n  }\n\n  // MODIFIERS\n\n  normalize(): this {\n    const length = this.magnitude();\n    if (length !== 0) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] /= length;\n      }\n    }\n    return this.check();\n  }\n\n  multiply(...vectors: Readonly<NumericArray>[]): this {\n    for (const vector of vectors) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] *= vector[i];\n      }\n    }\n    return this.check();\n  }\n\n  divide(...vectors: Readonly<NumericArray>[]): this {\n    for (const vector of vectors) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] /= vector[i];\n      }\n    }\n    return this.check();\n  }\n\n  // THREE.js compatibility\n\n  lengthSq(): number {\n    return this.lengthSquared();\n  }\n  distanceTo(vector: Readonly<NumericArray>): number {\n    return this.distance(vector);\n  }\n  distanceToSquared(vector: Readonly<NumericArray>): number {\n    return this.distanceSquared(vector);\n  }\n\n  getComponent(i: number): number {\n    assert(i >= 0 && i < this.ELEMENTS, 'index is out of range');\n    return checkNumber(this[i]);\n  }\n\n  setComponent(i: number, value: number): this {\n    assert(i >= 0 && i < this.ELEMENTS, 'index is out of range');\n    this[i] = value;\n    return this.check();\n  }\n\n  addVectors(a: Readonly<NumericArray>, b: Readonly<NumericArray>): this {\n    return this.copy(a).add(b);\n  }\n\n  subVectors(a: Readonly<NumericArray>, b: Readonly<NumericArray>): this {\n    return this.copy(a).subtract(b);\n  }\n\n  multiplyVectors(a: Readonly<NumericArray>, b: Readonly<NumericArray>): this {\n    return this.copy(a).multiply(b);\n  }\n\n  addScaledVector(a: Readonly<NumericArray>, b: number): this {\n    // @ts-expect-error error TS2351: Cannot use 'new' with an expression whose type lacks a call or construct signature.\n    return this.add((new this.constructor(a) as this).multiplyScalar(b));\n  }\n}\n", "// @eslint-disable\n// @ts-nocheck\n\nimport type {NumericArray} from '@math.gl/types';\nimport * as glMatrix from './common.js';\n\n/**\n * 2 Dimensional Vector\n * @module vec2\n */\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {NumericArray} a new 2D vector\n */\nexport function create() {\n  const out = new glMatrix.ARRAY_TYPE(2);\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n  return out;\n}\n\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {Readonly<NumericArray>} a vector to clone\n * @returns {NumericArray} a new 2D vector\n */\nexport function clone(a) {\n  const out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {NumericArray} a new 2D vector\n */\nexport function fromValues(x, y) {\n  const out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n\n/**\n * Copy the values from one vec2 to another\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the source vector\n * @returns {NumericArray} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {NumericArray} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {NumericArray} out\n */\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n\n/**\n * Adds two vec2's\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the first operand\n * @param {Readonly<NumericArray>} b the second operand\n * @returns {NumericArray} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the first operand\n * @param {Readonly<NumericArray>} b the second operand\n * @returns {NumericArray} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n\n/**\n * Multiplies two vec2's\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the first operand\n * @param {Readonly<NumericArray>} b the second operand\n * @returns {NumericArray} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n\n/**\n * Divides two vec2's\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the first operand\n * @param {Readonly<NumericArray>} b the second operand\n * @returns {NumericArray} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec2\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a vector to ceil\n * @returns {NumericArray} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec2\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a vector to floor\n * @returns {NumericArray} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec2's\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the first operand\n * @param {Readonly<NumericArray>} b the second operand\n * @returns {NumericArray} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec2's\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the first operand\n * @param {Readonly<NumericArray>} b the second operand\n * @returns {NumericArray} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n\n/**\n * symmetric round the components of a vec2\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a vector to round\n * @returns {NumericArray} out\n */\nexport function round(out, a) {\n  out[0] = glMatrix.round(a[0]);\n  out[1] = glMatrix.round(a[1]);\n  return out;\n}\n\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {NumericArray} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the first operand\n * @param {Readonly<NumericArray>} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {NumericArray} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {Readonly<NumericArray>} a the first operand\n * @param {Readonly<NumericArray>} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  const x = b[0] - a[0];\n  const y = b[1] - a[1];\n  return Math.sqrt(x * x + y * y);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {Readonly<NumericArray>} a the first operand\n * @param {Readonly<NumericArray>} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  const x = b[0] - a[0];\n  const y = b[1] - a[1];\n  return x * x + y * y;\n}\n\n/**\n * Calculates the length of a vec2\n *\n * @param {Readonly<NumericArray>} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  const x = a[0];\n  const y = a[1];\n  return Math.sqrt(x * x + y * y);\n}\n\n/**\n * Calculates the squared length of a vec2\n *\n * @param {Readonly<NumericArray>} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n  const x = a[0];\n  const y = a[1];\n  return x * x + y * y;\n}\n\n/**\n * Negates the components of a vec2\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a vector to negate\n * @returns {NumericArray} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a vector to invert\n * @returns {NumericArray} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n\n/**\n * Normalize a vec2\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a vector to normalize\n * @returns {NumericArray} out\n */\nexport function normalize(out, a) {\n  const x = a[0];\n  const y = a[1];\n  let len = x * x + y * y;\n  if (len > 0) {\n    // TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {Readonly<NumericArray>} a the first operand\n * @param {Readonly<NumericArray>} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {Readonly<NumericArray>} a the first operand\n * @param {Readonly<NumericArray>} b the second operand\n * @returns {vec3} out\n */\nexport function cross(out, a, b) {\n  const z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the first operand\n * @param {Readonly<NumericArray>} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {NumericArray} out\n */\nexport function lerp(out, a, b, t) {\n  const ax = a[0];\n  const ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {NumericArray} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If omitted, a unit vector will be returned\n * @returns {NumericArray} out\n */\nexport function random(out, scale) {\n  scale = scale === undefined ? 1.0 : scale;\n  const r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the vector to transform\n * @param {ReadonlyMat2} m matrix to transform with\n * @returns {NumericArray} out\n */\nexport function transformMat2(out, a, m) {\n  const x = a[0];\n  const y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the vector to transform\n * @param {ReadonlyMat2d} m matrix to transform with\n * @returns {NumericArray} out\n */\nexport function transformMat2d(out, a, m) {\n  const x = a[0];\n  const y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the vector to transform\n * @param {ReadonlyMat3} m matrix to transform with\n * @returns {NumericArray} out\n */\nexport function transformMat3(out, a, m) {\n  const x = a[0];\n  const y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {NumericArray} out the receiving vector\n * @param {Readonly<NumericArray>} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {NumericArray} out\n */\nexport function transformMat4(out, a, m) {\n  const x = a[0];\n  const y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n\n/**\n * Rotate a 2D vector\n * @param {NumericArray} out The receiving vec2\n * @param {Readonly<NumericArray>} a The vec2 point to rotate\n * @param {Readonly<NumericArray>} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {NumericArray} out\n */\nexport function rotate(out, a, b, rad) {\n  // Translate point to the origin\n  const p0 = a[0] - b[0];\n  const p1 = a[1] - b[1];\n  const sinC = Math.sin(rad);\n  const cosC = Math.cos(rad);\n\n  // perform rotation and translate to correct position\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n\n  return out;\n}\n\n/**\n * Get the angle between two 2D vectors\n * @param {Readonly<NumericArray>} a The first operand\n * @param {Readonly<NumericArray>} b The second operand\n * @returns {Number} The angle in radians\n */\nexport function angle(a, b) {\n  const x1 = a[0];\n  const y1 = a[1];\n  const x2 = b[0];\n  const y2 = b[1];\n  // mag is the product of the magnitudes of a and b\n  const mag = Math.sqrt((x1 * x1 + y1 * y1) * (x2 * x2 + y2 * y2));\n  // mag &&.. short circuits if mag == 0\n  const cosine = mag && (x1 * x2 + y1 * y2) / mag;\n  // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n\n/**\n * Set the components of a vec2 to zero\n *\n * @param {NumericArray} out the receiving vector\n * @returns {NumericArray} out\n */\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {Readonly<NumericArray>} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return `vec2(${a[0]}, ${a[1]})`;\n}\n\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {Readonly<NumericArray>} a The first vector.\n * @param {Readonly<NumericArray>} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {Readonly<NumericArray>} a The first vector.\n * @param {Readonly<NumericArray>} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  const a0 = a[0];\n  const a1 = a[1];\n  const b0 = b[0];\n  const b1 = b[1];\n  return (\n    Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n    Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1))\n  );\n}\n\n/**\n * Alias for {@link vec2.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function () {\n  const vec = create();\n\n  return function (a, stride, offset, count, fn, arg) {\n    let i;\n    let l;\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n})();\n", "// @eslint-disable\n// @ts-nocheck\n\n/**\n * Common utilities\n * @module glMatrix\n */\n\n// Configuration Constants\nexport const EPSILON = 0.000001;\nexport let ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport const RANDOM = Math.random;\nexport const ANGLE_ORDER = 'zyx';\n\n/**\n * Symmetric round\n * see https://www.npmjs.com/package/round-half-up-symmetric#user-content-detailed-background\n *\n * @param {Number} a value to round\n */\nexport function round(a) {\n  if (a >= 0) return Math.round(a);\n\n  return a % 0.5 === 0 ? Math.floor(a) : Math.round(a);\n}\n\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\n\nconst degree = Math.PI / 180;\n\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\nexport function toRadian(a) {\n  return a * degree;\n}\n\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\n", "/* eslint-disable camelcase */\nimport {NumericArray} from '@math.gl/types';\n// vec2 additions\n\nexport function vec2_transformMat4AsVector<T extends NumericArray>(\n  out: T,\n  a: Readonly<NumericArray>,\n  m: Readonly<NumericArray>\n): T {\n  const x = a[0];\n  const y = a[1];\n  const w = m[3] * x + m[7] * y || 1.0;\n  out[0] = (m[0] * x + m[4] * y) / w;\n  out[1] = (m[1] * x + m[5] * y) / w;\n  return out;\n}\n\n// vec3 additions\n\n// Transform as vector, only uses 3x3 minor matrix\nexport function vec3_transformMat4AsVector<T extends NumericArray>(\n  out: T,\n  a: Readonly<NumericArray>,\n  m: Readonly<NumericArray>\n): T {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  const w = m[3] * x + m[7] * y + m[11] * z || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z) / w;\n  return out;\n}\n\nexport function vec3_transformMat2<T extends NumericArray>(\n  out: T,\n  a: Readonly<NumericArray>,\n  m: Readonly<NumericArray>\n): T {\n  const x = a[0];\n  const y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  out[2] = a[2];\n  return out;\n}\n\n// vec4 additions\n\nexport function vec4_transformMat2<T extends NumericArray>(\n  out: T,\n  a: Readonly<NumericArray>,\n  m: Readonly<NumericArray>\n): T {\n  const x = a[0];\n  const y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\nexport function vec4_transformMat3<T extends NumericArray>(\n  out: T,\n  a: Readonly<NumericArray>,\n  m: Readonly<NumericArray>\n): T {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  out[0] = m[0] * x + m[3] * y + m[6] * z;\n  out[1] = m[1] * x + m[4] * y + m[7] * z;\n  out[2] = m[2] * x + m[5] * y + m[8] * z;\n  out[3] = a[3];\n  return out;\n}\n", "// Copyright (c) 2017 Uber Technologies, Inc.\n// MIT License\nimport {Vector} from './base/vector';\nimport {config, isArray} from '../lib/common';\nimport {checkNumber} from '../lib/validators';\nimport {\n  transformMat4 as vec2_transformMat4,\n  transformMat3 as vec2_transformMat3,\n  transformMat2d as vec2_transformMat2d,\n  transformMat2 as vec2_transformMat2\n} from '../gl-matrix/vec2';\nimport {vec2_transformMat4AsVector} from '../lib/gl-matrix-extras';\nimport {NumericArray} from '@math.gl/types';\n\n/**\n * Two-element vector class.\n * Subclass of Array<number>\n */\nexport class Vector2 extends Vector {\n  // Creates a new, empty vec2\n  constructor(x: number | Readonly<NumericArray> = 0, y: number = 0) {\n    // PERF NOTE: initialize elements as double precision numbers\n    super(2); // -0, -0);\n    if (isArray(x) && arguments.length === 1) {\n      this.copy(x as Readonly<NumericArray>);\n    } else {\n      if (config.debug) {\n        checkNumber(x);\n        checkNumber(y);\n      }\n      this[0] = x as number;\n      this[1] = y;\n    }\n  }\n\n  set(x: number, y: number): this {\n    this[0] = x;\n    this[1] = y;\n    return this.check();\n  }\n\n  copy(array: Readonly<NumericArray>): this {\n    this[0] = array[0];\n    this[1] = array[1];\n    return this.check();\n  }\n\n  fromObject(object: {x: number; y: number}): this {\n    if (config.debug) {\n      checkNumber(object.x);\n      checkNumber(object.y);\n    }\n    this[0] = object.x;\n    this[1] = object.y;\n    return this.check();\n  }\n\n  override toObject(object: {x?: number; y?: number}): {x: number; y: number} {\n    object.x = this[0];\n    object.y = this[1];\n    return object as {x: number; y: number};\n  }\n\n  // Getters/setters\n\n  get ELEMENTS(): number {\n    return 2;\n  }\n\n  /**\n   * Returns angle from x axis\n   * @returns\n   */\n  horizontalAngle(): number {\n    return Math.atan2(this.y, this.x);\n  }\n\n  /**\n   * Returns angle from y axis\n   * @returns\n   */\n  verticalAngle(): number {\n    return Math.atan2(this.x, this.y);\n  }\n\n  // Transforms\n\n  /**\n   * Transforms as point\n   * @param matrix4\n   * @returns\n   */\n  transform(matrix4: Readonly<NumericArray>): this {\n    return this.transformAsPoint(matrix4);\n  }\n\n  /**\n   * transforms as point (4th component is implicitly 1)\n   * @param matrix4\n   * @returns\n   */\n  transformAsPoint(matrix4: Readonly<NumericArray>): this {\n    vec2_transformMat4(this, this, matrix4);\n    return this.check();\n  }\n\n  /**\n   * transforms as vector (4th component is implicitly 0, ignores translation. slightly faster)\n   * @param matrix4\n   * @returns\n   */\n  transformAsVector(matrix4: Readonly<NumericArray>): this {\n    vec2_transformMat4AsVector(this, this, matrix4);\n    return this.check();\n  }\n\n  transformByMatrix3(matrix3: Readonly<NumericArray>): this {\n    vec2_transformMat3(this, this, matrix3);\n    return this.check();\n  }\n\n  transformByMatrix2x3(matrix2x3: Readonly<NumericArray>): this {\n    vec2_transformMat2d(this, this, matrix2x3);\n    return this.check();\n  }\n\n  transformByMatrix2(matrix2: Readonly<NumericArray>): this {\n    vec2_transformMat2(this, this, matrix2);\n    return this.check();\n  }\n}\n", "// @eslint-disable\n// @ts-nocheck\n\nimport * as glMatrix from './common.js';\n\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\nexport function create() {\n  const out = new glMatrix.ARRAY_TYPE(3);\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n  return out;\n}\n\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\nexport function clone(a) {\n  const out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\nexport function fromValues(x, y, z) {\n  const out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n\n/**\n * symmetric round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\nexport function round(out, a) {\n  out[0] = glMatrix.round(a[0]);\n  out[1] = glMatrix.round(a[1]);\n  out[2] = glMatrix.round(a[2]);\n  return out;\n}\n\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  const x = b[0] - a[0];\n  const y = b[1] - a[1];\n  const z = b[2] - a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  const x = b[0] - a[0];\n  const y = b[1] - a[1];\n  const z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  return x * x + y * y + z * z;\n}\n\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\nexport function normalize(out, a) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  let len = x * x + y * y + z * z;\n  if (len > 0) {\n    // TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\nexport function cross(out, a, b) {\n  const ax = a[0];\n  const ay = a[1];\n  const az = a[2];\n  const bx = b[0];\n  const by = b[1];\n  const bz = b[2];\n\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function lerp(out, a, b, t) {\n  const ax = a[0];\n  const ay = a[1];\n  const az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n\n/**\n * Performs a spherical linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function slerp(out, a, b, t) {\n  const angle = Math.acos(Math.min(Math.max(dot(a, b), -1), 1));\n  const sinTotal = Math.sin(angle);\n\n  const ratioA = Math.sin((1 - t) * angle) / sinTotal;\n  const ratioB = Math.sin(t * angle) / sinTotal;\n  out[0] = ratioA * a[0] + ratioB * b[0];\n  out[1] = ratioA * a[1] + ratioB * b[1];\n  out[2] = ratioA * a[2] + ratioB * b[2];\n\n  return out;\n}\n\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function hermite(out, a, b, c, d, t) {\n  const factorTimes2 = t * t;\n  const factor1 = factorTimes2 * (2 * t - 3) + 1;\n  const factor2 = factorTimes2 * (t - 2) + t;\n  const factor3 = factorTimes2 * (t - 1);\n  const factor4 = factorTimes2 * (3 - 2 * t);\n\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n\n  return out;\n}\n\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function bezier(out, a, b, c, d, t) {\n  const inverseFactor = 1 - t;\n  const inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  const factorTimes2 = t * t;\n  const factor1 = inverseFactorTimesTwo * inverseFactor;\n  const factor2 = 3 * t * inverseFactorTimesTwo;\n  const factor3 = 3 * factorTimes2 * inverseFactor;\n  const factor4 = factorTimes2 * t;\n\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If omitted, a unit vector will be returned\n * @returns {vec3} out\n */\nexport function random(out, scale) {\n  scale = scale === undefined ? 1.0 : scale;\n\n  const r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  const z = glMatrix.RANDOM() * 2.0 - 1.0;\n  const zScale = Math.sqrt(1.0 - z * z) * scale;\n\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat4(out, a, m) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  let w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat3(out, a, m) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  const qx = q[0];\n  const qy = q[1];\n  const qz = q[2];\n  const qw = q[3];\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n  let uvx = qy * z - qz * y;\n  let uvy = qz * x - qx * z;\n  let uvz = qx * y - qy * x;\n  // var uuv = vec3.cross([], qvec, uv);\n  let uuvx = qy * uvz - qz * uvy;\n  let uuvy = qz * uvx - qx * uvz;\n  let uuvz = qx * uvy - qy * uvx;\n  // vec3.scale(uv, uv, 2 * w);\n  const w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2;\n  // vec3.scale(uuv, uuv, 2);\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2;\n  // return vec3.add(out, a, vec3.add(out, uv, uuv));\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\nexport function rotateX(out, a, b, rad) {\n  const p = [];\n  const r = [];\n  // Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  // perform rotation\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad);\n\n  // translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\nexport function rotateY(out, a, b, rad) {\n  const p = [];\n  const r = [];\n  // Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  // perform rotation\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad);\n\n  // translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\nexport function rotateZ(out, a, b, rad) {\n  const p = [];\n  const r = [];\n  // Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  // perform rotation\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2];\n\n  // translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\nexport function angle(a, b) {\n  const ax = a[0];\n  const ay = a[1];\n  const az = a[2];\n  const bx = b[0];\n  const by = b[1];\n  const bz = b[2];\n  const mag = Math.sqrt((ax * ax + ay * ay + az * az) * (bx * bx + by * by + bz * bz));\n  const cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return `vec3(${a[0]}, ${a[1]}, ${a[2]})`;\n}\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  const a0 = a[0];\n  const a1 = a[1];\n  const a2 = a[2];\n  const b0 = b[0];\n  const b1 = b[1];\n  const b2 = b[2];\n  return (\n    Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n    Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n    Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2))\n  );\n}\n\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec3.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function () {\n  const vec = create();\n\n  return function (a, stride, offset, count, fn, arg) {\n    let i;\n    let l;\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n})();\n", "// Copyright (c) 2017 Uber Technologies, Inc.\n// MIT License\nimport {NumericArray} from '@math.gl/types';\nimport {Vector} from './base/vector';\nimport {config, isArray} from '../lib/common';\nimport {checkNumber} from '../lib/validators';\n// @ts-ignore gl-matrix types\nimport {\n  angle as vec3_angle,\n  cross as vec3_cross,\n  rotateX as vec3_rotateX,\n  rotateY as vec3_rotateY,\n  rotateZ as vec3_rotateZ,\n  transformMat4 as vec3_transformMat4,\n  transformMat3 as vec3_transformMat3,\n  transformQuat as vec3_transformQuat\n} from '../gl-matrix/vec3';\n/* eslint-disable camelcase */\nimport {vec3_transformMat2, vec3_transformMat4AsVector} from '../lib/gl-matrix-extras';\n\nconst ORIGIN = [0, 0, 0];\n\nlet ZERO: Vector3;\n\n/**\n * Three-element vector class.\n * Subclass of Array<number>\n */\nexport class Vector3 extends Vector {\n  static get ZERO(): Vector3 {\n    if (!ZERO) {\n      ZERO = new Vector3(0, 0, 0);\n      Object.freeze(ZERO);\n    }\n    return ZERO;\n  }\n\n  /**\n   * @class\n   * @param x\n   * @param y\n   * @param z\n   */\n  constructor(x: number | Readonly<NumericArray> = 0, y: number = 0, z: number = 0) {\n    // PERF NOTE: initialize elements as double precision numbers\n    super(-0, -0, -0);\n    if (arguments.length === 1 && isArray(x)) {\n      this.copy(x as NumericArray);\n    } else {\n      // this.set(x, y, z);\n      if (config.debug) {\n        checkNumber(x);\n        checkNumber(y);\n        checkNumber(z);\n      }\n      // @ts-expect-error TS2412: Property '0' of type 'number | [number, number, number]' is not assignable to numeric index type 'number'\n      this[0] = x;\n      this[1] = y;\n      this[2] = z;\n    }\n  }\n\n  set(x: number, y: number, z: number): this {\n    this[0] = x;\n    this[1] = y;\n    this[2] = z;\n    return this.check();\n  }\n\n  copy(array: Readonly<NumericArray>): this {\n    this[0] = array[0];\n    this[1] = array[1];\n    this[2] = array[2];\n    return this.check();\n  }\n\n  fromObject(object: {x: number; y: number; z: number}): this {\n    if (config.debug) {\n      checkNumber(object.x);\n      checkNumber(object.y);\n      checkNumber(object.z);\n    }\n    this[0] = object.x;\n    this[1] = object.y;\n    this[2] = object.z;\n    return this.check();\n  }\n\n  override toObject(object: {x?: number; y?: number; z?: number}): {\n    x: number;\n    y: number;\n    z: number;\n  } {\n    object.x = this[0];\n    object.y = this[1];\n    object.z = this[2];\n    return object as {x: number; y: number; z: number};\n  }\n\n  // Getters/setters\n\n  get ELEMENTS(): number {\n    return 3;\n  }\n  get z(): number {\n    return this[2];\n  }\n  set z(value: number) {\n    this[2] = checkNumber(value);\n  }\n\n  // ACCESSORS\n\n  angle(vector: Readonly<NumericArray>): number {\n    return vec3_angle(this, vector);\n  }\n\n  // MODIFIERS\n\n  cross(vector: Readonly<NumericArray>): this {\n    vec3_cross(this, this, vector);\n    return this.check();\n  }\n\n  rotateX({radians, origin = ORIGIN}: {radians: number; origin?: Readonly<NumericArray>}): this {\n    vec3_rotateX(this, this, origin, radians);\n    return this.check();\n  }\n\n  rotateY({radians, origin = ORIGIN}: {radians: number; origin?: Readonly<NumericArray>}): this {\n    vec3_rotateY(this, this, origin, radians);\n    return this.check();\n  }\n\n  rotateZ({radians, origin = ORIGIN}: {radians: number; origin?: Readonly<NumericArray>}): this {\n    vec3_rotateZ(this, this, origin, radians);\n    return this.check();\n  }\n\n  // Transforms\n\n  // transforms as point (4th component is implicitly 1)\n  transform(matrix4: Readonly<NumericArray>): this {\n    return this.transformAsPoint(matrix4);\n  }\n\n  // transforms as point (4th component is implicitly 1)\n  transformAsPoint(matrix4: Readonly<NumericArray>): this {\n    vec3_transformMat4(this, this, matrix4);\n    return this.check();\n  }\n\n  // transforms as vector  (4th component is implicitly 0, ignores translation. slightly faster)\n  transformAsVector(matrix4: Readonly<NumericArray>): this {\n    vec3_transformMat4AsVector(this, this, matrix4);\n    return this.check();\n  }\n\n  transformByMatrix3(matrix3: Readonly<NumericArray>): this {\n    vec3_transformMat3(this, this, matrix3);\n    return this.check();\n  }\n\n  transformByMatrix2(matrix2: Readonly<NumericArray>): this {\n    vec3_transformMat2(this, this, matrix2);\n    return this.check();\n  }\n\n  transformByQuaternion(quaternion: Readonly<NumericArray>): this {\n    vec3_transformQuat(this, this, quaternion);\n    return this.check();\n  }\n}\n", "// Copyright (c) 2017 Uber Technologies, Inc.\n// MIT License\n\nimport {NumericArray} from '@math.gl/types';\n/* eslint-disable camelcase */\nimport {\n  transformMat4 as vec4_transformMat4,\n  transformQuat as vec4_transformQuat\n} from '../gl-matrix/vec3';\nimport {vec4_transformMat2, vec4_transformMat3} from '../lib/gl-matrix-extras';\n\nimport {Vector} from './base/vector';\nimport {config, isArray} from '../lib/common';\nimport {checkNumber} from '../lib/validators';\n\nimport type {Matrix4} from './matrix4';\n\nlet ZERO: Vector4;\n\n/**\n * Four-element vector class.\n * Subclass of Array<number>\n */\nexport class Vector4 extends Vector {\n  static get ZERO(): Vector4 {\n    if (!ZERO) {\n      ZERO = new Vector4(0, 0, 0, 0);\n      Object.freeze(ZERO);\n    }\n    return ZERO;\n  }\n\n  constructor(x: number | Readonly<NumericArray> = 0, y: number = 0, z: number = 0, w: number = 0) {\n    // PERF NOTE: initialize elements as double precision numbers\n    super(-0, -0, -0, -0);\n    if (isArray(x) && arguments.length === 1) {\n      this.copy(x as Readonly<NumericArray>);\n    } else {\n      // this.set(x, y, z, w);\n      if (config.debug) {\n        checkNumber(x);\n        checkNumber(y);\n        checkNumber(z);\n        checkNumber(w);\n      }\n      this[0] = x as number;\n      this[1] = y;\n      this[2] = z;\n      this[3] = w;\n    }\n  }\n\n  set(x: number, y: number, z: number, w: number): this {\n    this[0] = x;\n    this[1] = y;\n    this[2] = z;\n    this[3] = w;\n    return this.check();\n  }\n\n  copy(array: Readonly<NumericArray>): this {\n    this[0] = array[0];\n    this[1] = array[1];\n    this[2] = array[2];\n    this[3] = array[3];\n    return this.check();\n  }\n\n  fromObject(object: {x: number; y: number; z: number; w: number}): this {\n    if (config.debug) {\n      checkNumber(object.x);\n      checkNumber(object.y);\n      checkNumber(object.z);\n      checkNumber(object.w);\n    }\n    this[0] = object.x;\n    this[1] = object.y;\n    this[2] = object.z;\n    this[3] = object.w;\n    return this;\n  }\n\n  override toObject(object: {x?: number; y?: number; z?: number; w?: number}): {\n    x: number;\n    y: number;\n    z: number;\n    w: number;\n  } {\n    object.x = this[0];\n    object.y = this[1];\n    object.z = this[2];\n    object.w = this[3];\n    return object as {\n      x: number;\n      y: number;\n      z: number;\n      w: number;\n    };\n  }\n\n  // Getters/setters\n  /* eslint-disable no-multi-spaces, brace-style, no-return-assign */\n  get ELEMENTS(): number {\n    return 4;\n  }\n\n  get z(): number {\n    return this[2];\n  }\n  set z(value: number) {\n    this[2] = checkNumber(value);\n  }\n  get w(): number {\n    return this[3];\n  }\n  set w(value: number) {\n    this[3] = checkNumber(value);\n  }\n\n  transform(matrix4: Readonly<NumericArray>): this {\n    vec4_transformMat4(this, this, matrix4);\n    return this.check();\n  }\n\n  transformByMatrix3(matrix3: Readonly<NumericArray>): this {\n    vec4_transformMat3(this, this, matrix3);\n    return this.check();\n  }\n\n  transformByMatrix2(matrix2: Readonly<NumericArray>): this {\n    vec4_transformMat2(this, this, matrix2);\n    return this.check();\n  }\n\n  transformByQuaternion(quaternion: Readonly<NumericArray>): this {\n    vec4_transformQuat(this, this, quaternion);\n    return this.check();\n  }\n\n  // three.js compatibility\n  applyMatrix4(m: Matrix4): this {\n    m.transform(this, this);\n    return this;\n  }\n}\n", "// Copyright (c) 2017 Uber Technologies, Inc.\n// MIT License\nimport {NumericArray} from '@math.gl/types';\nimport {MathArray} from './math-array';\nimport {checkNumber} from '../../lib/validators';\nimport {config} from '../../lib/common';\n\n/** Base class for matrices */\nexport abstract class Matrix extends MathArray {\n  abstract get RANK(): number;\n\n  // fromObject(object) {\n  //   const array = object.elements;\n  //   return this.fromRowMajor(array);\n  // }\n  // toObject(object) {\n  //   const array = object.elements;\n  //   this.toRowMajor(array);\n  //   return object;\n  // }\n\n  // TODO better override formatString?\n  override toString(): string {\n    let string = '[';\n    if (config.printRowMajor) {\n      string += 'row-major:';\n      for (let row = 0; row < this.RANK; ++row) {\n        for (let col = 0; col < this.RANK; ++col) {\n          string += ` ${this[col * this.RANK + row]}`;\n        }\n      }\n    } else {\n      string += 'column-major:';\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        string += ` ${this[i]}`;\n      }\n    }\n    string += ']';\n    return string;\n  }\n\n  getElementIndex(row: number, col: number): number {\n    return col * this.RANK + row;\n  }\n\n  // By default assumes row major indices\n  getElement(row: number, col: number): number {\n    return this[col * this.RANK + row];\n  }\n\n  // By default assumes row major indices\n  setElement(row: number, col: number, value: number): this {\n    this[col * this.RANK + row] = checkNumber(value);\n    return this;\n  }\n  getColumn<NumArrayT>(columnIndex: number, result: NumArrayT): NumArrayT;\n  getColumn(columnIndex: number): number[];\n\n  getColumn(\n    columnIndex: number,\n    result: number[] = new Array<number>(this.RANK).fill(-0)\n  ): number[] {\n    const firstIndex = columnIndex * this.RANK;\n    for (let i = 0; i < this.RANK; ++i) {\n      result[i] = this[firstIndex + i];\n    }\n    return result;\n  }\n\n  setColumn(columnIndex: number, columnVector: Readonly<NumericArray>): this {\n    const firstIndex = columnIndex * this.RANK;\n    for (let i = 0; i < this.RANK; ++i) {\n      this[firstIndex + i] = columnVector[i];\n    }\n    return this;\n  }\n}\n", "import * as glMatrix from './common.js';\n\n/**\n * 3x3 Matrix\n * @module mat3\n */\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\nexport function create() {\n  const out = new glMatrix.ARRAY_TYPE(9);\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {ReadonlyMat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\nexport function clone(a) {\n  const out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  const out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    const a01 = a[1];\n    const a02 = a[2];\n    const a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\nexport function invert(out, a) {\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a10 = a[3];\n  const a11 = a[4];\n  const a12 = a[5];\n  const a20 = a[6];\n  const a21 = a[7];\n  const a22 = a[8];\n\n  const b01 = a22 * a11 - a12 * a21;\n  const b11 = -a22 * a10 + a12 * a20;\n  const b21 = a21 * a10 - a11 * a20;\n\n  // Calculate the determinant\n  let det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\nexport function adjoint(out, a) {\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a10 = a[3];\n  const a11 = a[4];\n  const a12 = a[5];\n  const a20 = a[6];\n  const a21 = a[7];\n  const a22 = a[8];\n\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat3\n *\n * @param {ReadonlyMat3} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a10 = a[3];\n  const a11 = a[4];\n  const a12 = a[5];\n  const a20 = a[6];\n  const a21 = a[7];\n  const a22 = a[8];\n\n  return (\n    a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20)\n  );\n}\n\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\nexport function multiply(out, a, b) {\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a10 = a[3];\n  const a11 = a[4];\n  const a12 = a[5];\n  const a20 = a[6];\n  const a21 = a[7];\n  const a22 = a[8];\n\n  const b00 = b[0];\n  const b01 = b[1];\n  const b02 = b[2];\n  const b10 = b[3];\n  const b11 = b[4];\n  const b12 = b[5];\n  const b20 = b[6];\n  const b21 = b[7];\n  const b22 = b[8];\n\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to translate\n * @param {ReadonlyVec2} v vector to translate by\n * @returns {mat3} out\n */\nexport function translate(out, a, v) {\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a10 = a[3];\n  const a11 = a[4];\n  const a12 = a[5];\n  const a20 = a[6];\n  const a21 = a[7];\n  const a22 = a[8];\n  const x = v[0];\n  const y = v[1];\n\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nexport function rotate(out, a, rad) {\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a10 = a[3];\n  const a11 = a[4];\n  const a12 = a[5];\n  const a20 = a[6];\n  const a21 = a[7];\n  const a22 = a[8];\n  const s = Math.sin(rad);\n  const c = Math.cos(rad);\n\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to scale\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\nexport function scale(out, a, v) {\n  const x = v[0];\n  const y = v[1];\n\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Translation vector\n * @returns {mat3} out\n */\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nexport function fromRotation(out, rad) {\n  const s = Math.sin(rad);\n  const c = Math.cos(rad);\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Scaling vector\n * @returns {mat3} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to copy\n * @returns {mat3} out\n **/\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Calculates a 3x3 matrix from the given quaternion\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat3} out\n */\nexport function fromQuat(out, q) {\n  const x = q[0];\n  const y = q[1];\n  const z = q[2];\n  const w = q[3];\n  const x2 = x + x;\n  const y2 = y + y;\n  const z2 = z + z;\n\n  const xx = x * x2;\n  const yx = y * x2;\n  const yy = y * y2;\n  const zx = z * x2;\n  const zy = z * y2;\n  const zz = z * z2;\n  const wx = w * x2;\n  const wy = w * y2;\n  const wz = w * z2;\n\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n\n  return out;\n}\n\n/**\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from\n *\n * @returns {mat3} out\n */\nexport function normalFromMat4(out, a) {\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a03 = a[3];\n  const a10 = a[4];\n  const a11 = a[5];\n  const a12 = a[6];\n  const a13 = a[7];\n  const a20 = a[8];\n  const a21 = a[9];\n  const a22 = a[10];\n  const a23 = a[11];\n  const a30 = a[12];\n  const a31 = a[13];\n  const a32 = a[14];\n  const a33 = a[15];\n\n  const b00 = a00 * a11 - a01 * a10;\n  const b01 = a00 * a12 - a02 * a10;\n  const b02 = a00 * a13 - a03 * a10;\n  const b03 = a01 * a12 - a02 * a11;\n  const b04 = a01 * a13 - a03 * a11;\n  const b05 = a02 * a13 - a03 * a12;\n  const b06 = a20 * a31 - a21 * a30;\n  const b07 = a20 * a32 - a22 * a30;\n  const b08 = a20 * a33 - a23 * a30;\n  const b09 = a21 * a32 - a22 * a31;\n  const b10 = a21 * a33 - a23 * a31;\n  const b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n\n  return out;\n}\n\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Returns a string representation of a mat3\n *\n * @param {ReadonlyMat3} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return `mat3(${a[0]}, ${a[1]}, ${a[2]}, ${a[3]}, ${a[4]}, ${a[5]}, ${a[6]}, ${a[7]}, ${a[8]})`;\n}\n\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return Math.sqrt(\n    a[0] * a[0] +\n      a[1] * a[1] +\n      a[2] * a[2] +\n      a[3] * a[3] +\n      a[4] * a[4] +\n      a[5] * a[5] +\n      a[6] * a[6] +\n      a[7] * a[7] +\n      a[8] * a[8]\n  );\n}\n\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return (\n    a[0] === b[0] &&\n    a[1] === b[1] &&\n    a[2] === b[2] &&\n    a[3] === b[3] &&\n    a[4] === b[4] &&\n    a[5] === b[5] &&\n    a[6] === b[6] &&\n    a[7] === b[7] &&\n    a[8] === b[8]\n  );\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  const a0 = a[0];\n  const a1 = a[1];\n  const a2 = a[2];\n  const a3 = a[3];\n  const a4 = a[4];\n  const a5 = a[5];\n  const a6 = a[6];\n  const a7 = a[7];\n  const a8 = a[8];\n  const b0 = b[0];\n  const b1 = b[1];\n  const b2 = b[2];\n  const b3 = b[3];\n  const b4 = b[4];\n  const b5 = b[5];\n  const b6 = b[6];\n  const b7 = b[7];\n  const b8 = b[8];\n  return (\n    Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n    Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n    Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n    Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n    Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n    Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n    Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n    Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n    Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8))\n  );\n}\n\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\nexport const sub = subtract;\n", "// Copyright (c) 2017 Uber Technologies, Inc.\n// MIT License\n\nimport {NumericArray} from '@math.gl/types';\nimport {Matrix} from './base/matrix';\nimport {checkVector} from '../lib/validators';\n\nimport {vec4_transformMat3} from '../lib/gl-matrix-extras';\n\nimport {\n  fromQuat as mat3_fromQuat,\n  determinant as mat3_determinant,\n  transpose as mat3_transpose,\n  invert as mat3_invert,\n  multiply as mat3_multiply,\n  rotate as mat3_rotate,\n  scale as mat3_scale,\n  translate as mat3_translate\n} from '../gl-matrix/mat3';\nimport {transformMat3 as vec2_transformMat3} from '../gl-matrix/vec2';\nimport {transformMat3 as vec3_transformMat3} from '../gl-matrix/vec3';\n\nenum INDICES {\n  COL0ROW0 = 0,\n  COL0ROW1 = 1,\n  COL0ROW2 = 2,\n  COL1ROW0 = 3,\n  COL1ROW1 = 4,\n  COL1ROW2 = 5,\n  COL2ROW0 = 6,\n  COL2ROW1 = 7,\n  COL2ROW2 = 8\n}\n\nconst IDENTITY_MATRIX = Object.freeze([1, 0, 0, 0, 1, 0, 0, 0, 1]);\n\nexport class Matrix3 extends Matrix {\n  static get IDENTITY(): Readonly<Matrix3> {\n    return getIdentityMatrix();\n  }\n\n  static get ZERO(): Readonly<Matrix3> {\n    return getZeroMatrix();\n  }\n\n  get ELEMENTS(): number {\n    return 9;\n  }\n\n  get RANK(): number {\n    return 3;\n  }\n\n  get INDICES(): typeof INDICES {\n    return INDICES;\n  }\n\n  constructor(array?: Readonly<NumericArray>);\n  /** @deprecated */\n  constructor(...args: number[]);\n\n  constructor(array?: number | Readonly<NumericArray>, ...args: number[]) {\n    // PERF NOTE: initialize elements as double precision numbers\n    super(-0, -0, -0, -0, -0, -0, -0, -0, -0);\n    if (arguments.length === 1 && Array.isArray(array)) {\n      this.copy(array);\n    } else if (args.length > 0) {\n      this.copy([array as number, ...args]);\n    } else {\n      this.identity();\n    }\n  }\n\n  copy(array: Readonly<NumericArray>): this {\n    // Element wise copy for performance\n    this[0] = array[0];\n    this[1] = array[1];\n    this[2] = array[2];\n    this[3] = array[3];\n    this[4] = array[4];\n    this[5] = array[5];\n    this[6] = array[6];\n    this[7] = array[7];\n    this[8] = array[8];\n    return this.check();\n  }\n\n  // Constructors\n\n  identity(): this {\n    return this.copy(IDENTITY_MATRIX);\n  }\n\n  /**\n   *\n   * @param object\n   * @returns self\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  fromObject(object: {[key: string]: any}): this {\n    return this.check();\n  }\n\n  /** Calculates a 3x3 matrix from the given quaternion\n   * q quat  Quaternion to create matrix from\n   */\n  fromQuaternion(q: Readonly<NumericArray>): this {\n    mat3_fromQuat(this, q);\n    return this.check();\n  }\n\n  /**\n   * accepts column major order, stores in column major order\n   */\n  // eslint-disable-next-line max-params\n  set(\n    m00: number,\n    m10: number,\n    m20: number,\n    m01: number,\n    m11: number,\n    m21: number,\n    m02: number,\n    m12: number,\n    m22: number\n  ): this {\n    this[0] = m00;\n    this[1] = m10;\n    this[2] = m20;\n    this[3] = m01;\n    this[4] = m11;\n    this[5] = m21;\n    this[6] = m02;\n    this[7] = m12;\n    this[8] = m22;\n    return this.check();\n  }\n\n  /**\n   * accepts row major order, stores as column major\n   */\n  // eslint-disable-next-line max-params\n  setRowMajor(\n    m00: number,\n    m01: number,\n    m02: number,\n    m10: number,\n    m11: number,\n    m12: number,\n    m20: number,\n    m21: number,\n    m22: number\n  ): this {\n    this[0] = m00;\n    this[1] = m10;\n    this[2] = m20;\n    this[3] = m01;\n    this[4] = m11;\n    this[5] = m21;\n    this[6] = m02;\n    this[7] = m12;\n    this[8] = m22;\n    return this.check();\n  }\n\n  // Accessors\n\n  determinant(): number {\n    return mat3_determinant(this);\n  }\n\n  // Modifiers\n  transpose(): this {\n    mat3_transpose(this, this);\n    return this.check();\n  }\n\n  /** Invert a matrix. Note that this can fail if the matrix is not invertible */\n  invert(): this {\n    mat3_invert(this, this);\n    return this.check();\n  }\n\n  // Operations\n  multiplyLeft(a: NumericArray): this {\n    mat3_multiply(this, a, this);\n    return this.check();\n  }\n\n  multiplyRight(a: NumericArray): this {\n    mat3_multiply(this, this, a);\n    return this.check();\n  }\n\n  rotate(radians: number): NumericArray {\n    mat3_rotate(this, this, radians);\n    return this.check();\n  }\n\n  override scale(factor: NumericArray | number): this {\n    if (Array.isArray(factor)) {\n      mat3_scale(this, this, factor);\n    } else {\n      mat3_scale(this, this, [factor as number, factor as number]);\n    }\n    return this.check();\n  }\n\n  translate(vec: NumericArray): this {\n    mat3_translate(this, this, vec);\n    return this.check();\n  }\n\n  // Transforms\n  transform(vector: Readonly<NumericArray>, result?: NumericArray): NumericArray {\n    let out: NumericArray;\n    switch (vector.length) {\n      case 2:\n        out = vec2_transformMat3(result || [-0, -0], vector, this) as NumericArray;\n        break;\n      case 3:\n        out = vec3_transformMat3(result || [-0, -0, -0], vector, this) as NumericArray;\n        break;\n      case 4:\n        out = vec4_transformMat3(result || [-0, -0, -0, -0], vector, this);\n        break;\n      default:\n        throw new Error('Illegal vector');\n    }\n    checkVector(out, vector.length);\n    return out;\n  }\n\n  /** @deprecated */\n  transformVector(vector: Readonly<NumericArray>, result?: NumericArray): NumericArray {\n    return this.transform(vector, result);\n  }\n\n  /** @deprecated */\n  transformVector2(vector: Readonly<NumericArray>, result?: NumericArray): NumericArray {\n    return this.transform(vector, result);\n  }\n\n  /** @deprecated */\n  transformVector3(vector: Readonly<NumericArray>, result?: NumericArray): NumericArray {\n    return this.transform(vector, result);\n  }\n}\n\nlet ZERO_MATRIX3: Matrix3 | null;\nlet IDENTITY_MATRIX3: Matrix3 | null = null;\n\nfunction getZeroMatrix(): Readonly<Matrix3> {\n  if (!ZERO_MATRIX3) {\n    ZERO_MATRIX3 = new Matrix3([0, 0, 0, 0, 0, 0, 0, 0, 0]);\n    Object.freeze(ZERO_MATRIX3);\n  }\n  return ZERO_MATRIX3;\n}\n\nfunction getIdentityMatrix(): Matrix3 {\n  if (!IDENTITY_MATRIX3) {\n    IDENTITY_MATRIX3 = new Matrix3();\n    Object.freeze(IDENTITY_MATRIX3);\n  }\n  return IDENTITY_MATRIX3;\n}\n", "// @eslint-disable\n// @ts-nocheck\n\nimport * as glMatrix from './common.js';\n\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns a new 4x4 matrix\n */\nexport function create() {\n  const out = new glMatrix.ARRAY_TYPE(16);\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\nexport function clone(a) {\n  const out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\nexport function fromValues(\n  m00,\n  m01,\n  m02,\n  m03,\n  m10,\n  m11,\n  m12,\n  m13,\n  m20,\n  m21,\n  m22,\n  m23,\n  m30,\n  m31,\n  m32,\n  m33\n) {\n  const out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\nexport function set(\n  out,\n  m00,\n  m01,\n  m02,\n  m03,\n  m10,\n  m11,\n  m12,\n  m13,\n  m20,\n  m21,\n  m22,\n  m23,\n  m30,\n  m31,\n  m32,\n  m33\n) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    const a01 = a[1];\n    const a02 = a[2];\n    const a03 = a[3];\n    const a12 = a[6];\n    const a13 = a[7];\n    const a23 = a[11];\n\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\nexport function invert(out, a) {\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a03 = a[3];\n  const a10 = a[4];\n  const a11 = a[5];\n  const a12 = a[6];\n  const a13 = a[7];\n  const a20 = a[8];\n  const a21 = a[9];\n  const a22 = a[10];\n  const a23 = a[11];\n  const a30 = a[12];\n  const a31 = a[13];\n  const a32 = a[14];\n  const a33 = a[15];\n\n  const b00 = a00 * a11 - a01 * a10;\n  const b01 = a00 * a12 - a02 * a10;\n  const b02 = a00 * a13 - a03 * a10;\n  const b03 = a01 * a12 - a02 * a11;\n  const b04 = a01 * a13 - a03 * a11;\n  const b05 = a02 * a13 - a03 * a12;\n  const b06 = a20 * a31 - a21 * a30;\n  const b07 = a20 * a32 - a22 * a30;\n  const b08 = a20 * a33 - a23 * a30;\n  const b09 = a21 * a32 - a22 * a31;\n  const b10 = a21 * a33 - a23 * a31;\n  const b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n  return out;\n}\n\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\nexport function adjoint(out, a) {\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a03 = a[3];\n  const a10 = a[4];\n  const a11 = a[5];\n  const a12 = a[6];\n  const a13 = a[7];\n  const a20 = a[8];\n  const a21 = a[9];\n  const a22 = a[10];\n  const a23 = a[11];\n  const a30 = a[12];\n  const a31 = a[13];\n  const a32 = a[14];\n  const a33 = a[15];\n\n  const b00 = a00 * a11 - a01 * a10;\n  const b01 = a00 * a12 - a02 * a10;\n  const b02 = a00 * a13 - a03 * a10;\n  const b03 = a01 * a12 - a02 * a11;\n  const b04 = a01 * a13 - a03 * a11;\n  const b05 = a02 * a13 - a03 * a12;\n  const b06 = a20 * a31 - a21 * a30;\n  const b07 = a20 * a32 - a22 * a30;\n  const b08 = a20 * a33 - a23 * a30;\n  const b09 = a21 * a32 - a22 * a31;\n  const b10 = a21 * a33 - a23 * a31;\n  const b11 = a22 * a33 - a23 * a32;\n\n  out[0] = a11 * b11 - a12 * b10 + a13 * b09;\n  out[1] = a02 * b10 - a01 * b11 - a03 * b09;\n  out[2] = a31 * b05 - a32 * b04 + a33 * b03;\n  out[3] = a22 * b04 - a21 * b05 - a23 * b03;\n  out[4] = a12 * b08 - a10 * b11 - a13 * b07;\n  out[5] = a00 * b11 - a02 * b08 + a03 * b07;\n  out[6] = a32 * b02 - a30 * b05 - a33 * b01;\n  out[7] = a20 * b05 - a22 * b02 + a23 * b01;\n  out[8] = a10 * b10 - a11 * b08 + a13 * b06;\n  out[9] = a01 * b08 - a00 * b10 - a03 * b06;\n  out[10] = a30 * b04 - a31 * b02 + a33 * b00;\n  out[11] = a21 * b02 - a20 * b04 - a23 * b00;\n  out[12] = a11 * b07 - a10 * b09 - a12 * b06;\n  out[13] = a00 * b09 - a01 * b07 + a02 * b06;\n  out[14] = a31 * b01 - a30 * b03 - a32 * b00;\n  out[15] = a20 * b03 - a21 * b01 + a22 * b00;\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a03 = a[3];\n  const a10 = a[4];\n  const a11 = a[5];\n  const a12 = a[6];\n  const a13 = a[7];\n  const a20 = a[8];\n  const a21 = a[9];\n  const a22 = a[10];\n  const a23 = a[11];\n  const a30 = a[12];\n  const a31 = a[13];\n  const a32 = a[14];\n  const a33 = a[15];\n\n  const b0 = a00 * a11 - a01 * a10;\n  const b1 = a00 * a12 - a02 * a10;\n  const b2 = a01 * a12 - a02 * a11;\n  const b3 = a20 * a31 - a21 * a30;\n  const b4 = a20 * a32 - a22 * a30;\n  const b5 = a21 * a32 - a22 * a31;\n  const b6 = a00 * b5 - a01 * b4 + a02 * b3;\n  const b7 = a10 * b5 - a11 * b4 + a12 * b3;\n  const b8 = a20 * b2 - a21 * b1 + a22 * b0;\n  const b9 = a30 * b2 - a31 * b1 + a32 * b0;\n\n  // Calculate the determinant\n  return a13 * b6 - a03 * b7 + a33 * b8 - a23 * b9;\n}\n\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\nexport function multiply(out, a, b) {\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a03 = a[3];\n  const a10 = a[4];\n  const a11 = a[5];\n  const a12 = a[6];\n  const a13 = a[7];\n  const a20 = a[8];\n  const a21 = a[9];\n  const a22 = a[10];\n  const a23 = a[11];\n  const a30 = a[12];\n  const a31 = a[13];\n  const a32 = a[14];\n  const a33 = a[15];\n\n  // Cache only the current line of the second matrix\n  let b0 = b[0];\n  let b1 = b[1];\n  let b2 = b[2];\n  let b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\nexport function translate(out, a, v) {\n  const x = v[0];\n  const y = v[1];\n  const z = v[2];\n  let a00;\n  let a01;\n  let a02;\n  let a03;\n  let a10;\n  let a11;\n  let a12;\n  let a13;\n  let a20;\n  let a21;\n  let a22;\n  let a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nexport function scale(out, a, v) {\n  const x = v[0];\n  const y = v[1];\n  const z = v[2];\n\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nexport function rotate(out, a, rad, axis) {\n  let x = axis[0];\n  let y = axis[1];\n  let z = axis[2];\n  let len = Math.sqrt(x * x + y * y + z * z);\n  let c;\n  let s;\n  let t;\n  let a00;\n  let a01;\n  let a02;\n  let a03;\n  let a10;\n  let a11;\n  let a12;\n  let a13;\n  let a20;\n  let a21;\n  let a22;\n  let a23;\n  let b00;\n  let b01;\n  let b02;\n  let b10;\n  let b11;\n  let b12;\n  let b20;\n  let b21;\n  let b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11];\n\n  // Construct the elements of the rotation matrix\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c;\n\n  // Perform rotation-specific matrix multiplication\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateX(out, a, rad) {\n  const s = Math.sin(rad);\n  const c = Math.cos(rad);\n  const a10 = a[4];\n  const a11 = a[5];\n  const a12 = a[6];\n  const a13 = a[7];\n  const a20 = a[8];\n  const a21 = a[9];\n  const a22 = a[10];\n  const a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateY(out, a, rad) {\n  const s = Math.sin(rad);\n  const c = Math.cos(rad);\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a03 = a[3];\n  const a20 = a[8];\n  const a21 = a[9];\n  const a22 = a[10];\n  const a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateZ(out, a, rad) {\n  const s = Math.sin(rad);\n  const c = Math.cos(rad);\n  const a00 = a[0];\n  const a01 = a[1];\n  const a02 = a[2];\n  const a03 = a[3];\n  const a10 = a[4];\n  const a11 = a[5];\n  const a12 = a[6];\n  const a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nexport function fromRotation(out, rad, axis) {\n  let x = axis[0];\n  let y = axis[1];\n  let z = axis[2];\n  let len = Math.sqrt(x * x + y * y + z * z);\n  let c;\n  let s;\n  let t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n\n  // Perform rotation-specific matrix multiplication\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromXRotation(out, rad) {\n  const s = Math.sin(rad);\n  const c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromYRotation(out, rad) {\n  const s = Math.sin(rad);\n  const c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromZRotation(out, rad) {\n  const s = Math.sin(rad);\n  const c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  const x = q[0];\n  const y = q[1];\n  const z = q[2];\n  const w = q[3];\n  const x2 = x + x;\n  const y2 = y + y;\n  const z2 = z + z;\n\n  const xx = x * x2;\n  const xy = x * y2;\n  const xz = x * z2;\n  const yy = y * y2;\n  const yz = y * z2;\n  const zz = z * z2;\n  const wx = w * x2;\n  const wy = w * y2;\n  const wz = w * z2;\n\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\nexport function fromQuat2(out, a) {\n  const translation = new glMatrix.ARRAY_TYPE(3);\n  const bx = -a[0];\n  const by = -a[1];\n  const bz = -a[2];\n  const bw = a[3];\n  const ax = a[4];\n  const ay = a[5];\n  const az = a[6];\n  const aw = a[7];\n\n  const magnitude = bx * bx + by * by + bz * bz + bw * bw;\n  // Only scale if it makes sense\n  if (magnitude > 0) {\n    translation[0] = ((ax * bw + aw * bx + ay * bz - az * by) * 2) / magnitude;\n    translation[1] = ((ay * bw + aw * by + az * bx - ax * bz) * 2) / magnitude;\n    translation[2] = ((az * bw + aw * bz + ax * by - ay * bx) * 2) / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n\n  return out;\n}\n\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getScaling(out, mat) {\n  const m11 = mat[0];\n  const m12 = mat[1];\n  const m13 = mat[2];\n  const m21 = mat[4];\n  const m22 = mat[5];\n  const m23 = mat[6];\n  const m31 = mat[8];\n  const m32 = mat[9];\n  const m33 = mat[10];\n\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n\n  return out;\n}\n\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\nexport function getRotation(out, mat) {\n  const scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n\n  const is1 = 1 / scaling[0];\n  const is2 = 1 / scaling[1];\n  const is3 = 1 / scaling[2];\n\n  const sm11 = mat[0] * is1;\n  const sm12 = mat[1] * is2;\n  const sm13 = mat[2] * is3;\n  const sm21 = mat[4] * is1;\n  const sm22 = mat[5] * is2;\n  const sm23 = mat[6] * is3;\n  const sm31 = mat[8] * is1;\n  const sm32 = mat[9] * is2;\n  const sm33 = mat[10] * is3;\n\n  const trace = sm11 + sm22 + sm33;\n  let S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n\n/**\n * Decomposes a transformation matrix into its rotation, translation\n * and scale components. Returns only the rotation component\n * @param  {quat} out_r Quaternion to receive the rotation component\n * @param  {vec3} out_t Vector to receive the translation vector\n * @param  {vec3} out_s Vector to receive the scaling factor\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @returns {quat} out_r\n */\nexport function decompose(out_r, out_t, out_s, mat) {\n  out_t[0] = mat[12];\n  out_t[1] = mat[13];\n  out_t[2] = mat[14];\n\n  const m11 = mat[0];\n  const m12 = mat[1];\n  const m13 = mat[2];\n  const m21 = mat[4];\n  const m22 = mat[5];\n  const m23 = mat[6];\n  const m31 = mat[8];\n  const m32 = mat[9];\n  const m33 = mat[10];\n\n  out_s[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n  out_s[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n  out_s[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n\n  const is1 = 1 / out_s[0];\n  const is2 = 1 / out_s[1];\n  const is3 = 1 / out_s[2];\n\n  const sm11 = m11 * is1;\n  const sm12 = m12 * is2;\n  const sm13 = m13 * is3;\n  const sm21 = m21 * is1;\n  const sm22 = m22 * is2;\n  const sm23 = m23 * is3;\n  const sm31 = m31 * is1;\n  const sm32 = m32 * is2;\n  const sm33 = m33 * is3;\n\n  const trace = sm11 + sm22 + sm33;\n  let S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out_r[3] = 0.25 * S;\n    out_r[0] = (sm23 - sm32) / S;\n    out_r[1] = (sm31 - sm13) / S;\n    out_r[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out_r[3] = (sm23 - sm32) / S;\n    out_r[0] = 0.25 * S;\n    out_r[1] = (sm12 + sm21) / S;\n    out_r[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out_r[3] = (sm31 - sm13) / S;\n    out_r[0] = (sm12 + sm21) / S;\n    out_r[1] = 0.25 * S;\n    out_r[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out_r[3] = (sm12 - sm21) / S;\n    out_r[0] = (sm31 + sm13) / S;\n    out_r[1] = (sm23 + sm32) / S;\n    out_r[2] = 0.25 * S;\n  }\n\n  return out_r;\n}\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  const x = q[0];\n  const y = q[1];\n  const z = q[2];\n  const w = q[3];\n  const x2 = x + x;\n  const y2 = y + y;\n  const z2 = z + z;\n\n  const xx = x * x2;\n  const xy = x * y2;\n  const xz = x * z2;\n  const yy = y * y2;\n  const yz = y * z2;\n  const zz = z * z2;\n  const wx = w * x2;\n  const wy = w * y2;\n  const wz = w * z2;\n  const sx = s[0];\n  const sy = s[1];\n  const sz = s[2];\n\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  const x = q[0];\n  const y = q[1];\n  const z = q[2];\n  const w = q[3];\n  const x2 = x + x;\n  const y2 = y + y;\n  const z2 = z + z;\n\n  const xx = x * x2;\n  const xy = x * y2;\n  const xz = x * z2;\n  const yy = y * y2;\n  const yz = y * z2;\n  const zz = z * z2;\n  const wx = w * x2;\n  const wy = w * y2;\n  const wz = w * z2;\n\n  const sx = s[0];\n  const sy = s[1];\n  const sz = s[2];\n\n  const ox = o[0];\n  const oy = o[1];\n  const oz = o[2];\n\n  const out0 = (1 - (yy + zz)) * sx;\n  const out1 = (xy + wz) * sx;\n  const out2 = (xz - wy) * sx;\n  const out4 = (xy - wz) * sy;\n  const out5 = (1 - (xx + zz)) * sy;\n  const out6 = (yz + wx) * sy;\n  const out8 = (xz + wy) * sz;\n  const out9 = (yz - wx) * sz;\n  const out10 = (1 - (xx + yy)) * sz;\n\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\nexport function fromQuat(out, q) {\n  const x = q[0];\n  const y = q[1];\n  const z = q[2];\n  const w = q[3];\n  const x2 = x + x;\n  const y2 = y + y;\n  const z2 = z + z;\n\n  const xx = x * x2;\n  const yx = y * x2;\n  const yy = y * y2;\n  const zx = z * x2;\n  const zy = z * y2;\n  const zz = z * z2;\n  const wx = w * x2;\n  const wy = w * y2;\n  const wz = w * z2;\n\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function frustum(out, left, right, bottom, top, near, far) {\n  const rl = 1 / (right - left);\n  const tb = 1 / (top - bottom);\n  const nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\nexport function perspectiveNO(out, fovy, aspect, near, far) {\n  const f = 1.0 / Math.tan(fovy / 2);\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n  if (far != null && far !== Infinity) {\n    const nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n  return out;\n}\n\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\nexport const perspective = perspectiveNO;\n\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\nexport function perspectiveZO(out, fovy, aspect, near, far) {\n  const f = 1.0 / Math.tan(fovy / 2);\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n  if (far != null && far !== Infinity) {\n    const nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n  return out;\n}\n\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  const upTan = Math.tan((fov.upDegrees * Math.PI) / 180.0);\n  const downTan = Math.tan((fov.downDegrees * Math.PI) / 180.0);\n  const leftTan = Math.tan((fov.leftDegrees * Math.PI) / 180.0);\n  const rightTan = Math.tan((fov.rightDegrees * Math.PI) / 180.0);\n  const xScale = 2.0 / (leftTan + rightTan);\n  const yScale = 2.0 / (upTan + downTan);\n\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = (far * near) / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function orthoNO(out, left, right, bottom, top, near, far) {\n  const lr = 1 / (left - right);\n  const bt = 1 / (bottom - top);\n  const nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\nexport const ortho = orthoNO;\n\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function orthoZO(out, left, right, bottom, top, near, far) {\n  const lr = 1 / (left - right);\n  const bt = 1 / (bottom - top);\n  const nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\nexport function lookAt(out, eye, center, up) {\n  let len;\n  let x0;\n  let x1;\n  let x2;\n  let y0;\n  let y1;\n  let y2;\n  let z0;\n  let z1;\n  let z2;\n  const eyex = eye[0];\n  const eyey = eye[1];\n  const eyez = eye[2];\n  const upx = up[0];\n  const upy = up[1];\n  const upz = up[2];\n  const centerx = center[0];\n  const centery = center[1];\n  const centerz = center[2];\n\n  if (\n    Math.abs(eyex - centerx) < glMatrix.EPSILON &&\n    Math.abs(eyey - centery) < glMatrix.EPSILON &&\n    Math.abs(eyez - centerz) < glMatrix.EPSILON\n  ) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\nexport function targetTo(out, eye, target, up) {\n  const eyex = eye[0];\n  const eyey = eye[1];\n  const eyez = eye[2];\n  const upx = up[0];\n  const upy = up[1];\n  const upz = up[2];\n\n  let z0 = eyex - target[0];\n  let z1 = eyey - target[1];\n  let z2 = eyez - target[2];\n\n  let len = z0 * z0 + z1 * z1 + z2 * z2;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  let x0 = upy * z2 - upz * z1;\n  let x1 = upz * z0 - upx * z2;\n  let x2 = upx * z1 - upy * z0;\n\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return `mat4(${a[0]}, ${a[1]}, ${a[2]}, ${a[3]}, ${a[4]}, ${a[5]}, ${a[6]}, ${a[7]}, ${a[8]}, ${a[9]}, ${a[10]}, ${a[11]}, ${a[12]}, ${a[13]}, ${a[14]}, ${a[15]})`;\n}\n\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return Math.sqrt(\n    a[0] * a[0] +\n      a[1] * a[1] +\n      a[2] * a[2] +\n      a[3] * a[3] +\n      a[4] * a[4] +\n      a[5] * a[5] +\n      a[6] * a[6] +\n      a[7] * a[7] +\n      a[8] * a[8] +\n      a[9] * a[9] +\n      a[10] * a[10] +\n      a[11] * a[11] +\n      a[12] * a[12] +\n      a[13] * a[13] +\n      a[14] * a[14] +\n      a[15] * a[15]\n  );\n}\n\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return (\n    a[0] === b[0] &&\n    a[1] === b[1] &&\n    a[2] === b[2] &&\n    a[3] === b[3] &&\n    a[4] === b[4] &&\n    a[5] === b[5] &&\n    a[6] === b[6] &&\n    a[7] === b[7] &&\n    a[8] === b[8] &&\n    a[9] === b[9] &&\n    a[10] === b[10] &&\n    a[11] === b[11] &&\n    a[12] === b[12] &&\n    a[13] === b[13] &&\n    a[14] === b[14] &&\n    a[15] === b[15]\n  );\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  const a0 = a[0];\n  const a1 = a[1];\n  const a2 = a[2];\n  const a3 = a[3];\n  const a4 = a[4];\n  const a5 = a[5];\n  const a6 = a[6];\n  const a7 = a[7];\n  const a8 = a[8];\n  const a9 = a[9];\n  const a10 = a[10];\n  const a11 = a[11];\n  const a12 = a[12];\n  const a13 = a[13];\n  const a14 = a[14];\n  const a15 = a[15];\n\n  const b0 = b[0];\n  const b1 = b[1];\n  const b2 = b[2];\n  const b3 = b[3];\n  const b4 = b[4];\n  const b5 = b[5];\n  const b6 = b[6];\n  const b7 = b[7];\n  const b8 = b[8];\n  const b9 = b[9];\n  const b10 = b[10];\n  const b11 = b[11];\n  const b12 = b[12];\n  const b13 = b[13];\n  const b14 = b[14];\n  const b15 = b[15];\n\n  return (\n    Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n    Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n    Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n    Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n    Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n    Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n    Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n    Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n    Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) &&\n    Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) &&\n    Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) &&\n    Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) &&\n    Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) &&\n    Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) &&\n    Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) &&\n    Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15))\n  );\n}\n\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\nexport const sub = subtract;\n", "// @eslint-disable\n// @ts-nocheck\n\nimport * as glMatrix from './common.js';\n\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\nexport function create() {\n  const out = new glMatrix.ARRAY_TYPE(4);\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n  return out;\n}\n\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {ReadonlyVec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\nexport function clone(a) {\n  const out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\nexport function fromValues(x, y, z, w) {\n  const out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the source vector\n * @returns {vec4} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to ceil\n * @returns {vec4} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to floor\n * @returns {vec4} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n\n/**\n * symmetric round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to round\n * @returns {vec4} out\n */\nexport function round(out, a) {\n  out[0] = glMatrix.round(a[0]);\n  out[1] = glMatrix.round(a[1]);\n  out[2] = glMatrix.round(a[2]);\n  out[3] = glMatrix.round(a[3]);\n  return out;\n}\n\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  const x = b[0] - a[0];\n  const y = b[1] - a[1];\n  const z = b[2] - a[2];\n  const w = b[3] - a[3];\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  const x = b[0] - a[0];\n  const y = b[1] - a[1];\n  const z = b[2] - a[2];\n  const w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n\n/**\n * Calculates the length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  const w = a[3];\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n\n/**\n * Calculates the squared length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  const w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to negate\n * @returns {vec4} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to invert\n * @returns {vec4} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to normalize\n * @returns {vec4} out\n */\nexport function normalize(out, a) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  const w = a[3];\n  let len = x * x + y * y + z * z + w * w;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n\n/**\n * Returns the cross-product of three vectors in a 4-dimensional space\n *\n * @param {ReadonlyVec4} result the receiving vector\n * @param {ReadonlyVec4} U the first vector\n * @param {ReadonlyVec4} V the second vector\n * @param {ReadonlyVec4} W the third vector\n * @returns {vec4} result\n */\nexport function cross(out, u, v, w) {\n  const A = v[0] * w[1] - v[1] * w[0];\n  const B = v[0] * w[2] - v[2] * w[0];\n  const C = v[0] * w[3] - v[3] * w[0];\n  const D = v[1] * w[2] - v[2] * w[1];\n  const E = v[1] * w[3] - v[3] * w[1];\n  const F = v[2] * w[3] - v[3] * w[2];\n  const G = u[0];\n  const H = u[1];\n  const I = u[2];\n  const J = u[3];\n\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n\n  return out;\n}\n\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\nexport function lerp(out, a, b, t) {\n  const ax = a[0];\n  const ay = a[1];\n  const az = a[2];\n  const aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If omitted, a unit vector will be returned\n * @returns {vec4} out\n */\nexport function random(out, scale) {\n  scale = scale === undefined ? 1.0 : scale;\n\n  // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n  let v1;\n  let v2;\n  let v3;\n  let v4;\n  let s1;\n  let s2;\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  const d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec4} out\n */\nexport function transformMat4(out, a, m) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  const w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec4} out\n */\nexport function transformQuat(out, a, q) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  const qx = q[0];\n  const qy = q[1];\n  const qz = q[2];\n  const qw = q[3];\n\n  // calculate quat * vec\n  const ix = qw * x + qy * z - qz * y;\n  const iy = qw * y + qz * x - qx * z;\n  const iz = qw * z + qx * y - qy * x;\n  const iw = -qx * x - qy * y - qz * z;\n\n  // calculate result * inverse quat\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Set the components of a vec4 to zero\n *\n * @param {vec4} out the receiving vector\n * @returns {vec4} out\n */\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return `vec4(${a[0]}, ${a[1]}, ${a[2]}, ${a[3]})`;\n}\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  const a0 = a[0];\n  const a1 = a[1];\n  const a2 = a[2];\n  const a3 = a[3];\n  const b0 = b[0];\n  const b1 = b[1];\n  const b2 = b[2];\n  const b3 = b[3];\n  return (\n    Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n    Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n    Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n    Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3))\n  );\n}\n\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec4.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function () {\n  const vec = create();\n\n  return function (a, stride, offset, count, fn, arg) {\n    let i;\n    let l;\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n})();\n", "// Copyright (c) 2017 Uber Technologies, Inc.\n// MIT License\n\nimport {NumericArray} from '@math.gl/types';\nimport {Matrix} from './base/matrix';\nimport {checkVector} from '../lib/validators';\n\n/* eslint-disable camelcase */\nimport {vec2_transformMat4AsVector, vec3_transformMat4AsVector} from '../lib/gl-matrix-extras';\n// @ts-ignore gl-matrix types...\nimport {\n  fromQuat as mat4_fromQuat,\n  frustum as mat4_frustum,\n  lookAt as mat4_lookAt,\n  ortho as mat4_ortho,\n  perspective as mat4_perspective,\n  determinant as mat4_determinant,\n  transpose as mat4_transpose,\n  invert as mat4_invert,\n  multiply as mat4_multiply,\n  rotateX as mat4_rotateX,\n  rotateY as mat4_rotateY,\n  rotateZ as mat4_rotateZ,\n  rotate as mat4_rotate,\n  scale as mat4_scale,\n  translate as mat4_translate\n} from '../gl-matrix/mat4';\nimport {transformMat4 as vec2_transformMat4} from '../gl-matrix/vec2';\nimport {transformMat4 as vec3_transformMat4} from '../gl-matrix/vec3';\nimport {transformMat4 as vec4_transformMat4} from '../gl-matrix/vec4';\n\nenum INDICES {\n  COL0ROW0 = 0,\n  COL0ROW1 = 1,\n  COL0ROW2 = 2,\n  COL0ROW3 = 3,\n  COL1ROW0 = 4,\n  COL1ROW1 = 5,\n  COL1ROW2 = 6,\n  COL1ROW3 = 7,\n  COL2ROW0 = 8,\n  COL2ROW1 = 9,\n  COL2ROW2 = 10,\n  COL2ROW3 = 11,\n  COL3ROW0 = 12,\n  COL3ROW1 = 13,\n  COL3ROW2 = 14,\n  COL3ROW3 = 15\n}\n\nconst DEFAULT_FOVY = (45 * Math.PI) / 180;\nconst DEFAULT_ASPECT = 1;\nconst DEFAULT_NEAR = 0.1;\nconst DEFAULT_FAR = 500;\n\nconst IDENTITY_MATRIX = Object.freeze([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);\n\n/** 4x4 matrix */\nexport class Matrix4 extends Matrix {\n  static get IDENTITY(): Readonly<Matrix4> {\n    return getIdentityMatrix();\n  }\n\n  static get ZERO(): Readonly<Matrix4> {\n    return getZeroMatrix();\n  }\n\n  get ELEMENTS(): number {\n    return 16;\n  }\n\n  get RANK(): number {\n    return 4;\n  }\n\n  get INDICES(): typeof INDICES {\n    return INDICES;\n  }\n\n  constructor(array?: Readonly<NumericArray>) {\n    // PERF NOTE: initialize elements as double precision numbers\n    super(-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0);\n    if (arguments.length === 1 && Array.isArray(array)) {\n      this.copy(array);\n    } else {\n      this.identity();\n    }\n  }\n\n  copy(array: Readonly<NumericArray>): this {\n    this[0] = array[0];\n    this[1] = array[1];\n    this[2] = array[2];\n    this[3] = array[3];\n    this[4] = array[4];\n    this[5] = array[5];\n    this[6] = array[6];\n    this[7] = array[7];\n    this[8] = array[8];\n    this[9] = array[9];\n    this[10] = array[10];\n    this[11] = array[11];\n    this[12] = array[12];\n    this[13] = array[13];\n    this[14] = array[14];\n    this[15] = array[15];\n    return this.check();\n  }\n\n  // eslint-disable-next-line max-params\n  set(\n    m00: number,\n    m10: number,\n    m20: number,\n    m30: number,\n    m01: number,\n    m11: number,\n    m21: number,\n    m31: number,\n    m02: number,\n    m12: number,\n    m22: number,\n    m32: number,\n    m03: number,\n    m13: number,\n    m23: number,\n    m33: number\n  ): this {\n    this[0] = m00;\n    this[1] = m10;\n    this[2] = m20;\n    this[3] = m30;\n    this[4] = m01;\n    this[5] = m11;\n    this[6] = m21;\n    this[7] = m31;\n    this[8] = m02;\n    this[9] = m12;\n    this[10] = m22;\n    this[11] = m32;\n    this[12] = m03;\n    this[13] = m13;\n    this[14] = m23;\n    this[15] = m33;\n    return this.check();\n  }\n\n  // accepts row major order, stores as column major\n  // eslint-disable-next-line max-params\n  setRowMajor(\n    m00: number,\n    m01: number,\n    m02: number,\n    m03: number,\n    m10: number,\n    m11: number,\n    m12: number,\n    m13: number,\n    m20: number,\n    m21: number,\n    m22: number,\n    m23: number,\n    m30: number,\n    m31: number,\n    m32: number,\n    m33: number\n  ): this {\n    this[0] = m00;\n    this[1] = m10;\n    this[2] = m20;\n    this[3] = m30;\n    this[4] = m01;\n    this[5] = m11;\n    this[6] = m21;\n    this[7] = m31;\n    this[8] = m02;\n    this[9] = m12;\n    this[10] = m22;\n    this[11] = m32;\n    this[12] = m03;\n    this[13] = m13;\n    this[14] = m23;\n    this[15] = m33;\n    return this.check();\n  }\n\n  toRowMajor(result: NumericArray): NumericArray {\n    result[0] = this[0];\n    result[1] = this[4];\n    result[2] = this[8];\n    result[3] = this[12];\n    result[4] = this[1];\n    result[5] = this[5];\n    result[6] = this[9];\n    result[7] = this[13];\n    result[8] = this[2];\n    result[9] = this[6];\n    result[10] = this[10];\n    result[11] = this[14];\n    result[12] = this[3];\n    result[13] = this[7];\n    result[14] = this[11];\n    result[15] = this[15];\n    return result;\n  }\n\n  // Constructors\n\n  /** Set to identity matrix */\n  identity(): this {\n    return this.copy(IDENTITY_MATRIX);\n  }\n\n  /**\n   *\n   * @param object\n   * @returns self\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  fromObject(object: {[key: string]: any}): this {\n    return this.check();\n  }\n\n  /**\n   * Calculates a 4x4 matrix from the given quaternion\n   * @param quaternion Quaternion to create matrix from\n   * @returns self\n   */\n  fromQuaternion(quaternion: Readonly<NumericArray>): this {\n    mat4_fromQuat(this, quaternion);\n    return this.check();\n  }\n\n  /**\n   * Generates a frustum matrix with the given bounds\n   * @param view.left - Left bound of the frustum\n   * @param view.right - Right bound of the frustum\n   * @param view.bottom - Bottom bound of the frustum\n   * @param view.top - Top bound of the frustum\n   * @param view.near - Near bound of the frustum\n   * @param view.far - Far bound of the frustum. Can be set to Infinity.\n   * @returns self\n   */\n  frustum(view: {\n    left: number;\n    right: number;\n    bottom: number;\n    top: number;\n    near: number;\n    far?: number;\n  }): this {\n    const {left, right, bottom, top, near = DEFAULT_NEAR, far = DEFAULT_FAR} = view;\n    if (far === Infinity) {\n      computeInfinitePerspectiveOffCenter(this, left, right, bottom, top, near);\n    } else {\n      mat4_frustum(this, left, right, bottom, top, near, far);\n    }\n    return this.check();\n  }\n\n  /**\n   * Generates a look-at matrix with the given eye position, focal point,\n   * and up axis\n   * @param view.eye - (vector) Position of the viewer\n   * @param view.center - (vector) Point the viewer is looking at\n   * @param view.up - (vector) Up axis\n   * @returns self\n   */\n  lookAt(view: {\n    eye: Readonly<NumericArray>;\n    center?: Readonly<NumericArray>;\n    up?: Readonly<NumericArray>;\n  }): this {\n    const {eye, center = [0, 0, 0], up = [0, 1, 0]} = view;\n    mat4_lookAt(this, eye, center, up);\n    return this.check();\n  }\n\n  /**\n   * Generates a orthogonal projection matrix with the given bounds\n   * from \"traditional\" view space parameters\n   * @param view.left - Left bound of the frustum\n   * @param view.right number  Right bound of the frustum\n   * @param view.bottom - Bottom bound of the frustum\n   * @param view.top number  Top bound of the frustum\n   * @param view.near - Near bound of the frustum\n   * @param view.far number  Far bound of the frustum\n   * @returns self\n   */\n  ortho(view: {\n    left: number;\n    right: number;\n    bottom: number;\n    top: number;\n    near?: number;\n    far?: number;\n  }): this {\n    const {left, right, bottom, top, near = DEFAULT_NEAR, far = DEFAULT_FAR} = view;\n    mat4_ortho(this, left, right, bottom, top, near, far);\n    return this.check();\n  }\n\n  /**\n   * Generates an orthogonal projection matrix with the same parameters\n   * as a perspective matrix (plus focalDistance)\n   * @param view.fovy Vertical field of view in radians\n   * @param view.aspect Aspect ratio. Typically viewport width / viewport height\n   * @param view.focalDistance Distance in the view frustum used for extent calculations\n   * @param view.near Near bound of the frustum\n   * @param view.far Far bound of the frustum\n   * @returns self\n   */\n  orthographic(view: {\n    fovy?: number;\n    aspect?: number;\n    focalDistance?: number;\n    near?: number;\n    far?: number;\n  }): this {\n    const {\n      fovy = DEFAULT_FOVY,\n      aspect = DEFAULT_ASPECT,\n      focalDistance = 1,\n      near = DEFAULT_NEAR,\n      far = DEFAULT_FAR\n    } = view;\n\n    checkRadians(fovy);\n\n    const halfY = fovy / 2;\n    const top = focalDistance * Math.tan(halfY); // focus_plane is the distance from the camera\n    const right = top * aspect;\n\n    return this.ortho({\n      left: -right,\n      right,\n      bottom: -top,\n      top,\n      near,\n      far\n    });\n  }\n\n  /**\n   * Generates a perspective projection matrix with the given bounds\n   * @param view.fovy Vertical field of view in radians\n   * @param view.aspect Aspect ratio. typically viewport width/height\n   * @param view.near Near bound of the frustum\n   * @param view.far Far bound of the frustum\n   * @returns self\n   */\n  perspective(view: {fovy: number; aspect?: number; near?: number; far?: number}): this {\n    const {fovy = (45 * Math.PI) / 180, aspect = 1, near = 0.1, far = 500} = view;\n    checkRadians(fovy);\n    mat4_perspective(this, fovy, aspect, near, far);\n    return this.check();\n  }\n\n  // Accessors\n\n  determinant(): number {\n    return mat4_determinant(this);\n  }\n\n  /**\n   * Extracts the non-uniform scale assuming the matrix is an affine transformation.\n   * The scales are the \"lengths\" of the column vectors in the upper-left 3x3 matrix.\n   * @param result\n   * @returns self\n   */\n  getScale(result: NumericArray = [-0, -0, -0]): NumericArray {\n    // explicit is faster than hypot...\n    result[0] = Math.sqrt(this[0] * this[0] + this[1] * this[1] + this[2] * this[2]);\n    result[1] = Math.sqrt(this[4] * this[4] + this[5] * this[5] + this[6] * this[6]);\n    result[2] = Math.sqrt(this[8] * this[8] + this[9] * this[9] + this[10] * this[10]);\n    // result[0] = Math.hypot(this[0], this[1], this[2]);\n    // result[1] = Math.hypot(this[4], this[5], this[6]);\n    // result[2] = Math.hypot(this[8], this[9], this[10]);\n    return result;\n  }\n\n  /**\n   * Gets the translation portion, assuming the matrix is a affine transformation matrix.\n   * @param result\n   * @returns self\n   */\n  getTranslation(result: NumericArray = [-0, -0, -0]): NumericArray {\n    result[0] = this[12];\n    result[1] = this[13];\n    result[2] = this[14];\n    return result;\n  }\n\n  /**\n   * Gets upper left 3x3 pure rotation matrix (non-scaling), assume affine transformation matrix\n   * @param result\n   * @param scaleResult\n   * @returns self\n   */\n  getRotation(result?: NumericArray, scaleResult?: NumericArray): NumericArray {\n    result = result || [-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0];\n    scaleResult = scaleResult || [-0, -0, -0];\n    const scale = this.getScale(scaleResult);\n    const inverseScale0 = 1 / scale[0];\n    const inverseScale1 = 1 / scale[1];\n    const inverseScale2 = 1 / scale[2];\n    result[0] = this[0] * inverseScale0;\n    result[1] = this[1] * inverseScale1;\n    result[2] = this[2] * inverseScale2;\n    result[3] = 0;\n    result[4] = this[4] * inverseScale0;\n    result[5] = this[5] * inverseScale1;\n    result[6] = this[6] * inverseScale2;\n    result[7] = 0;\n    result[8] = this[8] * inverseScale0;\n    result[9] = this[9] * inverseScale1;\n    result[10] = this[10] * inverseScale2;\n    result[11] = 0;\n    result[12] = 0;\n    result[13] = 0;\n    result[14] = 0;\n    result[15] = 1;\n    return result;\n  }\n\n  /**\n   *\n   * @param result\n   * @param scaleResult\n   * @returns self\n   */\n  getRotationMatrix3(result?: NumericArray, scaleResult?: NumericArray): NumericArray {\n    result = result || [-0, -0, -0, -0, -0, -0, -0, -0, -0];\n    scaleResult = scaleResult || [-0, -0, -0];\n    const scale = this.getScale(scaleResult);\n    const inverseScale0 = 1 / scale[0];\n    const inverseScale1 = 1 / scale[1];\n    const inverseScale2 = 1 / scale[2];\n    result[0] = this[0] * inverseScale0;\n    result[1] = this[1] * inverseScale1;\n    result[2] = this[2] * inverseScale2;\n    result[3] = this[4] * inverseScale0;\n    result[4] = this[5] * inverseScale1;\n    result[5] = this[6] * inverseScale2;\n    result[6] = this[8] * inverseScale0;\n    result[7] = this[9] * inverseScale1;\n    result[8] = this[10] * inverseScale2;\n    return result;\n  }\n\n  // Modifiers\n\n  transpose(): this {\n    mat4_transpose(this, this);\n    return this.check();\n  }\n\n  invert(): this {\n    mat4_invert(this, this);\n    return this.check();\n  }\n\n  // Operations\n\n  multiplyLeft(a: Readonly<NumericArray>): this {\n    mat4_multiply(this, a, this);\n    return this.check();\n  }\n\n  multiplyRight(a: Readonly<NumericArray>): this {\n    mat4_multiply(this, this, a);\n    return this.check();\n  }\n\n  // Rotates a matrix by the given angle around the X axis\n  rotateX(radians: number): this {\n    mat4_rotateX(this, this, radians);\n    // mat4_rotate(this, this, radians, [1, 0, 0]);\n    return this.check();\n  }\n\n  // Rotates a matrix by the given angle around the Y axis.\n  rotateY(radians: number): this {\n    mat4_rotateY(this, this, radians);\n    // mat4_rotate(this, this, radians, [0, 1, 0]);\n    return this.check();\n  }\n\n  /**\n   * Rotates a matrix by the given angle around the Z axis.\n   * @param radians\n   * @returns self\n   */\n  rotateZ(radians: number): this {\n    mat4_rotateZ(this, this, radians);\n    // mat4_rotate(this, this, radians, [0, 0, 1]);\n    return this.check();\n  }\n\n  /**\n   *\n   * @param param0\n   * @returns self\n   */\n  rotateXYZ(angleXYZ: Readonly<NumericArray>): this {\n    return this.rotateX(angleXYZ[0]).rotateY(angleXYZ[1]).rotateZ(angleXYZ[2]);\n  }\n\n  /**\n   *\n   * @param radians\n   * @param axis\n   * @returns self\n   */\n  rotateAxis(radians: number, axis: Readonly<NumericArray>): this {\n    mat4_rotate(this, this, radians, axis);\n    return this.check();\n  }\n\n  /**\n   *\n   * @param factor\n   * @returns self\n   */\n  override scale(factor: number | Readonly<NumericArray>): this {\n    mat4_scale(this, this, Array.isArray(factor) ? factor : [factor, factor, factor]);\n    return this.check();\n  }\n\n  /**\n   *\n   * @param vec\n   * @returns self\n   */\n  translate(vector: Readonly<NumericArray>): this {\n    mat4_translate(this, this, vector);\n    return this.check();\n  }\n\n  // Transforms\n\n  /**\n   * Transforms any 2, 3 or 4 element vector. 2 and 3 elements are treated as points\n   * @param vector\n   * @param result\n   * @returns self\n   */\n  transform(vector: Readonly<NumericArray>, result?: NumericArray): NumericArray {\n    if (vector.length === 4) {\n      result = vec4_transformMat4(result || [-0, -0, -0, -0], vector, this) as NumericArray;\n      checkVector(result, 4);\n      return result;\n    }\n    return this.transformAsPoint(vector, result);\n  }\n\n  /**\n   * Transforms any 2 or 3 element array as point (w implicitly 1)\n   * @param vector\n   * @param result\n   * @returns self\n   */\n  transformAsPoint(vector: Readonly<NumericArray>, result?: NumericArray): NumericArray {\n    const {length} = vector;\n    let out: NumericArray;\n    switch (length) {\n      case 2:\n        out = vec2_transformMat4(result || [-0, -0], vector, this) as NumericArray;\n        break;\n      case 3:\n        out = vec3_transformMat4(result || [-0, -0, -0], vector, this) as NumericArray;\n        break;\n      default:\n        throw new Error('Illegal vector');\n    }\n    checkVector(out, vector.length);\n    return out;\n  }\n\n  /**\n   * Transforms any 2 or 3 element array as vector (w implicitly 0)\n   * @param vector\n   * @param result\n   * @returns self\n   */\n  transformAsVector(vector: Readonly<NumericArray>, result?: NumericArray): NumericArray {\n    let out: NumericArray;\n    switch (vector.length) {\n      case 2:\n        out = vec2_transformMat4AsVector(result || [-0, -0], vector, this);\n        break;\n      case 3:\n        out = vec3_transformMat4AsVector(result || [-0, -0, -0], vector, this);\n        break;\n      default:\n        throw new Error('Illegal vector');\n    }\n    checkVector(out, vector.length);\n    return out;\n  }\n\n  /** @deprecated */\n  transformPoint(vector: Readonly<NumericArray>, result?: NumericArray): NumericArray {\n    return this.transformAsPoint(vector, result);\n  }\n\n  /** @deprecated */\n  transformVector(vector: Readonly<NumericArray>, result?: NumericArray): NumericArray {\n    return this.transformAsPoint(vector, result);\n  }\n\n  /** @deprecated */\n  transformDirection(vector: Readonly<NumericArray>, result?: NumericArray): NumericArray {\n    return this.transformAsVector(vector, result);\n  }\n\n  // three.js math API compatibility\n\n  makeRotationX(radians: number): this {\n    return this.identity().rotateX(radians);\n  }\n\n  makeTranslation(x: number, y: number, z: number): this {\n    return this.identity().translate([x, y, z]);\n  }\n}\n\n// TODO initializing static members directly is an option, but make sure no tree-shaking issues\nlet ZERO: Matrix4;\nlet IDENTITY: Matrix4;\n\nfunction getZeroMatrix(): Readonly<Matrix4> {\n  if (!ZERO) {\n    ZERO = new Matrix4([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\n    Object.freeze(ZERO);\n  }\n  return ZERO;\n}\n\nfunction getIdentityMatrix(): Matrix4 {\n  if (!IDENTITY) {\n    IDENTITY = new Matrix4();\n    Object.freeze(IDENTITY);\n  }\n  return IDENTITY;\n}\n\n// HELPER FUNCTIONS\n\nfunction checkRadians(possiblyDegrees: number) {\n  if (possiblyDegrees > Math.PI * 2) {\n    throw Error('expected radians');\n  }\n}\n\n// eslint-disable-next-line max-params\nfunction computeInfinitePerspectiveOffCenter(\n  result: NumericArray,\n  left: number,\n  right: number,\n  bottom: number,\n  top: number,\n  near: number\n): NumericArray {\n  const column0Row0 = (2 * near) / (right - left);\n  const column1Row1 = (2 * near) / (top - bottom);\n  const column2Row0 = (right + left) / (right - left);\n  const column2Row1 = (top + bottom) / (top - bottom);\n  const column2Row2 = -1;\n  const column2Row3 = -1;\n  const column3Row2 = -2 * near;\n  result[0] = column0Row0;\n  result[1] = 0;\n  result[2] = 0;\n  result[3] = 0;\n  result[4] = 0;\n  result[5] = column1Row1;\n  result[6] = 0;\n  result[7] = 0;\n  result[8] = column2Row0;\n  result[9] = column2Row1;\n  result[10] = column2Row2;\n  result[11] = column2Row3;\n  result[12] = 0;\n  result[13] = 0;\n  result[14] = column3Row2;\n  result[15] = 0;\n  return result;\n}\n", "// @eslint-disable\n// @ts-nocheck\n\nimport * as glMatrix from './common.js';\nimport * as mat3 from './mat3.js';\nimport * as vec3 from './vec3.js';\nimport * as vec4 from './vec4.js';\n\n// const glMatrix: {EPSILON = 0.000001};\n\n/**\n * Quaternion in the format XYZW\n * @module quat\n */\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\nexport function create() {\n  const out = new glMatrix.ARRAY_TYPE(4);\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyVec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  const s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\n * @param  {ReadonlyQuat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */\nexport function getAxisAngle(out_axis, q) {\n  const rad = Math.acos(q[3]) * 2.0;\n  const s = Math.sin(rad / 2.0);\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n  return rad;\n}\n\n/**\n * Gets the angular distance between two unit quaternions\n *\n * @param  {ReadonlyQuat} a     Origin unit quaternion\n * @param  {ReadonlyQuat} b     Destination unit quaternion\n * @return {Number}     Angle, in radians, between the two quaternions\n */\nexport function getAngle(a, b) {\n  const dotproduct = dot(a, b);\n\n  return Math.acos(2 * dotproduct * dotproduct - 1);\n}\n\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n */\nexport function multiply(out, a, b) {\n  const ax = a[0];\n  const ay = a[1];\n  const az = a[2];\n  const aw = a[3];\n  const bx = b[0];\n  const by = b[1];\n  const bz = b[2];\n  const bw = b[3];\n\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n\n  const ax = a[0];\n  const ay = a[1];\n  const az = a[2];\n  const aw = a[3];\n  const bx = Math.sin(rad);\n  const bw = Math.cos(rad);\n\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n\n  const ax = a[0];\n  const ay = a[1];\n  const az = a[2];\n  const aw = a[3];\n  const by = Math.sin(rad);\n  const bw = Math.cos(rad);\n\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n\n  const ax = a[0];\n  const ay = a[1];\n  const az = a[2];\n  const aw = a[3];\n  const bz = Math.sin(rad);\n  const bw = Math.cos(rad);\n\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate W component of\n * @returns {quat} out\n */\nexport function calculateW(out, a) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n\n/**\n * Calculate the exponential of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\nexport function exp(out, a) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  const w = a[3];\n\n  const r = Math.sqrt(x * x + y * y + z * z);\n  const et = Math.exp(w);\n  const s = r > 0 ? (et * Math.sin(r)) / r : 0;\n\n  out[0] = x * s;\n  out[1] = y * s;\n  out[2] = z * s;\n  out[3] = et * Math.cos(r);\n\n  return out;\n}\n\n/**\n * Calculate the natural logarithm of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\nexport function ln(out, a) {\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n  const w = a[3];\n\n  const r = Math.sqrt(x * x + y * y + z * z);\n  const t = r > 0 ? Math.atan2(r, w) / r : 0;\n\n  out[0] = x * t;\n  out[1] = y * t;\n  out[2] = z * t;\n  out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);\n\n  return out;\n}\n\n/**\n * Calculate the scalar power of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @param {Number} b amount to scale the quaternion by\n * @returns {quat} out\n */\nexport function pow(out, a, b) {\n  ln(out, a);\n  scale(out, out, b);\n  exp(out, out);\n  return out;\n}\n\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  const ax = a[0];\n  const ay = a[1];\n  const az = a[2];\n  const aw = a[3];\n  let bx = b[0];\n  let by = b[1];\n  let bz = b[2];\n  let bw = b[3];\n\n  let cosom;\n  let omega;\n  let scale0;\n  let scale1;\n  let sinom;\n\n  // calc cosine\n  cosom = ax * bx + ay * by + az * bz + aw * bw;\n  // adjust signs (if necessary)\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  }\n  // calculate coefficients\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  }\n  // calculate final values\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n\n  return out;\n}\n\n/**\n * Generates a random unit quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\n// export function random(out) {\n//   // Implementation of http://planning.cs.uiuc.edu/node198.html\n//   // TODO: Calling random 3 times is probably not the fastest solution\n//   let u1 = glMatrix.RANDOM();\n//   let u2 = glMatrix.RANDOM();\n//   let u3 = glMatrix.RANDOM();\n\n//   let sqrt1MinusU1 = Math.sqrt(1 - u1);\n//   let sqrtU1 = Math.sqrt(u1);\n\n//   out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n//   out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n//   out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n//   out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n//   return out;\n// }\n\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate inverse of\n * @returns {quat} out\n */\nexport function invert(out, a) {\n  const a0 = a[0];\n  const a1 = a[1];\n  const a2 = a[2];\n  const a3 = a[3];\n  const dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  const invDot = dot ? 1.0 / dot : 0;\n\n  // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate conjugate of\n * @returns {quat} out\n */\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyMat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  const fTrace = m[0] + m[4] + m[8];\n  let fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    let i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    const j = (i + 1) % 3;\n    const k = (i + 2) % 3;\n\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n\n/**\n * Creates a quaternion from the given euler angle x, y, z using the provided intrinsic order for the conversion.\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x Angle to rotate around X axis in degrees.\n * @param {Number} y Angle to rotate around Y axis in degrees.\n * @param {Number} z Angle to rotate around Z axis in degrees.\n * @param {'zyx'|'xyz'|'yxz'|'yzx'|'zxy'|'zyx'} order Intrinsic order for conversion, default is zyx.\n * @returns {quat} out\n * @function\n */\n// export function fromEuler(out, x, y, z, order = glMatrix.ANGLE_ORDER) {\n//   let halfToRad = Math.PI / 360;\n//   x *= halfToRad;\n//   z *= halfToRad;\n//   y *= halfToRad;\n\n//   let sx = Math.sin(x);\n//   let cx = Math.cos(x);\n//   let sy = Math.sin(y);\n//   let cy = Math.cos(y);\n//   let sz = Math.sin(z);\n//   let cz = Math.cos(z);\n\n//   switch (order) {\n//     case \"xyz\":\n//       out[0] = sx * cy * cz + cx * sy * sz;\n//       out[1] = cx * sy * cz - sx * cy * sz;\n//       out[2] = cx * cy * sz + sx * sy * cz;\n//       out[3] = cx * cy * cz - sx * sy * sz;\n//       break;\n\n//     case \"xzy\":\n//       out[0] = sx * cy * cz - cx * sy * sz;\n//       out[1] = cx * sy * cz - sx * cy * sz;\n//       out[2] = cx * cy * sz + sx * sy * cz;\n//       out[3] = cx * cy * cz + sx * sy * sz;\n//       break;\n\n//     case \"yxz\":\n//       out[0] = sx * cy * cz + cx * sy * sz;\n//       out[1] = cx * sy * cz - sx * cy * sz;\n//       out[2] = cx * cy * sz - sx * sy * cz;\n//       out[3] = cx * cy * cz + sx * sy * sz;\n//       break;\n\n//     case \"yzx\":\n//       out[0] = sx * cy * cz + cx * sy * sz;\n//       out[1] = cx * sy * cz + sx * cy * sz;\n//       out[2] = cx * cy * sz - sx * sy * cz;\n//       out[3] = cx * cy * cz - sx * sy * sz;\n//       break;\n\n//     case \"zxy\":\n//       out[0] = sx * cy * cz - cx * sy * sz;\n//       out[1] = cx * sy * cz + sx * cy * sz;\n//       out[2] = cx * cy * sz + sx * sy * cz;\n//       out[3] = cx * cy * cz - sx * sy * sz;\n//       break;\n\n//     case \"zyx\":\n//       out[0] = sx * cy * cz - cx * sy * sz;\n//       out[1] = cx * sy * cz + sx * cy * sz;\n//       out[2] = cx * cy * sz - sx * sy * cz;\n//       out[3] = cx * cy * cz + sx * sy * sz;\n//       break;\n\n//     default:\n//       throw new Error('Unknown angle order ' + order);\n//   }\n\n//   return out;\n// }\n\n/**\n * Returns a string representation of a quaternion\n *\n * @param {ReadonlyQuat} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return `quat(${a[0]}, ${a[1]}, ${a[2]}, ${a[3]})`;\n}\n\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {ReadonlyQuat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\nexport const clone = vec4.clone;\n\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\nexport const fromValues = vec4.fromValues;\n\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the source quaternion\n * @returns {quat} out\n * @function\n */\nexport const copy = vec4.copy;\n\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\nexport const set = vec4.set;\n\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n * @function\n */\nexport const add = vec4.add;\n\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {ReadonlyQuat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\nexport const scale = vec4.scale;\n\n/**\n * Calculates the dot product of two quat's\n *\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nexport const dot = vec4.dot;\n\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n * @function\n */\nexport const lerp = vec4.lerp;\n\n/**\n * Calculates the length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport const length = vec4.length;\n\n/**\n * Alias for {@link quat.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Calculates the squared length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\nexport const squaredLength = vec4.squaredLength;\n\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\nexport const normalize = vec4.normalize;\n\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyQuat} a The first quaternion.\n * @param {ReadonlyQuat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport const exactEquals = vec4.exactEquals;\n\n/**\n * Returns whether or not the quaternions point approximately to the same direction.\n *\n * Both quaternions are assumed to be unit length.\n *\n * @param {ReadonlyQuat} a The first unit quaternion.\n * @param {ReadonlyQuat} b The second unit quaternion.\n * @returns {Boolean} True if the quaternions are equal, false otherwise.\n */\nexport function equals(a, b) {\n  return Math.abs(vec4.dot(a, b)) >= 1 - glMatrix.EPSILON;\n}\n\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {ReadonlyVec3} a the initial vector\n * @param {ReadonlyVec3} b the destination vector\n * @returns {quat} out\n */\nexport const rotationTo = (function () {\n  const tmpvec3 = vec3.create();\n  const xUnitVec3 = vec3.fromValues(1, 0, 0);\n  const yUnitVec3 = vec3.fromValues(0, 1, 0);\n\n  return function (out, a, b) {\n    const dot = vec3.dot(a, b);\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    }\n    vec3.cross(tmpvec3, a, b);\n    out[0] = tmpvec3[0];\n    out[1] = tmpvec3[1];\n    out[2] = tmpvec3[2];\n    out[3] = 1 + dot;\n    return normalize(out, out);\n  };\n})();\n\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {ReadonlyQuat} c the third operand\n * @param {ReadonlyQuat} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\nexport const sqlerp = (function () {\n  const temp1 = create();\n  const temp2 = create();\n\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n\n    return out;\n  };\n})();\n\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {ReadonlyVec3} view  the vector representing the viewing direction\n * @param {ReadonlyVec3} right the vector representing the local \"right\" direction\n * @param {ReadonlyVec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\nexport const setAxes = (function () {\n  const matr = mat3.create();\n\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n\n    return normalize(out, fromMat3(out, matr));\n  };\n})();\n", "// Copyright (c) 2017 Uber Technologies, Inc.\n// MIT License\nimport {NumericArray} from '@math.gl/types';\nimport {MathArray} from './base/math-array';\nimport {checkNumber, checkVector} from '../lib/validators';\nimport {Vector4} from './vector4';\n// @ts-ignore gl-matrix types...\nimport {\n  fromMat3 as quat_fromMat3,\n  setAxisAngle as quat_setAxisAngle,\n  identity as quat_identity,\n  length as quat_length,\n  squaredLength as quat_squaredLength,\n  dot as quat_dot,\n  // getAxisAngle as quat_getAxisAngle,\n  rotationTo as quat_rotationTo,\n  add as quat_add,\n  calculateW as quat_calculateW,\n  conjugate as quat_conjugate,\n  invert as quat_invert,\n  lerp as quat_lerp,\n  multiply as quat_multiply,\n  rotateX as quat_rotateX,\n  rotateY as quat_rotateY,\n  rotateZ as quat_rotateZ,\n  scale as quat_scale,\n  slerp as quat_slerp\n} from '../gl-matrix/quat';\n// @ts-ignore gl-matrix types...\nimport {transformQuat as vec4_transformQuat} from '../gl-matrix/vec4';\n\nconst IDENTITY_QUATERNION = [0, 0, 0, 1] as const;\n\nexport class Quaternion extends MathArray {\n  constructor(x: number | Readonly<NumericArray> = 0, y = 0, z = 0, w = 1) {\n    // PERF NOTE: initialize elements as double precision numbers\n    super(-0, -0, -0, -0);\n    // eslint-disable-next-line prefer-rest-params\n    if (Array.isArray(x) && arguments.length === 1) {\n      this.copy(x);\n    } else {\n      this.set(x as number, y, z, w);\n    }\n  }\n\n  copy(array: Readonly<NumericArray>): this {\n    this[0] = array[0];\n    this[1] = array[1];\n    this[2] = array[2];\n    this[3] = array[3];\n    return this.check();\n  }\n\n  set(x: number, y: number, z: number, w: number): this {\n    this[0] = x;\n    this[1] = y;\n    this[2] = z;\n    this[3] = w;\n    return this.check();\n  }\n\n  fromObject(object: {x: number; y: number; z: number; w: number}): this {\n    this[0] = object.x;\n    this[1] = object.y;\n    this[2] = object.z;\n    this[3] = object.w;\n    return this.check();\n  }\n\n  /**\n   * Creates a quaternion from the given 3x3 rotation matrix.\n   * NOTE: The resultant quaternion is not normalized, so you should\n   * be sure to renormalize the quaternion yourself where necessary.\n   * @param m\n   * @returns\n   */\n  fromMatrix3(m: Readonly<NumericArray>): this {\n    quat_fromMat3(this, m);\n    return this.check();\n  }\n\n  fromAxisRotation(axis: Readonly<NumericArray>, rad: number): this {\n    quat_setAxisAngle(this, axis, rad);\n    return this.check();\n  }\n\n  /** Set a quat to the identity quaternion */\n  identity(): this {\n    quat_identity(this);\n    return this.check();\n  }\n\n  // Set the components of a quat to the given values\n  // set(i, j, k, l) {\n  //   quat_set(this, i, j, k, l);\n  //   return this.check();\n  // }\n\n  // Sets a quat from the given angle and rotation axis, then returns it.\n  setAxisAngle(axis: Readonly<NumericArray>, rad: number): this {\n    return this.fromAxisRotation(axis, rad);\n  }\n\n  // Getters/setters\n  get ELEMENTS(): number {\n    return 4;\n  }\n\n  get x(): number {\n    return this[0];\n  }\n  set x(value: number) {\n    this[0] = checkNumber(value);\n  }\n\n  get y(): number {\n    return this[1];\n  }\n  set y(value: number) {\n    this[1] = checkNumber(value);\n  }\n\n  get z(): number {\n    return this[2];\n  }\n  set z(value: number) {\n    this[2] = checkNumber(value);\n  }\n\n  get w(): number {\n    return this[3];\n  }\n  set w(value: number) {\n    this[3] = checkNumber(value);\n  }\n\n  // Calculates the length of a quat\n  len(): number {\n    return quat_length(this);\n  }\n\n  // Calculates the squared length of a quat\n  lengthSquared(): number {\n    return quat_squaredLength(this);\n  }\n\n  // Calculates the dot product of two quat's\n  // @return {Number}\n  dot(a: Readonly<NumericArray>): number {\n    return quat_dot(this, a);\n  }\n\n  // Gets the rotation axis and angle for a given quaternion.\n  // If a quaternion is created with setAxisAngle, this method will\n  // return the same values as providied in the original parameter\n  // list OR functionally equivalent values.\n  // Example: The quaternion formed by axis [0, 0, 1] and angle -90\n  // is the same as the quaternion formed by [0, 0, 1] and 270.\n  // This method favors the latter.\n  // @return {{[x,y,z], Number}}\n  // getAxisAngle() {\n  //   const axis = [];\n  // //   const angle = quat_getAxisAngle(axis, this);\n  //   return {axis, angle};\n  // }\n  // MODIFIERS\n  // Sets a quaternion to represent the shortest rotation from one vector\n  // to another. Both vectors are assumed to be unit length.\n  rotationTo(vectorA: NumericArray, vectorB: NumericArray): this {\n    quat_rotationTo(this, vectorA, vectorB);\n    return this.check();\n  }\n\n  // Sets the specified quaternion with values corresponding to the given axes.\n  // Each axis is a vec3 and is expected to be unit length and perpendicular\n  // to all other specified axes.\n  // setAxes() {\n  //   Number\n  // }\n  // Performs a spherical linear interpolation with two control points\n  // sqlerp() {\n  //   Number;\n  // }\n  // Adds two quat's\n  override add(a: Readonly<NumericArray>): this {\n    quat_add(this, this, a);\n    return this.check();\n  }\n\n  // Calculates the W component of a quat from the X, Y, and Z components.\n  // Any existing W component will be ignored.\n  calculateW(): this {\n    quat_calculateW(this, this);\n    return this.check();\n  }\n\n  // Calculates the conjugate of a quat If the quaternion is normalized,\n  // this function is faster than quat_invert and produces the same result.\n  conjugate(): this {\n    quat_conjugate(this, this);\n    return this.check();\n  }\n\n  // Calculates the inverse of a quat\n  invert(): this {\n    quat_invert(this, this);\n    return this.check();\n  }\n\n  // Performs a linear interpolation between two quat's\n  override lerp(a: Readonly<NumericArray>, b: Readonly<NumericArray> | number, t?: number): this {\n    if (t === undefined) {\n      return this.lerp(this, a, b as number);\n    }\n    quat_lerp(this, a, b as NumericArray, t);\n    return this.check();\n  }\n\n  // Multiplies two quat's\n  multiplyRight(a: Readonly<NumericArray>): this {\n    quat_multiply(this, this, a);\n    return this.check();\n  }\n\n  multiplyLeft(a: Readonly<NumericArray>): this {\n    quat_multiply(this, a, this);\n    return this.check();\n  }\n\n  // Normalize a quat\n  normalize(): this {\n    // Handle 0 case\n    const length = this.len();\n    const l = length > 0 ? 1 / length : 0;\n    this[0] = this[0] * l;\n    this[1] = this[1] * l;\n    this[2] = this[2] * l;\n    this[3] = this[3] * l;\n    // Set to [0, 0, 0, 1] if length is 0\n    if (length === 0) {\n      this[3] = 1;\n    }\n    return this.check();\n  }\n\n  // Rotates a quaternion by the given angle about the X axis\n  rotateX(rad: number): this {\n    quat_rotateX(this, this, rad);\n    return this.check();\n  }\n\n  // Rotates a quaternion by the given angle about the Y axis\n  rotateY(rad: number): this {\n    quat_rotateY(this, this, rad);\n    return this.check();\n  }\n\n  // Rotates a quaternion by the given angle about the Z axis\n  rotateZ(rad: number): this {\n    quat_rotateZ(this, this, rad);\n    return this.check();\n  }\n\n  // Scales a quat by a scalar number\n  override scale(b: number): this {\n    quat_scale(this, this, b);\n    return this.check();\n  }\n\n  slerp(target: Readonly<NumericArray>, ratio: number): this;\n  slerp(start: Readonly<NumericArray>, target: Readonly<NumericArray>, ratio: number): this;\n  slerp(params: {\n    start: Readonly<NumericArray>;\n    target: Readonly<NumericArray>;\n    ratio: number;\n  }): this;\n\n  // Performs a spherical linear interpolation between two quat\n  slerp(\n    arg0:\n      | Readonly<NumericArray>\n      | {\n          start: Readonly<NumericArray>;\n          target: Readonly<NumericArray>;\n          ratio: number;\n        },\n    arg1?: Readonly<NumericArray> | number,\n    arg2?: number\n  ): this {\n    let start: Readonly<NumericArray>;\n    let target: Readonly<NumericArray>;\n    let ratio: number;\n    // eslint-disable-next-line prefer-rest-params\n    switch (arguments.length) {\n      case 1: // Deprecated signature ({start, target, ratio})\n        // eslint-disable-next-line prefer-rest-params\n        ({\n          start = IDENTITY_QUATERNION,\n          target,\n          ratio\n        } = arg0 as {\n          start: Readonly<NumericArray>;\n          target: Readonly<NumericArray>;\n          ratio: number;\n        });\n        break;\n      case 2: // THREE.js compatibility signature (target, ration)\n        start = this; // eslint-disable-line\n        target = arg0 as Readonly<NumericArray>;\n        ratio = arg1 as number;\n        break;\n      default:\n        // Default signature: (start, target, ratio)\n        start = arg0 as Readonly<NumericArray>;\n        target = arg1 as Readonly<NumericArray>;\n        ratio = arg2;\n    }\n    quat_slerp(this, start, target, ratio);\n    return this.check();\n  }\n\n  transformVector4(\n    vector: Readonly<NumericArray>,\n    result: NumericArray = new Vector4()\n  ): NumericArray {\n    vec4_transformQuat(result, vector, this);\n    return checkVector(result, 4);\n  }\n\n  // THREE.js Math API compatibility\n  lengthSq(): number {\n    return this.lengthSquared();\n  }\n\n  setFromAxisAngle(axis: Readonly<NumericArray>, rad: number): this {\n    return this.setAxisAngle(axis, rad);\n  }\n\n  premultiply(a: Readonly<NumericArray>): this {\n    return this.multiplyLeft(a);\n  }\n\n  multiply(a: Readonly<NumericArray>): this {\n    return this.multiplyRight(a);\n  }\n}\n", "export default function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}", "import _typeof from \"./typeof.js\";\nexport default function toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}", "import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nexport default function toPropertyKey(t) {\n  var i = toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : String(i);\n}", "import toPropertyKey from \"./toPropertyKey.js\";\nexport default function _defineProperty(obj, key, value) {\n  key = toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}", "// Copyright (c) 2017 Uber Technologies, Inc.\n// MIT License\n// Adaptation of THREE.js Spherical class, under MIT license\nimport {NumericArray} from '@math.gl/types';\nimport {Vector3} from './vector3';\nimport {formatValue, equals, config} from '../lib/common';\nimport {degrees, radians, clamp} from '../lib/common';\n// @ts-ignore gl-matrix types...\nimport * as vec3 from '../gl-matrix/vec3';\n\ntype SphericalCoordinatesOptions = {\n  phi?: number;\n  theta?: number;\n  radius?: number;\n  bearing?: number;\n  pitch?: number;\n  altitude?: number;\n  radiusScale?: number;\n};\n\ntype FormatOptions = {\n  printTypes?: boolean;\n};\n\n// TODO - import epsilon\nconst EPSILON = 0.000001;\nconst EARTH_RADIUS_METERS = 6371000;\n\n/**\n * The poles (phi) are at the positive and negative y axis.\n * The equator starts at positive z.\n * @link https://en.wikipedia.org/wiki/Spherical_coordinate_system\n */\nexport class SphericalCoordinates {\n  phi: number;\n  theta: number;\n  radius: number;\n  radiusScale: number;\n  // bearing: number;\n  // pitch: number;\n  // altitude: number;\n\n  // lnglatZ coordinates\n  // longitude: number;\n  // latitude: number;\n  // lng: number;\n  // lat: number;\n  // z: number;\n\n  /**\n   * Creates a new SphericalCoordinates object\n   * @param options\n   * @param [options.phi] =0 - rotation around X (latitude)\n   * @param [options.theta] =0 - rotation around Y (longitude)\n   * @param [options.radius] =1 - Distance from center\n   * @param [options.bearing]\n   * @param [options.pitch]\n   * @param [options.altitude]\n   * @param [options.radiusScale] =1\n   */\n  // eslint-disable-next-line complexity\n  constructor({\n    phi = 0,\n    theta = 0,\n    radius = 1,\n    bearing,\n    pitch,\n    altitude,\n    radiusScale = EARTH_RADIUS_METERS\n  }: SphericalCoordinatesOptions = {}) {\n    this.phi = phi;\n    this.theta = theta;\n    // TODO - silently accepts illegal 0\n    this.radius = radius || altitude || 1; // radial distance from center\n    this.radiusScale = radiusScale || 1; // Used by lngLatZ\n    if (bearing !== undefined) {\n      this.bearing = bearing; // up / down towards top and bottom pole\n    }\n    if (pitch !== undefined) {\n      this.pitch = pitch; // around the equator of the sphere\n    }\n    this.check();\n  }\n\n  toString(): string {\n    return this.formatString(config);\n  }\n\n  formatString({printTypes = false}: FormatOptions): string {\n    const f = formatValue;\n    return `${printTypes ? 'Spherical' : ''}\\\n[rho:${f(this.radius)},theta:${f(this.theta)},phi:${f(this.phi)}]`;\n  }\n\n  equals(other: SphericalCoordinates): boolean {\n    return (\n      equals(this.radius, other.radius) &&\n      equals(this.theta, other.theta) &&\n      equals(this.phi, other.phi)\n    );\n  }\n\n  exactEquals(other: SphericalCoordinates): boolean {\n    return this.radius === other.radius && this.theta === other.theta && this.phi === other.phi;\n  }\n\n  /* eslint-disable brace-style */\n  // Cartographic (bearing 0 north, pitch 0 look from above)\n  get bearing(): number {\n    return 180 - degrees(this.phi);\n  }\n\n  set bearing(v: number) {\n    this.phi = Math.PI - radians(v);\n  }\n\n  get pitch(): number {\n    return degrees(this.theta);\n  }\n\n  set pitch(v: number) {\n    this.theta = radians(v);\n  }\n\n  // get pitch() { return 90 - degrees(this.phi); }\n  // set pitch(v) { this.phi = radians(v) + Math.PI / 2; }\n  // get altitude() { return this.radius - 1; } // relative altitude\n  // lnglatZ coordinates\n  get longitude(): number {\n    return degrees(this.phi);\n  }\n\n  get latitude(): number {\n    return degrees(this.theta);\n  }\n\n  get lng(): number {\n    return degrees(this.phi);\n  }\n\n  get lat(): number {\n    return degrees(this.theta);\n  }\n\n  get z(): number {\n    return (this.radius - 1) * this.radiusScale;\n  }\n\n  /* eslint-enable brace-style */\n  set(radius: number, phi: number, theta: number): this {\n    this.radius = radius;\n    this.phi = phi;\n    this.theta = theta;\n    return this.check();\n  }\n\n  clone(): SphericalCoordinates {\n    return new SphericalCoordinates().copy(this);\n  }\n\n  copy(other: SphericalCoordinates): this {\n    this.radius = other.radius;\n    this.phi = other.phi;\n    this.theta = other.theta;\n    return this.check();\n  }\n\n  fromLngLatZ([lng, lat, z]: [number, number, number]): this {\n    this.radius = 1 + z / this.radiusScale;\n    this.phi = radians(lat);\n    this.theta = radians(lng);\n    return this.check();\n  }\n\n  fromVector3(v: Readonly<NumericArray>): this {\n    this.radius = vec3.length(v);\n    if (this.radius > 0) {\n      this.theta = Math.atan2(v[0], v[1]); // equator angle around y-up axis\n      this.phi = Math.acos(clamp(v[2] / this.radius, -1, 1)); // polar angle\n    }\n    return this.check();\n  }\n\n  toVector3(): Vector3 {\n    return new Vector3(0, 0, this.radius)\n      .rotateX({radians: this.theta})\n      .rotateZ({radians: this.phi});\n  }\n\n  // restrict phi to be betwee EPS and PI-EPS\n  makeSafe(): this {\n    this.phi = Math.max(EPSILON, Math.min(Math.PI - EPSILON, this.phi));\n    return this;\n  }\n\n  check(): this {\n    // this.makeSafe();\n    if (!Number.isFinite(this.phi) || !Number.isFinite(this.theta) || !(this.radius > 0)) {\n      throw new Error('SphericalCoordinates: some fields set to invalid numbers');\n    }\n    return this;\n  }\n}\n", "// Copyright (c) 2017 Uber Technologies, Inc.\n// MIT License\nimport {MathArray} from './base/math-array';\nimport {Quaternion} from './quaternion';\nimport {NumericArray} from '@math.gl/types';\n\nimport {clamp} from '../lib/common';\nimport {checkNumber} from '../lib/validators';\n\n// Internal constants\nconst ERR_UNKNOWN_ORDER = 'Unknown Euler angle order';\nconst ALMOST_ONE = 0.99999;\n\nenum RotationOrder {\n  ZYX = 0,\n  YXZ = 1,\n  XZY = 2,\n  ZXY = 3,\n  YZX = 4,\n  XYZ = 5\n}\n\nexport class Euler extends MathArray {\n  // Constants\n  static get ZYX(): RotationOrder {\n    return RotationOrder.ZYX;\n  }\n  static get YXZ(): RotationOrder {\n    return RotationOrder.YXZ;\n  }\n  static get XZY(): RotationOrder {\n    return RotationOrder.XZY;\n  }\n  static get ZXY(): RotationOrder {\n    return RotationOrder.ZXY;\n  }\n  static get YZX(): RotationOrder {\n    return RotationOrder.YZX;\n  }\n  static get XYZ(): RotationOrder {\n    return RotationOrder.XYZ;\n  }\n  static get RollPitchYaw(): RotationOrder {\n    return RotationOrder.ZYX;\n  }\n  static get DefaultOrder(): RotationOrder {\n    return RotationOrder.ZYX;\n  }\n  static get RotationOrders(): typeof RotationOrder {\n    return RotationOrder;\n  }\n  static rotationOrder(order: RotationOrder): string {\n    return RotationOrder[order];\n  }\n  get ELEMENTS(): number {\n    return 4;\n  }\n\n  /**\n   * @class\n   * @param {Number | Number[]} x\n   * @param {Number=} [y]\n   * @param {Number=} [z]\n   * @param {Number=} [order]\n   */\n  constructor(x = 0, y = 0, z = 0, order = Euler.DefaultOrder) {\n    // PERF NOTE: initialize elements as double precision numbers\n    super(-0, -0, -0, -0);\n    // eslint-disable-next-line prefer-rest-params\n    if (arguments.length > 0 && Array.isArray(arguments[0])) {\n      // eslint-disable-next-line prefer-rest-params\n      // @ts-expect-error\n      this.fromVector3(...arguments);\n    } else {\n      this.set(x, y, z, order);\n    }\n  }\n\n  fromQuaternion(quaternion: Readonly<NumericArray>): this {\n    const [x, y, z, w] = quaternion;\n    const ysqr = y * y;\n    const t0 = -2 * (ysqr + z * z) + 1;\n    const t1 = +2 * (x * y + w * z);\n    let t2 = -2 * (x * z - w * y);\n    const t3 = +2 * (y * z + w * x);\n    const t4 = -2 * (x * x + ysqr) + 1;\n    t2 = t2 > 1 ? 1 : t2;\n    t2 = t2 < -1 ? -1 : t2;\n    const roll = Math.atan2(t3, t4);\n    const pitch = Math.asin(t2);\n    const yaw = Math.atan2(t1, t0);\n    return this.set(roll, pitch, yaw, Euler.RollPitchYaw);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  fromObject(object: Record<string, unknown>): this {\n    throw new Error('not implemented');\n    //  return this.set(object.x, object.y, object.z, object.order);\n  }\n\n  // fromQuaternion(q, order) {\n  //   this._fromRotationMat[-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0];\n  //   return this.check();\n  // }\n  // If copied array does contain fourth element, preserves currently set order\n  copy(array: Readonly<NumericArray>): this {\n    this[0] = array[0];\n    this[1] = array[1];\n    this[2] = array[2];\n    // @ts-expect-error\n    this[3] = Number.isFinite(array[3]) || this.order;\n    return this.check();\n  }\n\n  // Sets the three angles, and optionally sets the rotation order\n  // If order is not specified, preserves currently set order\n  set(x = 0, y = 0, z = 0, order: RotationOrder): this {\n    this[0] = x;\n    this[1] = y;\n    this[2] = z;\n    this[3] = Number.isFinite(order) ? order : this[3];\n    return this.check();\n  }\n\n  override validate(): boolean {\n    return (\n      validateOrder(this[3]) &&\n      Number.isFinite(this[0]) &&\n      Number.isFinite(this[1]) &&\n      Number.isFinite(this[2])\n    );\n  }\n\n  // Does not copy the orientation element\n  override toArray(array: NumericArray = [], offset: number = 0): NumericArray {\n    array[offset] = this[0];\n    array[offset + 1] = this[1];\n    array[offset + 2] = this[2];\n    return array;\n  }\n\n  // Copies the orientation element\n  toArray4(array: NumericArray = [], offset: number = 0): NumericArray {\n    array[offset] = this[0];\n    array[offset + 1] = this[1];\n    array[offset + 2] = this[2];\n    array[offset + 3] = this[3];\n    return array;\n  }\n\n  toVector3(result: NumericArray = [-0, -0, -0]): NumericArray {\n    result[0] = this[0];\n    result[1] = this[1];\n    result[2] = this[2];\n    return result;\n  }\n  /* eslint-disable no-multi-spaces, brace-style, no-return-assign */\n  // x, y, z angle notation (note: only corresponds to axis in XYZ orientation)\n\n  get x(): number {\n    return this[0];\n  }\n  set x(value: number) {\n    this[0] = checkNumber(value);\n  }\n\n  get y(): number {\n    return this[1];\n  }\n  set y(value: number) {\n    this[1] = checkNumber(value);\n  }\n\n  get z(): number {\n    return this[2];\n  }\n  set z(value: number) {\n    this[2] = checkNumber(value);\n  }\n  // alpha, beta, gamma angle notation\n  get alpha(): number {\n    return this[0];\n  }\n  set alpha(value: number) {\n    this[0] = checkNumber(value);\n  }\n\n  get beta(): number {\n    return this[1];\n  }\n  set beta(value: number) {\n    this[1] = checkNumber(value);\n  }\n\n  get gamma(): number {\n    return this[2];\n  }\n  set gamma(value: number) {\n    this[2] = checkNumber(value);\n  }\n\n  // phi, theta, psi angle notation\n  get phi(): number {\n    return this[0];\n  }\n  set phi(value: number) {\n    this[0] = checkNumber(value);\n  }\n\n  get theta(): number {\n    return this[1];\n  }\n  set theta(value: number) {\n    this[1] = checkNumber(value);\n  }\n\n  get psi(): number {\n    return this[2];\n  }\n  set psi(value: number) {\n    this[2] = checkNumber(value);\n  }\n  // roll, pitch, yaw angle notation\n\n  get roll(): number {\n    return this[0];\n  }\n  set roll(value: number) {\n    this[0] = checkNumber(value);\n  }\n\n  get pitch(): number {\n    return this[1];\n  }\n  set pitch(value: number) {\n    this[1] = checkNumber(value);\n  }\n\n  get yaw(): number {\n    return this[2];\n  }\n  set yaw(value: number) {\n    this[2] = checkNumber(value);\n  }\n\n  // rotation order, in all three angle notations\n  get order(): RotationOrder {\n    return this[3];\n  }\n  set order(value: RotationOrder) {\n    this[3] = checkOrder(value);\n  }\n\n  // Constructors\n  fromVector3(v: Readonly<NumericArray>, order: RotationOrder): this {\n    return this.set(v[0], v[1], v[2], Number.isFinite(order) ? order : this[3]);\n  }\n\n  // TODO - with and without 4th element\n  override fromArray(array: Readonly<NumericArray>, offset: number = 0): this {\n    this[0] = array[0 + offset];\n    this[1] = array[1 + offset];\n    this[2] = array[2 + offset];\n    if (array[3] !== undefined) {\n      this[3] = array[3];\n    }\n    return this.check();\n  }\n\n  // Common ZYX rotation order\n  fromRollPitchYaw(roll: number, pitch: number, yaw: number): this {\n    return this.set(roll, pitch, yaw, RotationOrder.ZYX);\n  }\n\n  fromRotationMatrix(m: Readonly<NumericArray>, order: RotationOrder = Euler.DefaultOrder): this {\n    this._fromRotationMatrix(m, order);\n    return this.check();\n  }\n\n  // ACCESSORS\n\n  getRotationMatrix(m: NumericArray): NumericArray {\n    return this._getRotationMatrix(m);\n  }\n\n  // TODO - move to Quaternion\n  getQuaternion(): Quaternion {\n    const q = new Quaternion();\n    switch (this[3]) {\n      case RotationOrder.XYZ:\n        return q.rotateX(this[0]).rotateY(this[1]).rotateZ(this[2]);\n      case RotationOrder.YXZ:\n        return q.rotateY(this[0]).rotateX(this[1]).rotateZ(this[2]);\n      case RotationOrder.ZXY:\n        return q.rotateZ(this[0]).rotateX(this[1]).rotateY(this[2]);\n      case RotationOrder.ZYX:\n        return q.rotateZ(this[0]).rotateY(this[1]).rotateX(this[2]);\n      case RotationOrder.YZX:\n        return q.rotateY(this[0]).rotateZ(this[1]).rotateX(this[2]);\n      case RotationOrder.XZY:\n        return q.rotateX(this[0]).rotateZ(this[1]).rotateY(this[2]);\n      default:\n        throw new Error(ERR_UNKNOWN_ORDER);\n    }\n  }\n\n  // INTERNAL METHODS\n  // Conversion from Euler to rotation matrix and from matrix to Euler\n  // Adapted from three.js under MIT license\n  // // WARNING: this discards revolution information -bhouston\n  // reorder(newOrder) {\n  //   const q = new Quaternion().setFromEuler(this);\n  //   return this.setFromQuaternion(q, newOrder);\n  /* eslint-disable complexity, max-statements, one-var */\n  _fromRotationMatrix(m: Readonly<NumericArray>, order = Euler.DefaultOrder): this {\n    // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n    const m11 = m[0],\n      m12 = m[4],\n      m13 = m[8];\n    const m21 = m[1],\n      m22 = m[5],\n      m23 = m[9];\n    const m31 = m[2],\n      m32 = m[6],\n      m33 = m[10];\n    order = order || this[3];\n    switch (order) {\n      case Euler.XYZ:\n        this[1] = Math.asin(clamp(m13, -1, 1));\n        if (Math.abs(m13) < ALMOST_ONE) {\n          this[0] = Math.atan2(-m23, m33);\n          this[2] = Math.atan2(-m12, m11);\n        } else {\n          this[0] = Math.atan2(m32, m22);\n          this[2] = 0;\n        }\n        break;\n      case Euler.YXZ:\n        this[0] = Math.asin(-clamp(m23, -1, 1));\n        if (Math.abs(m23) < ALMOST_ONE) {\n          this[1] = Math.atan2(m13, m33);\n          this[2] = Math.atan2(m21, m22);\n        } else {\n          this[1] = Math.atan2(-m31, m11);\n          this[2] = 0;\n        }\n        break;\n      case Euler.ZXY:\n        this[0] = Math.asin(clamp(m32, -1, 1));\n        if (Math.abs(m32) < ALMOST_ONE) {\n          this[1] = Math.atan2(-m31, m33);\n          this[2] = Math.atan2(-m12, m22);\n        } else {\n          this[1] = 0;\n          this[2] = Math.atan2(m21, m11);\n        }\n        break;\n      case Euler.ZYX:\n        this[1] = Math.asin(-clamp(m31, -1, 1));\n        if (Math.abs(m31) < ALMOST_ONE) {\n          this[0] = Math.atan2(m32, m33);\n          this[2] = Math.atan2(m21, m11);\n        } else {\n          this[0] = 0;\n          this[2] = Math.atan2(-m12, m22);\n        }\n        break;\n      case Euler.YZX:\n        this[2] = Math.asin(clamp(m21, -1, 1));\n        if (Math.abs(m21) < ALMOST_ONE) {\n          this[0] = Math.atan2(-m23, m22);\n          this[1] = Math.atan2(-m31, m11);\n        } else {\n          this[0] = 0;\n          this[1] = Math.atan2(m13, m33);\n        }\n        break;\n      case Euler.XZY:\n        this[2] = Math.asin(-clamp(m12, -1, 1));\n        if (Math.abs(m12) < ALMOST_ONE) {\n          this[0] = Math.atan2(m32, m22);\n          this[1] = Math.atan2(m13, m11);\n        } else {\n          this[0] = Math.atan2(-m23, m33);\n          this[1] = 0;\n        }\n        break;\n      default:\n        throw new Error(ERR_UNKNOWN_ORDER);\n    }\n    this[3] = order;\n    return this;\n  }\n\n  _getRotationMatrix(result: NumericArray): NumericArray {\n    const te = result || [-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0];\n    const x = this.x,\n      y = this.y,\n      z = this.z;\n    const a = Math.cos(x);\n    const c = Math.cos(y);\n    const e = Math.cos(z);\n    const b = Math.sin(x);\n    const d = Math.sin(y);\n    const f = Math.sin(z);\n    switch (this[3]) {\n      case Euler.XYZ: {\n        const ae = a * e,\n          af = a * f,\n          be = b * e,\n          bf = b * f;\n        te[0] = c * e;\n        te[4] = -c * f;\n        te[8] = d;\n        te[1] = af + be * d;\n        te[5] = ae - bf * d;\n        te[9] = -b * c;\n        te[2] = bf - ae * d;\n        te[6] = be + af * d;\n        te[10] = a * c;\n        break;\n      }\n      case Euler.YXZ: {\n        const ce = c * e,\n          cf = c * f,\n          de = d * e,\n          df = d * f;\n        te[0] = ce + df * b;\n        te[4] = de * b - cf;\n        te[8] = a * d;\n        te[1] = a * f;\n        te[5] = a * e;\n        te[9] = -b;\n        te[2] = cf * b - de;\n        te[6] = df + ce * b;\n        te[10] = a * c;\n        break;\n      }\n      case Euler.ZXY: {\n        const ce = c * e,\n          cf = c * f,\n          de = d * e,\n          df = d * f;\n        te[0] = ce - df * b;\n        te[4] = -a * f;\n        te[8] = de + cf * b;\n        te[1] = cf + de * b;\n        te[5] = a * e;\n        te[9] = df - ce * b;\n        te[2] = -a * d;\n        te[6] = b;\n        te[10] = a * c;\n        break;\n      }\n      case Euler.ZYX: {\n        const ae = a * e,\n          af = a * f,\n          be = b * e,\n          bf = b * f;\n        te[0] = c * e;\n        te[4] = be * d - af;\n        te[8] = ae * d + bf;\n        te[1] = c * f;\n        te[5] = bf * d + ae;\n        te[9] = af * d - be;\n        te[2] = -d;\n        te[6] = b * c;\n        te[10] = a * c;\n        break;\n      }\n      case Euler.YZX: {\n        const ac = a * c,\n          ad = a * d,\n          bc = b * c,\n          bd = b * d;\n        te[0] = c * e;\n        te[4] = bd - ac * f;\n        te[8] = bc * f + ad;\n        te[1] = f;\n        te[5] = a * e;\n        te[9] = -b * e;\n        te[2] = -d * e;\n        te[6] = ad * f + bc;\n        te[10] = ac - bd * f;\n        break;\n      }\n      case Euler.XZY: {\n        const ac = a * c,\n          ad = a * d,\n          bc = b * c,\n          bd = b * d;\n        te[0] = c * e;\n        te[4] = -f;\n        te[8] = d * e;\n        te[1] = ac * f + bd;\n        te[5] = a * e;\n        te[9] = ad * f - bc;\n        te[2] = bc * f - ad;\n        te[6] = b * e;\n        te[10] = bd * f + ac;\n        break;\n      }\n      default:\n        throw new Error(ERR_UNKNOWN_ORDER);\n    }\n    // last column\n    te[3] = 0;\n    te[7] = 0;\n    te[11] = 0;\n    // bottom row\n    te[12] = 0;\n    te[13] = 0;\n    te[14] = 0;\n    te[15] = 1;\n    return te;\n  }\n\n  toQuaternion(): Quaternion {\n    // Abbreviations for the various angular functions\n    const cy = Math.cos(this.yaw * 0.5);\n    const sy = Math.sin(this.yaw * 0.5);\n    const cr = Math.cos(this.roll * 0.5);\n    const sr = Math.sin(this.roll * 0.5);\n    const cp = Math.cos(this.pitch * 0.5);\n    const sp = Math.sin(this.pitch * 0.5);\n    const w = cy * cr * cp + sy * sr * sp;\n    const x = cy * sr * cp - sy * cr * sp;\n    const y = cy * cr * sp + sy * sr * cp;\n    const z = sy * cr * cp - cy * sr * sp;\n    return new Quaternion(x, y, z, w);\n  }\n}\n\n// HELPER FUNCTIONS\n\nfunction validateOrder(value: number): boolean {\n  return value >= 0 && value < 6;\n}\n\nfunction checkOrder(value: number) {\n  if (value < 0 && value >= 6) {\n    throw new Error(ERR_UNKNOWN_ORDER);\n  }\n  return value;\n}\n", "// Copyright (c) 2017 Uber Technologies, Inc.\n// MIT License\nimport {Matrix4} from './matrix4';\nimport {Vector3} from './vector3';\nimport {Euler} from './euler';\nimport {NumericArray} from '@math.gl/types';\n\ntype PoseOptions = {\n  position?: Readonly<NumericArray>;\n  orientation?: Readonly<NumericArray>;\n  x?: number;\n  y?: number;\n  z?: number;\n  roll?: number;\n  pitch?: number;\n  yaw?: number;\n};\n\nexport class Pose {\n  readonly position: Vector3;\n  readonly orientation: Euler;\n\n  constructor({\n    x = 0,\n    y = 0,\n    z = 0,\n    roll = 0,\n    pitch = 0,\n    yaw = 0,\n    position,\n    orientation\n  }: PoseOptions = {}) {\n    if (Array.isArray(position) && position.length === 3) {\n      this.position = new Vector3(position);\n    } else {\n      this.position = new Vector3(x, y, z);\n    }\n    if (Array.isArray(orientation) && orientation.length === 4) {\n      // @ts-expect-error\n      this.orientation = new Euler(orientation, orientation[3]);\n    } else {\n      this.orientation = new Euler(roll, pitch, yaw, Euler.RollPitchYaw);\n    }\n  }\n\n  get x(): number {\n    return this.position.x;\n  }\n\n  set x(value: number) {\n    this.position.x = value;\n  }\n\n  get y(): number {\n    return this.position.y;\n  }\n\n  set y(value: number) {\n    this.position.y = value;\n  }\n\n  get z(): number {\n    return this.position.z;\n  }\n\n  set z(value: number) {\n    this.position.z = value;\n  }\n\n  get roll(): number {\n    return this.orientation.roll;\n  }\n\n  set roll(value: number) {\n    this.orientation.roll = value;\n  }\n\n  get pitch(): number {\n    return this.orientation.pitch;\n  }\n  set pitch(value: number) {\n    this.orientation.pitch = value;\n  }\n\n  get yaw(): number {\n    return this.orientation.yaw;\n  }\n\n  set yaw(value: number) {\n    this.orientation.yaw = value;\n  }\n\n  getPosition(): Vector3 {\n    return this.position;\n  }\n\n  getOrientation(): Euler {\n    return this.orientation;\n  }\n\n  equals(pose: Pose): boolean {\n    if (!pose) {\n      return false;\n    }\n    return this.position.equals(pose.position) && this.orientation.equals(pose.orientation);\n  }\n\n  exactEquals(pose: Pose): boolean {\n    if (!pose) {\n      return false;\n    }\n    return (\n      this.position.exactEquals(pose.position) && this.orientation.exactEquals(pose.orientation)\n    );\n  }\n\n  getTransformationMatrix(): Matrix4 {\n    // setup pre computations for the sin/cos of the angles\n    const sr = Math.sin(this.roll);\n    const sp = Math.sin(this.pitch);\n    const sw = Math.sin(this.yaw);\n    const cr = Math.cos(this.roll);\n    const cp = Math.cos(this.pitch);\n    const cw = Math.cos(this.yaw);\n\n    // Create matrix\n    return new Matrix4().setRowMajor(\n      cw * cp, // 0,0\n      -sw * cr + cw * sp * sr, // 0,1\n      sw * sr + cw * sp * cr, // 0,2\n      this.x, // 0,3\n      sw * cp, // 1,0\n      cw * cr + sw * sp * sr, // 1,1\n      -cw * sr + sw * sp * cr, // 1,2\n      this.y, // 1,3\n      -sp, // 2,0\n      cp * sr, // 2,1\n      cp * cr, // 2,2\n      this.z, // 2,3\n      0,\n      0,\n      0,\n      1\n    );\n  }\n\n  getTransformationMatrixFromPose(pose: Pose): Matrix4 {\n    return new Matrix4()\n      .multiplyRight(this.getTransformationMatrix())\n      .multiplyRight(pose.getTransformationMatrix().invert());\n  }\n\n  getTransformationMatrixToPose(pose: Pose): Matrix4 {\n    return new Matrix4()\n      .multiplyRight(pose.getTransformationMatrix())\n      .multiplyRight(this.getTransformationMatrix().invert());\n  }\n}\n", "// NOTE: Added to make Cesium-derived test cases work\n// TODO: Determine if/how to keep\nexport const EPSILON1 = 1e-1;\nexport const EPSILON2 = 1e-2;\nexport const EPSILON3 = 1e-3;\nexport const EPSILON4 = 1e-4;\nexport const EPSILON5 = 1e-5;\nexport const EPSILON6 = 1e-6;\nexport const EPSILON7 = 1e-7;\nexport const EPSILON8 = 1e-8;\nexport const EPSILON9 = 1e-9;\nexport const EPSILON10 = 1e-10;\nexport const EPSILON11 = 1e-11;\nexport const EPSILON12 = 1e-12;\nexport const EPSILON13 = 1e-13;\nexport const EPSILON14 = 1e-14;\nexport const EPSILON15 = 1e-15;\nexport const EPSILON16 = 1e-16;\nexport const EPSILON17 = 1e-17;\nexport const EPSILON18 = 1e-18;\nexport const EPSILON19 = 1e-19;\nexport const EPSILON20 = 1e-20;\n\nexport const PI_OVER_TWO = Math.PI / 2;\nexport const PI_OVER_FOUR = Math.PI / 4;\nexport const PI_OVER_SIX = Math.PI / 6;\n\nexport const TWO_PI = Math.PI * 2;\n"],
  "mappings": "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",
  "names": ["RADIANS_TO_DEGREES", "Math", "PI", "DEGREES_TO_RADIANS", "DEFAULT_CONFIG", "EPSILON", "debug", "precision", "printTypes", "printDegrees", "printRowMajor", "_cartographicRadians", "globalThis", "mathgl", "config", "configure", "options", "Object", "assign", "formatValue", "value", "round", "parseFloat", "toPrecision", "isArray", "Array", "ArrayBuffer", "isView", "DataView", "clone", "array", "slice", "toRadians", "degrees", "radians", "toDegrees", "result", "map", "sin", "angle", "cos", "tan", "asin", "acos", "atan", "clamp", "min", "max", "lerp", "a", "b", "t", "ai", "i", "equals", "epsilon", "oldEpsilon", "length", "abs", "exactEquals", "constructor", "withEpsilon", "func", "oldPrecision", "duplicateArray", "val", "MathArray", "Array", "clone", "constructor", "copy", "fromArray", "array", "offset", "i", "ELEMENTS", "check", "toArray", "targetArray", "toObject", "targetObject", "from", "arrayOrObject", "isArray", "fromObject", "to", "toTarget", "target", "toFloat32Array", "Float32Array", "toString", "formatString", "config", "opts", "string", "formatValue", "printTypes", "name", "equals", "length", "exactEquals", "negate", "lerp", "a", "b", "t", "undefined", "ai", "endValue", "min", "vector", "Math", "max", "clamp", "minVector", "maxVector", "add", "vectors", "subtract", "scale", "multiplyByScalar", "scalar", "debug", "validate", "Error", "valid", "Number", "isFinite", "sub", "setScalar", "addScalar", "subScalar", "multiplyScalar", "divideScalar", "clampScalar", "elements", "validateVector", "v", "length", "i", "Number", "isFinite", "checkNumber", "value", "Error", "JSON", "stringify", "checkVector", "callerName", "config", "debug", "assert", "condition", "message", "Error", "Vector", "MathArray", "x", "value", "checkNumber", "y", "len", "Math", "sqrt", "lengthSquared", "magnitude", "length", "i", "ELEMENTS", "magnitudeSquared", "distance", "mathArray", "distanceSquared", "dist", "dot", "product", "normalize", "check", "multiply", "vectors", "vector", "divide", "lengthSq", "distanceTo", "distanceToSquared", "getComponent", "assert", "setComponent", "addVectors", "a", "b", "copy", "add", "subVectors", "subtract", "multiplyVectors", "addScaledVector", "constructor", "multiplyScalar", "clone", "equals", "exactEquals", "lerp", "round", "EPSILON", "ARRAY_TYPE", "Float32Array", "Array", "RANDOM", "Math", "random", "round", "a", "Math", "floor", "degree", "Math", "PI", "create", "out", "ARRAY_TYPE", "Float32Array", "clone", "a", "fromValues", "x", "y", "copy", "set", "add", "b", "subtract", "multiply", "divide", "ceil", "Math", "floor", "min", "max", "round", "scale", "scaleAndAdd", "distance", "sqrt", "squaredDistance", "length", "squaredLength", "negate", "inverse", "normalize", "len", "dot", "cross", "z", "lerp", "t", "ax", "ay", "random", "undefined", "r", "RANDOM", "PI", "cos", "sin", "transformMat2", "m", "transformMat2d", "transformMat3", "transformMat4", "rotate", "rad", "p0", "p1", "sinC", "cosC", "angle", "x1", "y1", "x2", "y2", "mag", "cosine", "acos", "zero", "str", "exactEquals", "equals", "a0", "a1", "b0", "b1", "abs", "EPSILON", "sub", "mul", "div", "dist", "sqrDist", "sqrLen", "forEach", "vec", "stride", "offset", "count", "fn", "arg", "i", "l", "vec2_transformMat4AsVector", "out", "a", "m", "x", "y", "w", "vec3_transformMat4AsVector", "z", "vec3_transformMat2", "vec4_transformMat2", "vec4_transformMat3", "Vector2", "Vector", "constructor", "x", "y", "isArray", "arguments", "length", "copy", "config", "debug", "checkNumber", "set", "check", "array", "fromObject", "object", "toObject", "ELEMENTS", "horizontalAngle", "Math", "atan2", "verticalAngle", "transform", "matrix4", "transformAsPoint", "vec2_transformMat4", "transformAsVector", "vec2_transformMat4AsVector", "transformByMatrix3", "matrix3", "vec2_transformMat3", "transformByMatrix2x3", "matrix2x3", "vec2_transformMat2d", "transformByMatrix2", "matrix2", "vec2_transformMat2", "add", "angle", "ceil", "clone", "copy", "create", "cross", "dist", "distance", "div", "divide", "dot", "equals", "exactEquals", "floor", "forEach", "fromValues", "inverse", "len", "length", "lerp", "max", "min", "mul", "multiply", "negate", "normalize", "random", "round", "scale", "scaleAndAdd", "set", "sqrDist", "sqrLen", "squaredDistance", "squaredLength", "str", "sub", "subtract", "transformMat3", "transformMat4", "zero", "create", "out", "ARRAY_TYPE", "Float32Array", "clone", "a", "length", "x", "y", "z", "Math", "sqrt", "fromValues", "copy", "set", "add", "b", "subtract", "multiply", "divide", "ceil", "floor", "min", "max", "round", "scale", "scaleAndAdd", "distance", "squaredDistance", "squaredLength", "negate", "inverse", "normalize", "len", "dot", "cross", "ax", "ay", "az", "bx", "by", "bz", "lerp", "t", "slerp", "angle", "acos", "sinTotal", "sin", "ratioA", "ratioB", "hermite", "c", "d", "factorTimes2", "factor1", "factor2", "factor3", "factor4", "bezier", "inverseFactor", "inverseFactorTimesTwo", "random", "undefined", "r", "RANDOM", "PI", "zScale", "cos", "transformMat4", "m", "w", "transformMat3", "transformQuat", "q", "qx", "qy", "qz", "qw", "uvx", "uvy", "uvz", "uuvx", "uuvy", "uuvz", "w2", "rotateX", "rad", "p", "rotateY", "rotateZ", "mag", "cosine", "zero", "str", "exactEquals", "equals", "a0", "a1", "a2", "b0", "b1", "b2", "abs", "EPSILON", "sub", "mul", "div", "dist", "sqrDist", "sqrLen", "forEach", "vec", "stride", "offset", "count", "fn", "arg", "i", "l", "ORIGIN", "ZERO", "Vector3", "Vector", "Object", "freeze", "constructor", "x", "y", "z", "arguments", "length", "isArray", "copy", "config", "debug", "checkNumber", "set", "check", "array", "fromObject", "object", "toObject", "ELEMENTS", "value", "angle", "vector", "vec3_angle", "cross", "vec3_cross", "rotateX", "radians", "origin", "vec3_rotateX", "rotateY", "vec3_rotateY", "rotateZ", "vec3_rotateZ", "transform", "matrix4", "transformAsPoint", "vec3_transformMat4", "transformAsVector", "vec3_transformMat4AsVector", "transformByMatrix3", "matrix3", "vec3_transformMat3", "transformByMatrix2", "matrix2", "vec3_transformMat2", "transformByQuaternion", "quaternion", "vec3_transformQuat", "ZERO", "Vector4", "Vector", "Object", "freeze", "constructor", "x", "y", "z", "w", "isArray", "arguments", "length", "copy", "config", "debug", "checkNumber", "set", "check", "array", "fromObject", "object", "toObject", "ELEMENTS", "value", "transform", "matrix4", "vec4_transformMat4", "transformByMatrix3", "matrix3", "vec4_transformMat3", "transformByMatrix2", "matrix2", "vec4_transformMat2", "transformByQuaternion", "quaternion", "vec4_transformQuat", "applyMatrix4", "m", "Matrix", "MathArray", "toString", "string", "config", "printRowMajor", "row", "RANK", "col", "i", "ELEMENTS", "getElementIndex", "getElement", "setElement", "value", "checkNumber", "getColumn", "columnIndex", "result", "Array", "fill", "firstIndex", "setColumn", "columnVector", "add", "clone", "copy", "create", "equals", "exactEquals", "fromValues", "mul", "multiply", "rotate", "scale", "set", "str", "sub", "subtract", "create", "out", "ARRAY_TYPE", "Float32Array", "fromMat4", "a", "clone", "copy", "fromValues", "m00", "m01", "m02", "m10", "m11", "m12", "m20", "m21", "m22", "set", "identity", "transpose", "a01", "a02", "a12", "invert", "a00", "a10", "a11", "a20", "a21", "a22", "b01", "b11", "b21", "det", "adjoint", "determinant", "multiply", "b", "b00", "b02", "b10", "b12", "b20", "b22", "translate", "v", "x", "y", "rotate", "rad", "s", "Math", "sin", "c", "cos", "scale", "fromTranslation", "fromRotation", "fromScaling", "fromMat2d", "fromQuat", "q", "z", "w", "x2", "y2", "z2", "xx", "yx", "yy", "zx", "zy", "zz", "wx", "wy", "wz", "normalFromMat4", "a03", "a13", "a23", "a30", "a31", "a32", "a33", "b03", "b04", "b05", "b06", "b07", "b08", "b09", "projection", "width", "height", "str", "frob", "sqrt", "add", "subtract", "multiplyScalar", "multiplyScalarAndAdd", "exactEquals", "equals", "a0", "a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "b0", "b1", "b2", "b3", "b4", "b5", "b6", "b7", "b8", "abs", "EPSILON", "max", "mul", "sub", "INDICES", "IDENTITY_MATRIX", "Object", "freeze", "Matrix3", "Matrix", "IDENTITY", "getIdentityMatrix", "ZERO", "getZeroMatrix", "ELEMENTS", "RANK", "constructor", "array", "args", "arguments", "length", "Array", "isArray", "copy", "identity", "check", "fromObject", "object", "fromQuaternion", "q", "mat3_fromQuat", "set", "m00", "m10", "m20", "m01", "m11", "m21", "m02", "m12", "m22", "setRowMajor", "determinant", "mat3_determinant", "transpose", "mat3_transpose", "invert", "mat3_invert", "multiplyLeft", "a", "mat3_multiply", "multiplyRight", "rotate", "radians", "mat3_rotate", "scale", "factor", "mat3_scale", "translate", "vec", "mat3_translate", "transform", "vector", "result", "out", "vec2_transformMat3", "vec3_transformMat3", "vec4_transformMat3", "Error", "checkVector", "transformVector", "transformVector2", "transformVector3", "ZERO_MATRIX3", "IDENTITY_MATRIX3", "add", "adjoint", "clone", "copy", "create", "determinant", "equals", "exactEquals", "frob", "fromQuat", "fromRotation", "fromScaling", "fromTranslation", "fromValues", "identity", "invert", "mul", "multiply", "multiplyScalar", "multiplyScalarAndAdd", "rotate", "rotateX", "rotateY", "rotateZ", "scale", "set", "str", "sub", "subtract", "translate", "transpose", "create", "out", "ARRAY_TYPE", "Float32Array", "clone", "a", "copy", "fromValues", "m00", "m01", "m02", "m03", "m10", "m11", "m12", "m13", "m20", "m21", "m22", "m23", "m30", "m31", "m32", "m33", "set", "identity", "transpose", "a01", "a02", "a03", "a12", "a13", "a23", "invert", "a00", "a10", "a11", "a20", "a21", "a22", "a30", "a31", "a32", "a33", "b00", "b01", "b02", "b03", "b04", "b05", "b06", "b07", "b08", "b09", "b10", "b11", "det", "adjoint", "determinant", "b0", "b1", "b2", "b3", "b4", "b5", "b6", "b7", "b8", "b9", "multiply", "b", "translate", "v", "x", "y", "z", "scale", "rotate", "rad", "axis", "len", "Math", "sqrt", "c", "s", "t", "b12", "b20", "b21", "b22", "EPSILON", "sin", "cos", "rotateX", "rotateY", "rotateZ", "fromTranslation", "fromScaling", "fromRotation", "fromXRotation", "fromYRotation", "fromZRotation", "fromRotationTranslation", "q", "w", "x2", "y2", "z2", "xx", "xy", "xz", "yy", "yz", "zz", "wx", "wy", "wz", "fromQuat2", "translation", "bx", "by", "bz", "bw", "ax", "ay", "az", "aw", "magnitude", "getTranslation", "mat", "getScaling", "getRotation", "scaling", "is1", "is2", "is3", "sm11", "sm12", "sm13", "sm21", "sm22", "sm23", "sm31", "sm32", "sm33", "trace", "S", "decompose", "out_r", "out_t", "out_s", "fromRotationTranslationScale", "sx", "sy", "sz", "fromRotationTranslationScaleOrigin", "o", "ox", "oy", "oz", "out0", "out1", "out2", "out4", "out5", "out6", "out8", "out9", "out10", "fromQuat", "yx", "zx", "zy", "frustum", "left", "right", "bottom", "top", "near", "far", "rl", "tb", "nf", "perspectiveNO", "fovy", "aspect", "f", "tan", "Infinity", "perspective", "perspectiveZO", "perspectiveFromFieldOfView", "fov", "upTan", "upDegrees", "PI", "downTan", "downDegrees", "leftTan", "leftDegrees", "rightTan", "rightDegrees", "xScale", "yScale", "orthoNO", "lr", "bt", "ortho", "orthoZO", "lookAt", "eye", "center", "up", "x0", "x1", "y0", "y1", "z0", "z1", "eyex", "eyey", "eyez", "upx", "upy", "upz", "centerx", "centery", "centerz", "abs", "targetTo", "target", "str", "frob", "add", "subtract", "multiplyScalar", "multiplyScalarAndAdd", "exactEquals", "equals", "a0", "a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "a14", "a15", "b13", "b14", "b15", "max", "mul", "sub", "add", "ceil", "clone", "copy", "create", "cross", "dist", "distance", "div", "divide", "dot", "equals", "exactEquals", "floor", "forEach", "fromValues", "inverse", "len", "length", "lerp", "max", "min", "mul", "multiply", "negate", "normalize", "random", "round", "scale", "scaleAndAdd", "set", "sqrDist", "sqrLen", "squaredDistance", "squaredLength", "str", "sub", "subtract", "transformMat4", "transformQuat", "zero", "create", "out", "ARRAY_TYPE", "Float32Array", "clone", "a", "fromValues", "x", "y", "z", "w", "copy", "set", "add", "b", "subtract", "multiply", "divide", "ceil", "Math", "floor", "min", "max", "round", "scale", "scaleAndAdd", "distance", "sqrt", "squaredDistance", "length", "squaredLength", "negate", "inverse", "normalize", "len", "dot", "cross", "u", "v", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "lerp", "t", "ax", "ay", "az", "aw", "random", "undefined", "v1", "v2", "v3", "v4", "s1", "s2", "RANDOM", "d", "transformMat4", "m", "transformQuat", "q", "qx", "qy", "qz", "qw", "ix", "iy", "iz", "iw", "zero", "str", "exactEquals", "equals", "a0", "a1", "a2", "a3", "b0", "b1", "b2", "b3", "abs", "EPSILON", "sub", "mul", "div", "dist", "sqrDist", "sqrLen", "forEach", "vec", "stride", "offset", "count", "fn", "arg", "i", "l", "INDICES", "DEFAULT_FOVY", "Math", "PI", "DEFAULT_ASPECT", "DEFAULT_NEAR", "DEFAULT_FAR", "IDENTITY_MATRIX", "Object", "freeze", "Matrix4", "Matrix", "IDENTITY", "getIdentityMatrix", "ZERO", "getZeroMatrix", "ELEMENTS", "RANK", "constructor", "array", "arguments", "length", "Array", "isArray", "copy", "identity", "check", "set", "m00", "m10", "m20", "m30", "m01", "m11", "m21", "m31", "m02", "m12", "m22", "m32", "m03", "m13", "m23", "m33", "setRowMajor", "toRowMajor", "result", "fromObject", "object", "fromQuaternion", "quaternion", "mat4_fromQuat", "frustum", "view", "left", "right", "bottom", "top", "near", "far", "Infinity", "computeInfinitePerspectiveOffCenter", "mat4_frustum", "lookAt", "eye", "center", "up", "mat4_lookAt", "ortho", "mat4_ortho", "orthographic", "fovy", "aspect", "focalDistance", "checkRadians", "halfY", "tan", "perspective", "mat4_perspective", "determinant", "mat4_determinant", "getScale", "sqrt", "getTranslation", "getRotation", "scaleResult", "scale", "inverseScale0", "inverseScale1", "inverseScale2", "getRotationMatrix3", "transpose", "mat4_transpose", "invert", "mat4_invert", "multiplyLeft", "a", "mat4_multiply", "multiplyRight", "rotateX", "radians", "mat4_rotateX", "rotateY", "mat4_rotateY", "rotateZ", "mat4_rotateZ", "rotateXYZ", "angleXYZ", "rotateAxis", "axis", "mat4_rotate", "factor", "mat4_scale", "translate", "vector", "mat4_translate", "transform", "vec4_transformMat4", "checkVector", "transformAsPoint", "out", "vec2_transformMat4", "vec3_transformMat4", "Error", "transformAsVector", "vec2_transformMat4AsVector", "vec3_transformMat4AsVector", "transformPoint", "transformVector", "transformDirection", "makeRotationX", "makeTranslation", "x", "y", "z", "possiblyDegrees", "column0Row0", "column1Row1", "column2Row0", "column2Row1", "column2Row2", "column2Row3", "column3Row2", "add", "clone", "copy", "create", "dot", "equals", "exactEquals", "fromValues", "identity", "invert", "len", "length", "lerp", "mul", "multiply", "normalize", "rotateX", "rotateY", "rotateZ", "scale", "set", "slerp", "sqrLen", "squaredLength", "str", "create", "out", "ARRAY_TYPE", "Float32Array", "identity", "setAxisAngle", "axis", "rad", "s", "Math", "sin", "cos", "getAxisAngle", "out_axis", "q", "acos", "EPSILON", "getAngle", "a", "b", "dotproduct", "dot", "multiply", "ax", "ay", "az", "aw", "bx", "by", "bz", "bw", "rotateX", "rotateY", "rotateZ", "calculateW", "x", "y", "z", "sqrt", "abs", "exp", "w", "r", "et", "ln", "t", "atan2", "log", "pow", "scale", "slerp", "cosom", "omega", "scale0", "scale1", "sinom", "invert", "a0", "a1", "a2", "a3", "invDot", "conjugate", "fromMat3", "m", "fTrace", "fRoot", "i", "j", "k", "str", "clone", "fromValues", "copy", "set", "add", "mul", "lerp", "length", "len", "squaredLength", "sqrLen", "normalize", "exactEquals", "equals", "rotationTo", "tmpvec3", "xUnitVec3", "yUnitVec3", "vec3", "cross", "PI", "sqlerp", "temp1", "temp2", "c", "d", "setAxes", "matr", "view", "right", "up", "IDENTITY_QUATERNION", "Quaternion", "MathArray", "constructor", "x", "y", "z", "w", "Array", "isArray", "arguments", "length", "copy", "set", "array", "check", "fromObject", "object", "fromMatrix3", "m", "quat_fromMat3", "fromAxisRotation", "axis", "rad", "quat_setAxisAngle", "identity", "quat_identity", "setAxisAngle", "ELEMENTS", "value", "checkNumber", "len", "quat_length", "lengthSquared", "quat_squaredLength", "dot", "a", "quat_dot", "rotationTo", "vectorA", "vectorB", "quat_rotationTo", "add", "quat_add", "calculateW", "quat_calculateW", "conjugate", "quat_conjugate", "invert", "quat_invert", "lerp", "b", "t", "undefined", "quat_lerp", "multiplyRight", "quat_multiply", "multiplyLeft", "normalize", "l", "rotateX", "quat_rotateX", "rotateY", "quat_rotateY", "rotateZ", "quat_rotateZ", "scale", "quat_scale", "slerp", "arg0", "arg1", "arg2", "start", "target", "ratio", "quat_slerp", "transformVector4", "vector", "result", "Vector4", "vec4_transformQuat", "checkVector", "lengthSq", "setFromAxisAngle", "premultiply", "multiply", "o", "EPSILON", "EARTH_RADIUS_METERS", "SphericalCoordinates", "constructor", "phi", "theta", "radius", "bearing", "pitch", "altitude", "radiusScale", "undefined", "check", "toString", "formatString", "config", "printTypes", "f", "formatValue", "equals", "other", "exactEquals", "degrees", "v", "Math", "PI", "radians", "longitude", "latitude", "lng", "lat", "z", "set", "clone", "copy", "fromLngLatZ", "fromVector3", "length", "atan2", "acos", "clamp", "toVector3", "Vector3", "rotateX", "rotateZ", "makeSafe", "max", "min", "Number", "isFinite", "Error", "ERR_UNKNOWN_ORDER", "ALMOST_ONE", "RotationOrder", "Euler", "MathArray", "ZYX", "YXZ", "XZY", "ZXY", "YZX", "XYZ", "RollPitchYaw", "DefaultOrder", "RotationOrders", "rotationOrder", "order", "ELEMENTS", "constructor", "x", "y", "z", "arguments", "length", "Array", "isArray", "fromVector3", "set", "fromQuaternion", "quaternion", "w", "ysqr", "t0", "t1", "t2", "t3", "t4", "roll", "Math", "atan2", "pitch", "asin", "yaw", "fromObject", "object", "Error", "copy", "array", "Number", "isFinite", "check", "validate", "validateOrder", "toArray", "offset", "toArray4", "toVector3", "result", "value", "checkNumber", "alpha", "beta", "gamma", "phi", "theta", "psi", "checkOrder", "v", "fromArray", "undefined", "fromRollPitchYaw", "fromRotationMatrix", "m", "_fromRotationMatrix", "getRotationMatrix", "_getRotationMatrix", "getQuaternion", "q", "Quaternion", "rotateX", "rotateY", "rotateZ", "m11", "m12", "m13", "m21", "m22", "m23", "m31", "m32", "m33", "clamp", "abs", "te", "a", "cos", "c", "e", "b", "sin", "d", "f", "ae", "af", "be", "bf", "ce", "cf", "de", "df", "ac", "ad", "bc", "bd", "toQuaternion", "cy", "sy", "cr", "sr", "cp", "sp", "Pose", "constructor", "x", "y", "z", "roll", "pitch", "yaw", "position", "orientation", "Array", "isArray", "length", "Vector3", "Euler", "RollPitchYaw", "value", "getPosition", "getOrientation", "equals", "pose", "exactEquals", "getTransformationMatrix", "sr", "Math", "sin", "sp", "sw", "cr", "cos", "cp", "cw", "Matrix4", "setRowMajor", "getTransformationMatrixFromPose", "multiplyRight", "invert", "getTransformationMatrixToPose", "EPSILON2", "EPSILON1", "EPSILON3", "EPSILON4", "EPSILON5", "EPSILON6", "EPSILON7", "EPSILON8", "EPSILON9", "EPSILON10", "EPSILON11", "EPSILON12", "EPSILON13", "EPSILON14", "EPSILON15", "EPSILON16", "EPSILON17", "EPSILON18", "EPSILON19", "EPSILON20", "PI_OVER_TWO", "Math", "PI", "PI_OVER_FOUR", "PI_OVER_SIX", "TWO_PI"]
}
